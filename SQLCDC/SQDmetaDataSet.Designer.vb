'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SQDmetaDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SQDmetaDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCONNECTIONS As CONNECTIONSDataTable
    
    Private tableCONNECTIONSATTR As CONNECTIONSATTRDataTable
    
    Private tableDATASTORES As DATASTORESDataTable
    
    Private tableDATASTORESATTR As DATASTORESATTRDataTable
    
    Private tableDESCRIPTIONFIELDS As DESCRIPTIONFIELDSDataTable
    
    Private tableDESCRIPTIONS As DESCRIPTIONSDataTable
    
    Private tableDESCRIPTIONSATTR As DESCRIPTIONSATTRDataTable
    
    Private tableDESCRIPTIONSELECT As DESCRIPTIONSELECTDataTable
    
    Private tableDESCRIPTSELFIELDS As DESCRIPTSELFIELDSDataTable
    
    Private tableDSSELECTIONS As DSSELECTIONSDataTable
    
    Private tableDSSELFIELDS As DSSELFIELDSDataTable
    
    Private tableENGINES As ENGINESDataTable
    
    Private tableENGINESATTR As ENGINESATTRDataTable
    
    Private tableENVIRONMENTS As ENVIRONMENTSDataTable
    
    Private tableENVIRONMENTSATTR As ENVIRONMENTSATTRDataTable
    
    Private tablePROJECTATTR As PROJECTATTRDataTable
    
    Private tablePROJECTS As PROJECTSDataTable
    
    Private tableSYSTEMS As SYSTEMSDataTable
    
    Private tableSYSTEMSATTR As SYSTEMSATTRDataTable
    
    Private tableTASKDS As TASKDSDataTable
    
    Private tableTASKMAP As TASKMAPDataTable
    
    Private tableTASKS As TASKSDataTable
    
    Private tableTest1 As Test1DataTable
    
    Private tableVARIABLES As VARIABLESDataTable
    
    Private tableVARIABLESATTR As VARIABLESATTRDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CONNECTIONS")) Is Nothing) Then
                MyBase.Tables.Add(New CONNECTIONSDataTable(ds.Tables("CONNECTIONS")))
            End If
            If (Not (ds.Tables("CONNECTIONSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New CONNECTIONSATTRDataTable(ds.Tables("CONNECTIONSATTR")))
            End If
            If (Not (ds.Tables("DATASTORES")) Is Nothing) Then
                MyBase.Tables.Add(New DATASTORESDataTable(ds.Tables("DATASTORES")))
            End If
            If (Not (ds.Tables("DATASTORESATTR")) Is Nothing) Then
                MyBase.Tables.Add(New DATASTORESATTRDataTable(ds.Tables("DATASTORESATTR")))
            End If
            If (Not (ds.Tables("DESCRIPTIONFIELDS")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONFIELDSDataTable(ds.Tables("DESCRIPTIONFIELDS")))
            End If
            If (Not (ds.Tables("DESCRIPTIONS")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONSDataTable(ds.Tables("DESCRIPTIONS")))
            End If
            If (Not (ds.Tables("DESCRIPTIONSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONSATTRDataTable(ds.Tables("DESCRIPTIONSATTR")))
            End If
            If (Not (ds.Tables("DESCRIPTIONSELECT")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONSELECTDataTable(ds.Tables("DESCRIPTIONSELECT")))
            End If
            If (Not (ds.Tables("DESCRIPTSELFIELDS")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTSELFIELDSDataTable(ds.Tables("DESCRIPTSELFIELDS")))
            End If
            If (Not (ds.Tables("DSSELECTIONS")) Is Nothing) Then
                MyBase.Tables.Add(New DSSELECTIONSDataTable(ds.Tables("DSSELECTIONS")))
            End If
            If (Not (ds.Tables("DSSELFIELDS")) Is Nothing) Then
                MyBase.Tables.Add(New DSSELFIELDSDataTable(ds.Tables("DSSELFIELDS")))
            End If
            If (Not (ds.Tables("ENGINES")) Is Nothing) Then
                MyBase.Tables.Add(New ENGINESDataTable(ds.Tables("ENGINES")))
            End If
            If (Not (ds.Tables("ENGINESATTR")) Is Nothing) Then
                MyBase.Tables.Add(New ENGINESATTRDataTable(ds.Tables("ENGINESATTR")))
            End If
            If (Not (ds.Tables("ENVIRONMENTS")) Is Nothing) Then
                MyBase.Tables.Add(New ENVIRONMENTSDataTable(ds.Tables("ENVIRONMENTS")))
            End If
            If (Not (ds.Tables("ENVIRONMENTSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New ENVIRONMENTSATTRDataTable(ds.Tables("ENVIRONMENTSATTR")))
            End If
            If (Not (ds.Tables("PROJECTATTR")) Is Nothing) Then
                MyBase.Tables.Add(New PROJECTATTRDataTable(ds.Tables("PROJECTATTR")))
            End If
            If (Not (ds.Tables("PROJECTS")) Is Nothing) Then
                MyBase.Tables.Add(New PROJECTSDataTable(ds.Tables("PROJECTS")))
            End If
            If (Not (ds.Tables("SYSTEMS")) Is Nothing) Then
                MyBase.Tables.Add(New SYSTEMSDataTable(ds.Tables("SYSTEMS")))
            End If
            If (Not (ds.Tables("SYSTEMSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New SYSTEMSATTRDataTable(ds.Tables("SYSTEMSATTR")))
            End If
            If (Not (ds.Tables("TASKDS")) Is Nothing) Then
                MyBase.Tables.Add(New TASKDSDataTable(ds.Tables("TASKDS")))
            End If
            If (Not (ds.Tables("TASKMAP")) Is Nothing) Then
                MyBase.Tables.Add(New TASKMAPDataTable(ds.Tables("TASKMAP")))
            End If
            If (Not (ds.Tables("TASKS")) Is Nothing) Then
                MyBase.Tables.Add(New TASKSDataTable(ds.Tables("TASKS")))
            End If
            If (Not (ds.Tables("Test1")) Is Nothing) Then
                MyBase.Tables.Add(New Test1DataTable(ds.Tables("Test1")))
            End If
            If (Not (ds.Tables("VARIABLES")) Is Nothing) Then
                MyBase.Tables.Add(New VARIABLESDataTable(ds.Tables("VARIABLES")))
            End If
            If (Not (ds.Tables("VARIABLESATTR")) Is Nothing) Then
                MyBase.Tables.Add(New VARIABLESATTRDataTable(ds.Tables("VARIABLESATTR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CONNECTIONS() As CONNECTIONSDataTable
        Get
            Return Me.tableCONNECTIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CONNECTIONSATTR() As CONNECTIONSATTRDataTable
        Get
            Return Me.tableCONNECTIONSATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DATASTORES() As DATASTORESDataTable
        Get
            Return Me.tableDATASTORES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DATASTORESATTR() As DATASTORESATTRDataTable
        Get
            Return Me.tableDATASTORESATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DESCRIPTIONFIELDS() As DESCRIPTIONFIELDSDataTable
        Get
            Return Me.tableDESCRIPTIONFIELDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DESCRIPTIONS() As DESCRIPTIONSDataTable
        Get
            Return Me.tableDESCRIPTIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DESCRIPTIONSATTR() As DESCRIPTIONSATTRDataTable
        Get
            Return Me.tableDESCRIPTIONSATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DESCRIPTIONSELECT() As DESCRIPTIONSELECTDataTable
        Get
            Return Me.tableDESCRIPTIONSELECT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DESCRIPTSELFIELDS() As DESCRIPTSELFIELDSDataTable
        Get
            Return Me.tableDESCRIPTSELFIELDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DSSELECTIONS() As DSSELECTIONSDataTable
        Get
            Return Me.tableDSSELECTIONS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DSSELFIELDS() As DSSELFIELDSDataTable
        Get
            Return Me.tableDSSELFIELDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENGINES() As ENGINESDataTable
        Get
            Return Me.tableENGINES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENGINESATTR() As ENGINESATTRDataTable
        Get
            Return Me.tableENGINESATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENVIRONMENTS() As ENVIRONMENTSDataTable
        Get
            Return Me.tableENVIRONMENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ENVIRONMENTSATTR() As ENVIRONMENTSATTRDataTable
        Get
            Return Me.tableENVIRONMENTSATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROJECTATTR() As PROJECTATTRDataTable
        Get
            Return Me.tablePROJECTATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROJECTS() As PROJECTSDataTable
        Get
            Return Me.tablePROJECTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYSTEMS() As SYSTEMSDataTable
        Get
            Return Me.tableSYSTEMS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYSTEMSATTR() As SYSTEMSATTRDataTable
        Get
            Return Me.tableSYSTEMSATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TASKDS() As TASKDSDataTable
        Get
            Return Me.tableTASKDS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TASKMAP() As TASKMAPDataTable
        Get
            Return Me.tableTASKMAP
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TASKS() As TASKSDataTable
        Get
            Return Me.tableTASKS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Test1() As Test1DataTable
        Get
            Return Me.tableTest1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VARIABLES() As VARIABLESDataTable
        Get
            Return Me.tableVARIABLES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VARIABLESATTR() As VARIABLESATTRDataTable
        Get
            Return Me.tableVARIABLESATTR
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SQDmetaDataSet = CType(MyBase.Clone,SQDmetaDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("CONNECTIONS")) Is Nothing) Then
                MyBase.Tables.Add(New CONNECTIONSDataTable(ds.Tables("CONNECTIONS")))
            End If
            If (Not (ds.Tables("CONNECTIONSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New CONNECTIONSATTRDataTable(ds.Tables("CONNECTIONSATTR")))
            End If
            If (Not (ds.Tables("DATASTORES")) Is Nothing) Then
                MyBase.Tables.Add(New DATASTORESDataTable(ds.Tables("DATASTORES")))
            End If
            If (Not (ds.Tables("DATASTORESATTR")) Is Nothing) Then
                MyBase.Tables.Add(New DATASTORESATTRDataTable(ds.Tables("DATASTORESATTR")))
            End If
            If (Not (ds.Tables("DESCRIPTIONFIELDS")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONFIELDSDataTable(ds.Tables("DESCRIPTIONFIELDS")))
            End If
            If (Not (ds.Tables("DESCRIPTIONS")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONSDataTable(ds.Tables("DESCRIPTIONS")))
            End If
            If (Not (ds.Tables("DESCRIPTIONSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONSATTRDataTable(ds.Tables("DESCRIPTIONSATTR")))
            End If
            If (Not (ds.Tables("DESCRIPTIONSELECT")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTIONSELECTDataTable(ds.Tables("DESCRIPTIONSELECT")))
            End If
            If (Not (ds.Tables("DESCRIPTSELFIELDS")) Is Nothing) Then
                MyBase.Tables.Add(New DESCRIPTSELFIELDSDataTable(ds.Tables("DESCRIPTSELFIELDS")))
            End If
            If (Not (ds.Tables("DSSELECTIONS")) Is Nothing) Then
                MyBase.Tables.Add(New DSSELECTIONSDataTable(ds.Tables("DSSELECTIONS")))
            End If
            If (Not (ds.Tables("DSSELFIELDS")) Is Nothing) Then
                MyBase.Tables.Add(New DSSELFIELDSDataTable(ds.Tables("DSSELFIELDS")))
            End If
            If (Not (ds.Tables("ENGINES")) Is Nothing) Then
                MyBase.Tables.Add(New ENGINESDataTable(ds.Tables("ENGINES")))
            End If
            If (Not (ds.Tables("ENGINESATTR")) Is Nothing) Then
                MyBase.Tables.Add(New ENGINESATTRDataTable(ds.Tables("ENGINESATTR")))
            End If
            If (Not (ds.Tables("ENVIRONMENTS")) Is Nothing) Then
                MyBase.Tables.Add(New ENVIRONMENTSDataTable(ds.Tables("ENVIRONMENTS")))
            End If
            If (Not (ds.Tables("ENVIRONMENTSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New ENVIRONMENTSATTRDataTable(ds.Tables("ENVIRONMENTSATTR")))
            End If
            If (Not (ds.Tables("PROJECTATTR")) Is Nothing) Then
                MyBase.Tables.Add(New PROJECTATTRDataTable(ds.Tables("PROJECTATTR")))
            End If
            If (Not (ds.Tables("PROJECTS")) Is Nothing) Then
                MyBase.Tables.Add(New PROJECTSDataTable(ds.Tables("PROJECTS")))
            End If
            If (Not (ds.Tables("SYSTEMS")) Is Nothing) Then
                MyBase.Tables.Add(New SYSTEMSDataTable(ds.Tables("SYSTEMS")))
            End If
            If (Not (ds.Tables("SYSTEMSATTR")) Is Nothing) Then
                MyBase.Tables.Add(New SYSTEMSATTRDataTable(ds.Tables("SYSTEMSATTR")))
            End If
            If (Not (ds.Tables("TASKDS")) Is Nothing) Then
                MyBase.Tables.Add(New TASKDSDataTable(ds.Tables("TASKDS")))
            End If
            If (Not (ds.Tables("TASKMAP")) Is Nothing) Then
                MyBase.Tables.Add(New TASKMAPDataTable(ds.Tables("TASKMAP")))
            End If
            If (Not (ds.Tables("TASKS")) Is Nothing) Then
                MyBase.Tables.Add(New TASKSDataTable(ds.Tables("TASKS")))
            End If
            If (Not (ds.Tables("Test1")) Is Nothing) Then
                MyBase.Tables.Add(New Test1DataTable(ds.Tables("Test1")))
            End If
            If (Not (ds.Tables("VARIABLES")) Is Nothing) Then
                MyBase.Tables.Add(New VARIABLESDataTable(ds.Tables("VARIABLES")))
            End If
            If (Not (ds.Tables("VARIABLESATTR")) Is Nothing) Then
                MyBase.Tables.Add(New VARIABLESATTRDataTable(ds.Tables("VARIABLESATTR")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCONNECTIONS = CType(MyBase.Tables("CONNECTIONS"),CONNECTIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCONNECTIONS) Is Nothing) Then
                Me.tableCONNECTIONS.InitVars
            End If
        End If
        Me.tableCONNECTIONSATTR = CType(MyBase.Tables("CONNECTIONSATTR"),CONNECTIONSATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCONNECTIONSATTR) Is Nothing) Then
                Me.tableCONNECTIONSATTR.InitVars
            End If
        End If
        Me.tableDATASTORES = CType(MyBase.Tables("DATASTORES"),DATASTORESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDATASTORES) Is Nothing) Then
                Me.tableDATASTORES.InitVars
            End If
        End If
        Me.tableDATASTORESATTR = CType(MyBase.Tables("DATASTORESATTR"),DATASTORESATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDATASTORESATTR) Is Nothing) Then
                Me.tableDATASTORESATTR.InitVars
            End If
        End If
        Me.tableDESCRIPTIONFIELDS = CType(MyBase.Tables("DESCRIPTIONFIELDS"),DESCRIPTIONFIELDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDESCRIPTIONFIELDS) Is Nothing) Then
                Me.tableDESCRIPTIONFIELDS.InitVars
            End If
        End If
        Me.tableDESCRIPTIONS = CType(MyBase.Tables("DESCRIPTIONS"),DESCRIPTIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDESCRIPTIONS) Is Nothing) Then
                Me.tableDESCRIPTIONS.InitVars
            End If
        End If
        Me.tableDESCRIPTIONSATTR = CType(MyBase.Tables("DESCRIPTIONSATTR"),DESCRIPTIONSATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDESCRIPTIONSATTR) Is Nothing) Then
                Me.tableDESCRIPTIONSATTR.InitVars
            End If
        End If
        Me.tableDESCRIPTIONSELECT = CType(MyBase.Tables("DESCRIPTIONSELECT"),DESCRIPTIONSELECTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDESCRIPTIONSELECT) Is Nothing) Then
                Me.tableDESCRIPTIONSELECT.InitVars
            End If
        End If
        Me.tableDESCRIPTSELFIELDS = CType(MyBase.Tables("DESCRIPTSELFIELDS"),DESCRIPTSELFIELDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDESCRIPTSELFIELDS) Is Nothing) Then
                Me.tableDESCRIPTSELFIELDS.InitVars
            End If
        End If
        Me.tableDSSELECTIONS = CType(MyBase.Tables("DSSELECTIONS"),DSSELECTIONSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDSSELECTIONS) Is Nothing) Then
                Me.tableDSSELECTIONS.InitVars
            End If
        End If
        Me.tableDSSELFIELDS = CType(MyBase.Tables("DSSELFIELDS"),DSSELFIELDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDSSELFIELDS) Is Nothing) Then
                Me.tableDSSELFIELDS.InitVars
            End If
        End If
        Me.tableENGINES = CType(MyBase.Tables("ENGINES"),ENGINESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableENGINES) Is Nothing) Then
                Me.tableENGINES.InitVars
            End If
        End If
        Me.tableENGINESATTR = CType(MyBase.Tables("ENGINESATTR"),ENGINESATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableENGINESATTR) Is Nothing) Then
                Me.tableENGINESATTR.InitVars
            End If
        End If
        Me.tableENVIRONMENTS = CType(MyBase.Tables("ENVIRONMENTS"),ENVIRONMENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableENVIRONMENTS) Is Nothing) Then
                Me.tableENVIRONMENTS.InitVars
            End If
        End If
        Me.tableENVIRONMENTSATTR = CType(MyBase.Tables("ENVIRONMENTSATTR"),ENVIRONMENTSATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableENVIRONMENTSATTR) Is Nothing) Then
                Me.tableENVIRONMENTSATTR.InitVars
            End If
        End If
        Me.tablePROJECTATTR = CType(MyBase.Tables("PROJECTATTR"),PROJECTATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROJECTATTR) Is Nothing) Then
                Me.tablePROJECTATTR.InitVars
            End If
        End If
        Me.tablePROJECTS = CType(MyBase.Tables("PROJECTS"),PROJECTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROJECTS) Is Nothing) Then
                Me.tablePROJECTS.InitVars
            End If
        End If
        Me.tableSYSTEMS = CType(MyBase.Tables("SYSTEMS"),SYSTEMSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYSTEMS) Is Nothing) Then
                Me.tableSYSTEMS.InitVars
            End If
        End If
        Me.tableSYSTEMSATTR = CType(MyBase.Tables("SYSTEMSATTR"),SYSTEMSATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYSTEMSATTR) Is Nothing) Then
                Me.tableSYSTEMSATTR.InitVars
            End If
        End If
        Me.tableTASKDS = CType(MyBase.Tables("TASKDS"),TASKDSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTASKDS) Is Nothing) Then
                Me.tableTASKDS.InitVars
            End If
        End If
        Me.tableTASKMAP = CType(MyBase.Tables("TASKMAP"),TASKMAPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTASKMAP) Is Nothing) Then
                Me.tableTASKMAP.InitVars
            End If
        End If
        Me.tableTASKS = CType(MyBase.Tables("TASKS"),TASKSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTASKS) Is Nothing) Then
                Me.tableTASKS.InitVars
            End If
        End If
        Me.tableTest1 = CType(MyBase.Tables("Test1"),Test1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableTest1) Is Nothing) Then
                Me.tableTest1.InitVars
            End If
        End If
        Me.tableVARIABLES = CType(MyBase.Tables("VARIABLES"),VARIABLESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVARIABLES) Is Nothing) Then
                Me.tableVARIABLES.InitVars
            End If
        End If
        Me.tableVARIABLESATTR = CType(MyBase.Tables("VARIABLESATTR"),VARIABLESATTRDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVARIABLESATTR) Is Nothing) Then
                Me.tableVARIABLESATTR.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "SQDmetaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SQDmetaDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCONNECTIONS = New CONNECTIONSDataTable()
        MyBase.Tables.Add(Me.tableCONNECTIONS)
        Me.tableCONNECTIONSATTR = New CONNECTIONSATTRDataTable()
        MyBase.Tables.Add(Me.tableCONNECTIONSATTR)
        Me.tableDATASTORES = New DATASTORESDataTable()
        MyBase.Tables.Add(Me.tableDATASTORES)
        Me.tableDATASTORESATTR = New DATASTORESATTRDataTable()
        MyBase.Tables.Add(Me.tableDATASTORESATTR)
        Me.tableDESCRIPTIONFIELDS = New DESCRIPTIONFIELDSDataTable()
        MyBase.Tables.Add(Me.tableDESCRIPTIONFIELDS)
        Me.tableDESCRIPTIONS = New DESCRIPTIONSDataTable()
        MyBase.Tables.Add(Me.tableDESCRIPTIONS)
        Me.tableDESCRIPTIONSATTR = New DESCRIPTIONSATTRDataTable()
        MyBase.Tables.Add(Me.tableDESCRIPTIONSATTR)
        Me.tableDESCRIPTIONSELECT = New DESCRIPTIONSELECTDataTable()
        MyBase.Tables.Add(Me.tableDESCRIPTIONSELECT)
        Me.tableDESCRIPTSELFIELDS = New DESCRIPTSELFIELDSDataTable()
        MyBase.Tables.Add(Me.tableDESCRIPTSELFIELDS)
        Me.tableDSSELECTIONS = New DSSELECTIONSDataTable()
        MyBase.Tables.Add(Me.tableDSSELECTIONS)
        Me.tableDSSELFIELDS = New DSSELFIELDSDataTable()
        MyBase.Tables.Add(Me.tableDSSELFIELDS)
        Me.tableENGINES = New ENGINESDataTable()
        MyBase.Tables.Add(Me.tableENGINES)
        Me.tableENGINESATTR = New ENGINESATTRDataTable()
        MyBase.Tables.Add(Me.tableENGINESATTR)
        Me.tableENVIRONMENTS = New ENVIRONMENTSDataTable()
        MyBase.Tables.Add(Me.tableENVIRONMENTS)
        Me.tableENVIRONMENTSATTR = New ENVIRONMENTSATTRDataTable()
        MyBase.Tables.Add(Me.tableENVIRONMENTSATTR)
        Me.tablePROJECTATTR = New PROJECTATTRDataTable()
        MyBase.Tables.Add(Me.tablePROJECTATTR)
        Me.tablePROJECTS = New PROJECTSDataTable()
        MyBase.Tables.Add(Me.tablePROJECTS)
        Me.tableSYSTEMS = New SYSTEMSDataTable()
        MyBase.Tables.Add(Me.tableSYSTEMS)
        Me.tableSYSTEMSATTR = New SYSTEMSATTRDataTable()
        MyBase.Tables.Add(Me.tableSYSTEMSATTR)
        Me.tableTASKDS = New TASKDSDataTable()
        MyBase.Tables.Add(Me.tableTASKDS)
        Me.tableTASKMAP = New TASKMAPDataTable()
        MyBase.Tables.Add(Me.tableTASKMAP)
        Me.tableTASKS = New TASKSDataTable()
        MyBase.Tables.Add(Me.tableTASKS)
        Me.tableTest1 = New Test1DataTable()
        MyBase.Tables.Add(Me.tableTest1)
        Me.tableVARIABLES = New VARIABLESDataTable()
        MyBase.Tables.Add(Me.tableVARIABLES)
        Me.tableVARIABLESATTR = New VARIABLESATTRDataTable()
        MyBase.Tables.Add(Me.tableVARIABLESATTR)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCONNECTIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCONNECTIONSATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDATASTORES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDATASTORESATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDESCRIPTIONFIELDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDESCRIPTIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDESCRIPTIONSATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDESCRIPTIONSELECT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDESCRIPTSELFIELDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDSSELECTIONS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeDSSELFIELDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeENGINES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeENGINESATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeENVIRONMENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeENVIRONMENTSATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePROJECTATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePROJECTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSYSTEMS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSYSTEMSATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTASKDS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTASKMAP() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTASKS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTest1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeVARIABLES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeVARIABLESATTR() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CONNECTIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As CONNECTIONSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CONNECTIONSATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As CONNECTIONSATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DATASTORESRowChangeEventHandler(ByVal sender As Object, ByVal e As DATASTORESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DATASTORESATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As DATASTORESATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DESCRIPTIONFIELDSRowChangeEventHandler(ByVal sender As Object, ByVal e As DESCRIPTIONFIELDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DESCRIPTIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As DESCRIPTIONSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DESCRIPTIONSATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As DESCRIPTIONSATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DESCRIPTIONSELECTRowChangeEventHandler(ByVal sender As Object, ByVal e As DESCRIPTIONSELECTRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DESCRIPTSELFIELDSRowChangeEventHandler(ByVal sender As Object, ByVal e As DESCRIPTSELFIELDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DSSELECTIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As DSSELECTIONSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub DSSELFIELDSRowChangeEventHandler(ByVal sender As Object, ByVal e As DSSELFIELDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ENGINESRowChangeEventHandler(ByVal sender As Object, ByVal e As ENGINESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ENGINESATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As ENGINESATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ENVIRONMENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As ENVIRONMENTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ENVIRONMENTSATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As ENVIRONMENTSATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PROJECTATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As PROJECTATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PROJECTSRowChangeEventHandler(ByVal sender As Object, ByVal e As PROJECTSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SYSTEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As SYSTEMSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SYSTEMSATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As SYSTEMSATTRRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TASKDSRowChangeEventHandler(ByVal sender As Object, ByVal e As TASKDSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TASKMAPRowChangeEventHandler(ByVal sender As Object, ByVal e As TASKMAPRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TASKSRowChangeEventHandler(ByVal sender As Object, ByVal e As TASKSRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Test1RowChangeEventHandler(ByVal sender As Object, ByVal e As Test1RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub VARIABLESRowChangeEventHandler(ByVal sender As Object, ByVal e As VARIABLESRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub VARIABLESATTRRowChangeEventHandler(ByVal sender As Object, ByVal e As VARIABLESATTRRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CONNECTIONSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnCONNECTIONNAME As Global.System.Data.DataColumn
        
        Private columnCONNECTIONDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CONNECTIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CONNECTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONNECTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CONNECTIONDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONNECTIONDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CONNECTIONSRow
            Get
                Return CType(Me.Rows(index),CONNECTIONSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSRowChanging As CONNECTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSRowChanged As CONNECTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSRowDeleting As CONNECTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSRowDeleted As CONNECTIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCONNECTIONSRow(ByVal row As CONNECTIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCONNECTIONSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String, ByVal CONNECTIONDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As CONNECTIONSRow
            Dim rowCONNECTIONSRow As CONNECTIONSRow = CType(Me.NewRow,CONNECTIONSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowCONNECTIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCONNECTIONSRow)
            Return rowCONNECTIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMECONNECTIONNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String) As CONNECTIONSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME}),CONNECTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CONNECTIONSDataTable = CType(MyBase.Clone,CONNECTIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CONNECTIONSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnCONNECTIONNAME = MyBase.Columns("CONNECTIONNAME")
            Me.columnCONNECTIONDESCRIPTION = MyBase.Columns("CONNECTIONDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnCONNECTIONNAME = New Global.System.Data.DataColumn("CONNECTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONNECTIONNAME)
            Me.columnCONNECTIONDESCRIPTION = New Global.System.Data.DataColumn("CONNECTIONDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONNECTIONDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnCONNECTIONNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnCONNECTIONNAME.AllowDBNull = false
            Me.columnCONNECTIONNAME.MaxLength = 20
            Me.columnCONNECTIONDESCRIPTION.MaxLength = 1024
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCONNECTIONSRow() As CONNECTIONSRow
            Return CType(Me.NewRow,CONNECTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CONNECTIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CONNECTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CONNECTIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSRowChanged(Me, New CONNECTIONSRowChangeEvent(CType(e.Row,CONNECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CONNECTIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSRowChanging(Me, New CONNECTIONSRowChangeEvent(CType(e.Row,CONNECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CONNECTIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSRowDeleted(Me, New CONNECTIONSRowChangeEvent(CType(e.Row,CONNECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CONNECTIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSRowDeleting(Me, New CONNECTIONSRowChangeEvent(CType(e.Row,CONNECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCONNECTIONSRow(ByVal row As CONNECTIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CONNECTIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CONNECTIONSATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnCONNECTIONNAME As Global.System.Data.DataColumn
        
        Private columnCONNECTIONATTRB As Global.System.Data.DataColumn
        
        Private columnCONNECTIONATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CONNECTIONSATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CONNECTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONNECTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CONNECTIONATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONNECTIONATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CONNECTIONATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONNECTIONATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CONNECTIONSATTRRow
            Get
                Return CType(Me.Rows(index),CONNECTIONSATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSATTRRowChanging As CONNECTIONSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSATTRRowChanged As CONNECTIONSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSATTRRowDeleting As CONNECTIONSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CONNECTIONSATTRRowDeleted As CONNECTIONSATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCONNECTIONSATTRRow(ByVal row As CONNECTIONSATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCONNECTIONSATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String, ByVal CONNECTIONATTRB As String, ByVal CONNECTIONATTRBVALUE As String) As CONNECTIONSATTRRow
            Dim rowCONNECTIONSATTRRow As CONNECTIONSATTRRow = CType(Me.NewRow,CONNECTIONSATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONATTRB, CONNECTIONATTRBVALUE}
            rowCONNECTIONSATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCONNECTIONSATTRRow)
            Return rowCONNECTIONSATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMECONNECTIONNAMECONNECTIONATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String, ByVal CONNECTIONATTRB As String) As CONNECTIONSATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONATTRB}),CONNECTIONSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CONNECTIONSATTRDataTable = CType(MyBase.Clone,CONNECTIONSATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CONNECTIONSATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnCONNECTIONNAME = MyBase.Columns("CONNECTIONNAME")
            Me.columnCONNECTIONATTRB = MyBase.Columns("CONNECTIONATTRB")
            Me.columnCONNECTIONATTRBVALUE = MyBase.Columns("CONNECTIONATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnCONNECTIONNAME = New Global.System.Data.DataColumn("CONNECTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONNECTIONNAME)
            Me.columnCONNECTIONATTRB = New Global.System.Data.DataColumn("CONNECTIONATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONNECTIONATTRB)
            Me.columnCONNECTIONATTRBVALUE = New Global.System.Data.DataColumn("CONNECTIONATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONNECTIONATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnCONNECTIONNAME, Me.columnCONNECTIONATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnCONNECTIONNAME.AllowDBNull = false
            Me.columnCONNECTIONNAME.MaxLength = 20
            Me.columnCONNECTIONATTRB.AllowDBNull = false
            Me.columnCONNECTIONATTRB.MaxLength = 24
            Me.columnCONNECTIONATTRBVALUE.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCONNECTIONSATTRRow() As CONNECTIONSATTRRow
            Return CType(Me.NewRow,CONNECTIONSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CONNECTIONSATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CONNECTIONSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CONNECTIONSATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSATTRRowChanged(Me, New CONNECTIONSATTRRowChangeEvent(CType(e.Row,CONNECTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CONNECTIONSATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSATTRRowChanging(Me, New CONNECTIONSATTRRowChangeEvent(CType(e.Row,CONNECTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CONNECTIONSATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSATTRRowDeleted(Me, New CONNECTIONSATTRRowChangeEvent(CType(e.Row,CONNECTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CONNECTIONSATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent CONNECTIONSATTRRowDeleting(Me, New CONNECTIONSATTRRowChangeEvent(CType(e.Row,CONNECTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCONNECTIONSATTRRow(ByVal row As CONNECTIONSATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CONNECTIONSATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DATASTORESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnDATASTORENAME As Global.System.Data.DataColumn
        
        Private columnDSDIRECTION As Global.System.Data.DataColumn
        
        Private columnDSTYPE As Global.System.Data.DataColumn
        
        Private columnDATASTOREDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DATASTORES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTORENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTORENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DSDIRECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDSDIRECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DSTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDSTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTOREDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTOREDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DATASTORESRow
            Get
                Return CType(Me.Rows(index),DATASTORESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESRowChanging As DATASTORESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESRowChanged As DATASTORESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESRowDeleting As DATASTORESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESRowDeleted As DATASTORESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDATASTORESRow(ByVal row As DATASTORESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDATASTORESRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DSDIRECTION As String, ByVal DSTYPE As Integer, ByVal DATASTOREDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As DATASTORESRow
            Dim rowDATASTORESRow As DATASTORESRow = CType(Me.NewRow,DATASTORESRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DSDIRECTION, DSTYPE, DATASTOREDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowDATASTORESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDATASTORESRow)
            Return rowDATASTORESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEDATASTORENAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String) As DATASTORESRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME}),DATASTORESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DATASTORESDataTable = CType(MyBase.Clone,DATASTORESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DATASTORESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnDATASTORENAME = MyBase.Columns("DATASTORENAME")
            Me.columnDSDIRECTION = MyBase.Columns("DSDIRECTION")
            Me.columnDSTYPE = MyBase.Columns("DSTYPE")
            Me.columnDATASTOREDESCRIPTION = MyBase.Columns("DATASTOREDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnDATASTORENAME = New Global.System.Data.DataColumn("DATASTORENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTORENAME)
            Me.columnDSDIRECTION = New Global.System.Data.DataColumn("DSDIRECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSDIRECTION)
            Me.columnDSTYPE = New Global.System.Data.DataColumn("DSTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSTYPE)
            Me.columnDATASTOREDESCRIPTION = New Global.System.Data.DataColumn("DATASTOREDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTOREDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnDATASTORENAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnDATASTORENAME.AllowDBNull = false
            Me.columnDATASTORENAME.MaxLength = 20
            Me.columnDSDIRECTION.MaxLength = 1
            Me.columnDATASTOREDESCRIPTION.MaxLength = 1024
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDATASTORESRow() As DATASTORESRow
            Return CType(Me.NewRow,DATASTORESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DATASTORESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DATASTORESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DATASTORESRowChangedEvent) Is Nothing) Then
                RaiseEvent DATASTORESRowChanged(Me, New DATASTORESRowChangeEvent(CType(e.Row,DATASTORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DATASTORESRowChangingEvent) Is Nothing) Then
                RaiseEvent DATASTORESRowChanging(Me, New DATASTORESRowChangeEvent(CType(e.Row,DATASTORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DATASTORESRowDeletedEvent) Is Nothing) Then
                RaiseEvent DATASTORESRowDeleted(Me, New DATASTORESRowChangeEvent(CType(e.Row,DATASTORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DATASTORESRowDeletingEvent) Is Nothing) Then
                RaiseEvent DATASTORESRowDeleting(Me, New DATASTORESRowChangeEvent(CType(e.Row,DATASTORESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDATASTORESRow(ByVal row As DATASTORESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DATASTORESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DATASTORESATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnDATASTORENAME As Global.System.Data.DataColumn
        
        Private columnDATASTOREATTRB As Global.System.Data.DataColumn
        
        Private columnDATASTOREATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DATASTORESATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTORENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTORENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTOREATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTOREATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTOREATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTOREATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DATASTORESATTRRow
            Get
                Return CType(Me.Rows(index),DATASTORESATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESATTRRowChanging As DATASTORESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESATTRRowChanged As DATASTORESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESATTRRowDeleting As DATASTORESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DATASTORESATTRRowDeleted As DATASTORESATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDATASTORESATTRRow(ByVal row As DATASTORESATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDATASTORESATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DATASTOREATTRB As String, ByVal DATASTOREATTRBVALUE As String) As DATASTORESATTRRow
            Dim rowDATASTORESATTRRow As DATASTORESATTRRow = CType(Me.NewRow,DATASTORESATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DATASTOREATTRB, DATASTOREATTRBVALUE}
            rowDATASTORESATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDATASTORESATTRRow)
            Return rowDATASTORESATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEDATASTORENAMEDATASTOREATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DATASTOREATTRB As String) As DATASTORESATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DATASTOREATTRB}),DATASTORESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DATASTORESATTRDataTable = CType(MyBase.Clone,DATASTORESATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DATASTORESATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnDATASTORENAME = MyBase.Columns("DATASTORENAME")
            Me.columnDATASTOREATTRB = MyBase.Columns("DATASTOREATTRB")
            Me.columnDATASTOREATTRBVALUE = MyBase.Columns("DATASTOREATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnDATASTORENAME = New Global.System.Data.DataColumn("DATASTORENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTORENAME)
            Me.columnDATASTOREATTRB = New Global.System.Data.DataColumn("DATASTOREATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTOREATTRB)
            Me.columnDATASTOREATTRBVALUE = New Global.System.Data.DataColumn("DATASTOREATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTOREATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnDATASTORENAME, Me.columnDATASTOREATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnDATASTORENAME.AllowDBNull = false
            Me.columnDATASTORENAME.MaxLength = 20
            Me.columnDATASTOREATTRB.AllowDBNull = false
            Me.columnDATASTOREATTRB.MaxLength = 24
            Me.columnDATASTOREATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDATASTORESATTRRow() As DATASTORESATTRRow
            Return CType(Me.NewRow,DATASTORESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DATASTORESATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DATASTORESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DATASTORESATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent DATASTORESATTRRowChanged(Me, New DATASTORESATTRRowChangeEvent(CType(e.Row,DATASTORESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DATASTORESATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent DATASTORESATTRRowChanging(Me, New DATASTORESATTRRowChangeEvent(CType(e.Row,DATASTORESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DATASTORESATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent DATASTORESATTRRowDeleted(Me, New DATASTORESATTRRowChangeEvent(CType(e.Row,DATASTORESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DATASTORESATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent DATASTORESATTRRowDeleting(Me, New DATASTORESATTRRowChangeEvent(CType(e.Row,DATASTORESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDATASTORESATTRRow(ByVal row As DATASTORESATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DATASTORESATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DESCRIPTIONFIELDSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnFIELDNAME As Global.System.Data.DataColumn
        
        Private columnPARENTNAME As Global.System.Data.DataColumn
        
        Private columnSEQNO As Global.System.Data.DataColumn
        
        Private columnDESCFIELDDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnNCHILDREN As Global.System.Data.DataColumn
        
        Private columnNLEVEL As Global.System.Data.DataColumn
        
        Private columnNTIMES As Global.System.Data.DataColumn
        
        Private columnNOCCNO As Global.System.Data.DataColumn
        
        Private columnDATATYPE As Global.System.Data.DataColumn
        
        Private columnNOFFSET As Global.System.Data.DataColumn
        
        Private columnNLENGTH As Global.System.Data.DataColumn
        
        Private columnNSCALE As Global.System.Data.DataColumn
        
        Private columnCANNULL As Global.System.Data.DataColumn
        
        Private columnISKEY As Global.System.Data.DataColumn
        
        Private columnORGNAME As Global.System.Data.DataColumn
        
        Private columnDATEFORMAT As Global.System.Data.DataColumn
        
        Private columnLABEL As Global.System.Data.DataColumn
        
        Private columnINITVAL As Global.System.Data.DataColumn
        
        Private columnRETYPE As Global.System.Data.DataColumn
        
        Private columnINVALID As Global.System.Data.DataColumn
        
        Private columnEXTTYPE As Global.System.Data.DataColumn
        
        Private columnIDENTVAL As Global.System.Data.DataColumn
        
        Private columnFOREIGNKEY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DESCRIPTIONFIELDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FIELDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIELDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PARENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCFIELDDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCFIELDDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NCHILDRENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCHILDREN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NLEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIMESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOCCNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOCCNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATATYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATATYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOFFSETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOFFSET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NLENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSCALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSCALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CANNULLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANNULL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ISKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORGNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATEFORMATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEFORMAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INITVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINITVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INVALIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVALID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDENTVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FOREIGNKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOREIGNKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DESCRIPTIONFIELDSRow
            Get
                Return CType(Me.Rows(index),DESCRIPTIONFIELDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONFIELDSRowChanging As DESCRIPTIONFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONFIELDSRowChanged As DESCRIPTIONFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONFIELDSRowDeleting As DESCRIPTIONFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONFIELDSRowDeleted As DESCRIPTIONFIELDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDESCRIPTIONFIELDSRow(ByVal row As DESCRIPTIONFIELDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDESCRIPTIONFIELDSRow( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal FIELDNAME As String,  _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Integer,  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Integer,  _
                    ByVal NLEVEL As Integer,  _
                    ByVal NTIMES As Integer,  _
                    ByVal NOCCNO As Integer,  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Integer,  _
                    ByVal NLENGTH As Integer,  _
                    ByVal NSCALE As Integer,  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String) As DESCRIPTIONFIELDSRow
            Dim rowDESCRIPTIONFIELDSRow As DESCRIPTIONFIELDSRow = CType(Me.NewRow,DESCRIPTIONFIELDSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY}
            rowDESCRIPTIONFIELDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDESCRIPTIONFIELDSRow)
            Return rowDESCRIPTIONFIELDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMEDESCRIPTIONNAMEFIELDNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal FIELDNAME As String) As DESCRIPTIONFIELDSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, FIELDNAME}),DESCRIPTIONFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DESCRIPTIONFIELDSDataTable = CType(MyBase.Clone,DESCRIPTIONFIELDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DESCRIPTIONFIELDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnFIELDNAME = MyBase.Columns("FIELDNAME")
            Me.columnPARENTNAME = MyBase.Columns("PARENTNAME")
            Me.columnSEQNO = MyBase.Columns("SEQNO")
            Me.columnDESCFIELDDESCRIPTION = MyBase.Columns("DESCFIELDDESCRIPTION")
            Me.columnNCHILDREN = MyBase.Columns("NCHILDREN")
            Me.columnNLEVEL = MyBase.Columns("NLEVEL")
            Me.columnNTIMES = MyBase.Columns("NTIMES")
            Me.columnNOCCNO = MyBase.Columns("NOCCNO")
            Me.columnDATATYPE = MyBase.Columns("DATATYPE")
            Me.columnNOFFSET = MyBase.Columns("NOFFSET")
            Me.columnNLENGTH = MyBase.Columns("NLENGTH")
            Me.columnNSCALE = MyBase.Columns("NSCALE")
            Me.columnCANNULL = MyBase.Columns("CANNULL")
            Me.columnISKEY = MyBase.Columns("ISKEY")
            Me.columnORGNAME = MyBase.Columns("ORGNAME")
            Me.columnDATEFORMAT = MyBase.Columns("DATEFORMAT")
            Me.columnLABEL = MyBase.Columns("LABEL")
            Me.columnINITVAL = MyBase.Columns("INITVAL")
            Me.columnRETYPE = MyBase.Columns("RETYPE")
            Me.columnINVALID = MyBase.Columns("INVALID")
            Me.columnEXTTYPE = MyBase.Columns("EXTTYPE")
            Me.columnIDENTVAL = MyBase.Columns("IDENTVAL")
            Me.columnFOREIGNKEY = MyBase.Columns("FOREIGNKEY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnFIELDNAME = New Global.System.Data.DataColumn("FIELDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIELDNAME)
            Me.columnPARENTNAME = New Global.System.Data.DataColumn("PARENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENTNAME)
            Me.columnSEQNO = New Global.System.Data.DataColumn("SEQNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQNO)
            Me.columnDESCFIELDDESCRIPTION = New Global.System.Data.DataColumn("DESCFIELDDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCFIELDDESCRIPTION)
            Me.columnNCHILDREN = New Global.System.Data.DataColumn("NCHILDREN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCHILDREN)
            Me.columnNLEVEL = New Global.System.Data.DataColumn("NLEVEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLEVEL)
            Me.columnNTIMES = New Global.System.Data.DataColumn("NTIMES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIMES)
            Me.columnNOCCNO = New Global.System.Data.DataColumn("NOCCNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOCCNO)
            Me.columnDATATYPE = New Global.System.Data.DataColumn("DATATYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATATYPE)
            Me.columnNOFFSET = New Global.System.Data.DataColumn("NOFFSET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOFFSET)
            Me.columnNLENGTH = New Global.System.Data.DataColumn("NLENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLENGTH)
            Me.columnNSCALE = New Global.System.Data.DataColumn("NSCALE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSCALE)
            Me.columnCANNULL = New Global.System.Data.DataColumn("CANNULL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANNULL)
            Me.columnISKEY = New Global.System.Data.DataColumn("ISKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISKEY)
            Me.columnORGNAME = New Global.System.Data.DataColumn("ORGNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGNAME)
            Me.columnDATEFORMAT = New Global.System.Data.DataColumn("DATEFORMAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEFORMAT)
            Me.columnLABEL = New Global.System.Data.DataColumn("LABEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL)
            Me.columnINITVAL = New Global.System.Data.DataColumn("INITVAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINITVAL)
            Me.columnRETYPE = New Global.System.Data.DataColumn("RETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETYPE)
            Me.columnINVALID = New Global.System.Data.DataColumn("INVALID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVALID)
            Me.columnEXTTYPE = New Global.System.Data.DataColumn("EXTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTTYPE)
            Me.columnIDENTVAL = New Global.System.Data.DataColumn("IDENTVAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTVAL)
            Me.columnFOREIGNKEY = New Global.System.Data.DataColumn("FOREIGNKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOREIGNKEY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnDESCRIPTIONNAME, Me.columnFIELDNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 20
            Me.columnFIELDNAME.AllowDBNull = false
            Me.columnFIELDNAME.MaxLength = 128
            Me.columnPARENTNAME.MaxLength = 128
            Me.columnDESCFIELDDESCRIPTION.MaxLength = 1024
            Me.columnDATATYPE.MaxLength = 30
            Me.columnCANNULL.MaxLength = 3
            Me.columnISKEY.MaxLength = 3
            Me.columnORGNAME.MaxLength = 255
            Me.columnDATEFORMAT.MaxLength = 50
            Me.columnLABEL.MaxLength = 255
            Me.columnINITVAL.MaxLength = 255
            Me.columnRETYPE.MaxLength = 50
            Me.columnINVALID.MaxLength = 30
            Me.columnEXTTYPE.MaxLength = 50
            Me.columnIDENTVAL.MaxLength = 50
            Me.columnFOREIGNKEY.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDESCRIPTIONFIELDSRow() As DESCRIPTIONFIELDSRow
            Return CType(Me.NewRow,DESCRIPTIONFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DESCRIPTIONFIELDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DESCRIPTIONFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DESCRIPTIONFIELDSRowChangedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONFIELDSRowChanged(Me, New DESCRIPTIONFIELDSRowChangeEvent(CType(e.Row,DESCRIPTIONFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DESCRIPTIONFIELDSRowChangingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONFIELDSRowChanging(Me, New DESCRIPTIONFIELDSRowChangeEvent(CType(e.Row,DESCRIPTIONFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DESCRIPTIONFIELDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONFIELDSRowDeleted(Me, New DESCRIPTIONFIELDSRowChangeEvent(CType(e.Row,DESCRIPTIONFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DESCRIPTIONFIELDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONFIELDSRowDeleting(Me, New DESCRIPTIONFIELDSRowChangeEvent(CType(e.Row,DESCRIPTIONFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDESCRIPTIONFIELDSRow(ByVal row As DESCRIPTIONFIELDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DESCRIPTIONFIELDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DESCRIPTIONSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONTYPE As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DESCRIPTIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DESCRIPTIONSRow
            Get
                Return CType(Me.Rows(index),DESCRIPTIONSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSRowChanging As DESCRIPTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSRowChanged As DESCRIPTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSRowDeleting As DESCRIPTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSRowDeleted As DESCRIPTIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDESCRIPTIONSRow(ByVal row As DESCRIPTIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDESCRIPTIONSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal DESCRIPTIONTYPE As Integer, ByVal DESCRIPTIONDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As DESCRIPTIONSRow
            Dim rowDESCRIPTIONSRow As DESCRIPTIONSRow = CType(Me.NewRow,DESCRIPTIONSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONTYPE, DESCRIPTIONDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowDESCRIPTIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDESCRIPTIONSRow)
            Return rowDESCRIPTIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMEDESCRIPTIONNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String) As DESCRIPTIONSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME}),DESCRIPTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DESCRIPTIONSDataTable = CType(MyBase.Clone,DESCRIPTIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DESCRIPTIONSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnDESCRIPTIONTYPE = MyBase.Columns("DESCRIPTIONTYPE")
            Me.columnDESCRIPTIONDESCRIPTION = MyBase.Columns("DESCRIPTIONDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnDESCRIPTIONTYPE = New Global.System.Data.DataColumn("DESCRIPTIONTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONTYPE)
            Me.columnDESCRIPTIONDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTIONDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnDESCRIPTIONNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 20
            Me.columnDESCRIPTIONDESCRIPTION.MaxLength = 1024
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDESCRIPTIONSRow() As DESCRIPTIONSRow
            Return CType(Me.NewRow,DESCRIPTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DESCRIPTIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DESCRIPTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DESCRIPTIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSRowChanged(Me, New DESCRIPTIONSRowChangeEvent(CType(e.Row,DESCRIPTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DESCRIPTIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSRowChanging(Me, New DESCRIPTIONSRowChangeEvent(CType(e.Row,DESCRIPTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DESCRIPTIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSRowDeleted(Me, New DESCRIPTIONSRowChangeEvent(CType(e.Row,DESCRIPTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DESCRIPTIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSRowDeleting(Me, New DESCRIPTIONSRowChangeEvent(CType(e.Row,DESCRIPTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDESCRIPTIONSRow(ByVal row As DESCRIPTIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DESCRIPTIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DESCRIPTIONSATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONATTRB As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DESCRIPTIONSATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DESCRIPTIONSATTRRow
            Get
                Return CType(Me.Rows(index),DESCRIPTIONSATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSATTRRowChanging As DESCRIPTIONSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSATTRRowChanged As DESCRIPTIONSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSATTRRowDeleting As DESCRIPTIONSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSATTRRowDeleted As DESCRIPTIONSATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDESCRIPTIONSATTRRow(ByVal row As DESCRIPTIONSATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDESCRIPTIONSATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal DESCRIPTIONATTRB As String, ByVal DESCRIPTIONATTRBVALUE As String) As DESCRIPTIONSATTRRow
            Dim rowDESCRIPTIONSATTRRow As DESCRIPTIONSATTRRow = CType(Me.NewRow,DESCRIPTIONSATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONATTRB, DESCRIPTIONATTRBVALUE}
            rowDESCRIPTIONSATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDESCRIPTIONSATTRRow)
            Return rowDESCRIPTIONSATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMEDESCRIPTIONNAMEDESCRIPTIONATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal DESCRIPTIONATTRB As String) As DESCRIPTIONSATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONATTRB}),DESCRIPTIONSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DESCRIPTIONSATTRDataTable = CType(MyBase.Clone,DESCRIPTIONSATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DESCRIPTIONSATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnDESCRIPTIONATTRB = MyBase.Columns("DESCRIPTIONATTRB")
            Me.columnDESCRIPTIONATTRBVALUE = MyBase.Columns("DESCRIPTIONATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnDESCRIPTIONATTRB = New Global.System.Data.DataColumn("DESCRIPTIONATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONATTRB)
            Me.columnDESCRIPTIONATTRBVALUE = New Global.System.Data.DataColumn("DESCRIPTIONATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnDESCRIPTIONNAME, Me.columnDESCRIPTIONATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 20
            Me.columnDESCRIPTIONATTRB.AllowDBNull = false
            Me.columnDESCRIPTIONATTRB.MaxLength = 24
            Me.columnDESCRIPTIONATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDESCRIPTIONSATTRRow() As DESCRIPTIONSATTRRow
            Return CType(Me.NewRow,DESCRIPTIONSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DESCRIPTIONSATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DESCRIPTIONSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DESCRIPTIONSATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSATTRRowChanged(Me, New DESCRIPTIONSATTRRowChangeEvent(CType(e.Row,DESCRIPTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DESCRIPTIONSATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSATTRRowChanging(Me, New DESCRIPTIONSATTRRowChangeEvent(CType(e.Row,DESCRIPTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DESCRIPTIONSATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSATTRRowDeleted(Me, New DESCRIPTIONSATTRRowChangeEvent(CType(e.Row,DESCRIPTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DESCRIPTIONSATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSATTRRowDeleting(Me, New DESCRIPTIONSATTRRowChangeEvent(CType(e.Row,DESCRIPTIONSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDESCRIPTIONSATTRRow(ByVal row As DESCRIPTIONSATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DESCRIPTIONSATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DESCRIPTIONSELECTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnSELECTIONNAME As Global.System.Data.DataColumn
        
        Private columnISSYSTEMSEL As Global.System.Data.DataColumn
        
        Private columnSELECTDESCRIPTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DESCRIPTIONSELECT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SELECTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELECTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ISSYSTEMSELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISSYSTEMSEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SELECTDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELECTDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DESCRIPTIONSELECTRow
            Get
                Return CType(Me.Rows(index),DESCRIPTIONSELECTRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSELECTRowChanging As DESCRIPTIONSELECTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSELECTRowChanged As DESCRIPTIONSELECTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSELECTRowDeleting As DESCRIPTIONSELECTRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTIONSELECTRowDeleted As DESCRIPTIONSELECTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDESCRIPTIONSELECTRow(ByVal row As DESCRIPTIONSELECTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDESCRIPTIONSELECTRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal ISSYSTEMSEL As Integer, ByVal SELECTDESCRIPTION As String) As DESCRIPTIONSELECTRow
            Dim rowDESCRIPTIONSELECTRow As DESCRIPTIONSELECTRow = CType(Me.NewRow,DESCRIPTIONSELECTRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME, ISSYSTEMSEL, SELECTDESCRIPTION}
            rowDESCRIPTIONSELECTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDESCRIPTIONSELECTRow)
            Return rowDESCRIPTIONSELECTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMEDESCRIPTIONNAMESELECTIONNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String) As DESCRIPTIONSELECTRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME}),DESCRIPTIONSELECTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DESCRIPTIONSELECTDataTable = CType(MyBase.Clone,DESCRIPTIONSELECTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DESCRIPTIONSELECTDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnSELECTIONNAME = MyBase.Columns("SELECTIONNAME")
            Me.columnISSYSTEMSEL = MyBase.Columns("ISSYSTEMSEL")
            Me.columnSELECTDESCRIPTION = MyBase.Columns("SELECTDESCRIPTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnSELECTIONNAME = New Global.System.Data.DataColumn("SELECTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELECTIONNAME)
            Me.columnISSYSTEMSEL = New Global.System.Data.DataColumn("ISSYSTEMSEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISSYSTEMSEL)
            Me.columnSELECTDESCRIPTION = New Global.System.Data.DataColumn("SELECTDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELECTDESCRIPTION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnDESCRIPTIONNAME, Me.columnSELECTIONNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 20
            Me.columnSELECTIONNAME.AllowDBNull = false
            Me.columnSELECTIONNAME.MaxLength = 50
            Me.columnSELECTDESCRIPTION.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDESCRIPTIONSELECTRow() As DESCRIPTIONSELECTRow
            Return CType(Me.NewRow,DESCRIPTIONSELECTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DESCRIPTIONSELECTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DESCRIPTIONSELECTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DESCRIPTIONSELECTRowChangedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSELECTRowChanged(Me, New DESCRIPTIONSELECTRowChangeEvent(CType(e.Row,DESCRIPTIONSELECTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DESCRIPTIONSELECTRowChangingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSELECTRowChanging(Me, New DESCRIPTIONSELECTRowChangeEvent(CType(e.Row,DESCRIPTIONSELECTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DESCRIPTIONSELECTRowDeletedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSELECTRowDeleted(Me, New DESCRIPTIONSELECTRowChangeEvent(CType(e.Row,DESCRIPTIONSELECTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DESCRIPTIONSELECTRowDeletingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTIONSELECTRowDeleting(Me, New DESCRIPTIONSELECTRowChangeEvent(CType(e.Row,DESCRIPTIONSELECTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDESCRIPTIONSELECTRow(ByVal row As DESCRIPTIONSELECTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DESCRIPTIONSELECTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DESCRIPTSELFIELDSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnSELECTIONNAME As Global.System.Data.DataColumn
        
        Private columnFIELDNAME As Global.System.Data.DataColumn
        
        Private columnSELECTFIELDDESCRIPTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DESCRIPTSELFIELDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SELECTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELECTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FIELDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIELDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SELECTFIELDDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELECTFIELDDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DESCRIPTSELFIELDSRow
            Get
                Return CType(Me.Rows(index),DESCRIPTSELFIELDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTSELFIELDSRowChanging As DESCRIPTSELFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTSELFIELDSRowChanged As DESCRIPTSELFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTSELFIELDSRowDeleting As DESCRIPTSELFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DESCRIPTSELFIELDSRowDeleted As DESCRIPTSELFIELDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDESCRIPTSELFIELDSRow(ByVal row As DESCRIPTSELFIELDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDESCRIPTSELFIELDSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal FIELDNAME As String, ByVal SELECTFIELDDESCRIPTION As String) As DESCRIPTSELFIELDSRow
            Dim rowDESCRIPTSELFIELDSRow As DESCRIPTSELFIELDSRow = CType(Me.NewRow,DESCRIPTSELFIELDSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME, FIELDNAME, SELECTFIELDDESCRIPTION}
            rowDESCRIPTSELFIELDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDESCRIPTSELFIELDSRow)
            Return rowDESCRIPTSELFIELDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMEDESCRIPTIONNAMESELECTIONNAMEFIELDNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal FIELDNAME As String) As DESCRIPTSELFIELDSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME, FIELDNAME}),DESCRIPTSELFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DESCRIPTSELFIELDSDataTable = CType(MyBase.Clone,DESCRIPTSELFIELDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DESCRIPTSELFIELDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnSELECTIONNAME = MyBase.Columns("SELECTIONNAME")
            Me.columnFIELDNAME = MyBase.Columns("FIELDNAME")
            Me.columnSELECTFIELDDESCRIPTION = MyBase.Columns("SELECTFIELDDESCRIPTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnSELECTIONNAME = New Global.System.Data.DataColumn("SELECTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELECTIONNAME)
            Me.columnFIELDNAME = New Global.System.Data.DataColumn("FIELDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIELDNAME)
            Me.columnSELECTFIELDDESCRIPTION = New Global.System.Data.DataColumn("SELECTFIELDDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELECTFIELDDESCRIPTION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnDESCRIPTIONNAME, Me.columnSELECTIONNAME, Me.columnFIELDNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 20
            Me.columnSELECTIONNAME.AllowDBNull = false
            Me.columnSELECTIONNAME.MaxLength = 50
            Me.columnFIELDNAME.AllowDBNull = false
            Me.columnFIELDNAME.MaxLength = 128
            Me.columnSELECTFIELDDESCRIPTION.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDESCRIPTSELFIELDSRow() As DESCRIPTSELFIELDSRow
            Return CType(Me.NewRow,DESCRIPTSELFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DESCRIPTSELFIELDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DESCRIPTSELFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DESCRIPTSELFIELDSRowChangedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTSELFIELDSRowChanged(Me, New DESCRIPTSELFIELDSRowChangeEvent(CType(e.Row,DESCRIPTSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DESCRIPTSELFIELDSRowChangingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTSELFIELDSRowChanging(Me, New DESCRIPTSELFIELDSRowChangeEvent(CType(e.Row,DESCRIPTSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DESCRIPTSELFIELDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DESCRIPTSELFIELDSRowDeleted(Me, New DESCRIPTSELFIELDSRowChangeEvent(CType(e.Row,DESCRIPTSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DESCRIPTSELFIELDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DESCRIPTSELFIELDSRowDeleting(Me, New DESCRIPTSELFIELDSRowChangeEvent(CType(e.Row,DESCRIPTSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDESCRIPTSELFIELDSRow(ByVal row As DESCRIPTSELFIELDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DESCRIPTSELFIELDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DSSELECTIONSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnDATASTORENAME As Global.System.Data.DataColumn
        
        Private columnSELECTIONNAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnPARENT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DSSELECTIONS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTORENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTORENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SELECTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELECTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PARENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DSSELECTIONSRow
            Get
                Return CType(Me.Rows(index),DSSELECTIONSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELECTIONSRowChanging As DSSELECTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELECTIONSRowChanged As DSSELECTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELECTIONSRowDeleting As DSSELECTIONSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELECTIONSRowDeleted As DSSELECTIONSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDSSELECTIONSRow(ByVal row As DSSELECTIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDSSELECTIONSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal SELECTIONNAME As String, ByVal DESCRIPTIONNAME As String, ByVal PARENT As String) As DSSELECTIONSRow
            Dim rowDSSELECTIONSRow As DSSELECTIONSRow = CType(Me.NewRow,DSSELECTIONSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, SELECTIONNAME, DESCRIPTIONNAME, PARENT}
            rowDSSELECTIONSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDSSELECTIONSRow)
            Return rowDSSELECTIONSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEDATASTORENAMESELECTIONNAMEDESCRIPTIONNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal SELECTIONNAME As String, ByVal DESCRIPTIONNAME As String) As DSSELECTIONSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, SELECTIONNAME, DESCRIPTIONNAME}),DSSELECTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DSSELECTIONSDataTable = CType(MyBase.Clone,DSSELECTIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DSSELECTIONSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnDATASTORENAME = MyBase.Columns("DATASTORENAME")
            Me.columnSELECTIONNAME = MyBase.Columns("SELECTIONNAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnPARENT = MyBase.Columns("PARENT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnDATASTORENAME = New Global.System.Data.DataColumn("DATASTORENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTORENAME)
            Me.columnSELECTIONNAME = New Global.System.Data.DataColumn("SELECTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELECTIONNAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnPARENT = New Global.System.Data.DataColumn("PARENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnDATASTORENAME, Me.columnSELECTIONNAME, Me.columnDESCRIPTIONNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnDATASTORENAME.AllowDBNull = false
            Me.columnDATASTORENAME.MaxLength = 20
            Me.columnSELECTIONNAME.AllowDBNull = false
            Me.columnSELECTIONNAME.MaxLength = 50
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 50
            Me.columnPARENT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDSSELECTIONSRow() As DSSELECTIONSRow
            Return CType(Me.NewRow,DSSELECTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DSSELECTIONSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DSSELECTIONSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DSSELECTIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent DSSELECTIONSRowChanged(Me, New DSSELECTIONSRowChangeEvent(CType(e.Row,DSSELECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DSSELECTIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent DSSELECTIONSRowChanging(Me, New DSSELECTIONSRowChangeEvent(CType(e.Row,DSSELECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DSSELECTIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DSSELECTIONSRowDeleted(Me, New DSSELECTIONSRowChangeEvent(CType(e.Row,DSSELECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DSSELECTIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DSSELECTIONSRowDeleting(Me, New DSSELECTIONSRowChangeEvent(CType(e.Row,DSSELECTIONSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDSSELECTIONSRow(ByVal row As DSSELECTIONSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DSSELECTIONSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DSSELFIELDSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnDATASTORENAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTIONNAME As Global.System.Data.DataColumn
        
        Private columnSELECTIONNAME As Global.System.Data.DataColumn
        
        Private columnFIELDNAME As Global.System.Data.DataColumn
        
        Private columnPARENTNAME As Global.System.Data.DataColumn
        
        Private columnSEQNO As Global.System.Data.DataColumn
        
        Private columnDESCFIELDDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnNCHILDREN As Global.System.Data.DataColumn
        
        Private columnNLEVEL As Global.System.Data.DataColumn
        
        Private columnNTIMES As Global.System.Data.DataColumn
        
        Private columnNOCCNO As Global.System.Data.DataColumn
        
        Private columnDATATYPE As Global.System.Data.DataColumn
        
        Private columnNOFFSET As Global.System.Data.DataColumn
        
        Private columnNLENGTH As Global.System.Data.DataColumn
        
        Private columnNSCALE As Global.System.Data.DataColumn
        
        Private columnCANNULL As Global.System.Data.DataColumn
        
        Private columnISKEY As Global.System.Data.DataColumn
        
        Private columnORGNAME As Global.System.Data.DataColumn
        
        Private columnDATEFORMAT As Global.System.Data.DataColumn
        
        Private columnLABEL As Global.System.Data.DataColumn
        
        Private columnINITVAL As Global.System.Data.DataColumn
        
        Private columnRETYPE As Global.System.Data.DataColumn
        
        Private columnINVALID As Global.System.Data.DataColumn
        
        Private columnEXTTYPE As Global.System.Data.DataColumn
        
        Private columnIDENTVAL As Global.System.Data.DataColumn
        
        Private columnFOREIGNKEY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DSSELFIELDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTORENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTORENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCRIPTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SELECTIONNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSELECTIONNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FIELDNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFIELDNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PARENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPARENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DESCFIELDDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCFIELDDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NCHILDRENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCHILDREN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NLEVELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLEVEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NTIMESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNTIMES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOCCNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOCCNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATATYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATATYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NOFFSETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNOFFSET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NLENGTHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLENGTH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NSCALEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNSCALE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CANNULLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCANNULL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ISKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ORGNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORGNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATEFORMATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATEFORMAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LABELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLABEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INITVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINITVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property RETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property INVALIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVALID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXTTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXTTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDENTVALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDENTVAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FOREIGNKEYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFOREIGNKEY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DSSELFIELDSRow
            Get
                Return CType(Me.Rows(index),DSSELFIELDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELFIELDSRowChanging As DSSELFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELFIELDSRowChanged As DSSELFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELFIELDSRowDeleting As DSSELFIELDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event DSSELFIELDSRowDeleted As DSSELFIELDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddDSSELFIELDSRow(ByVal row As DSSELFIELDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddDSSELFIELDSRow( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal DATASTORENAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal SELECTIONNAME As String,  _
                    ByVal FIELDNAME As String,  _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Integer,  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Integer,  _
                    ByVal NLEVEL As Integer,  _
                    ByVal NTIMES As Integer,  _
                    ByVal NOCCNO As Integer,  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Integer,  _
                    ByVal NLENGTH As Integer,  _
                    ByVal NSCALE As Integer,  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String) As DSSELFIELDSRow
            Dim rowDSSELFIELDSRow As DSSELFIELDSRow = CType(Me.NewRow,DSSELFIELDSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DESCRIPTIONNAME, SELECTIONNAME, FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY}
            rowDSSELFIELDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDSSELFIELDSRow)
            Return rowDSSELFIELDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEDATASTORENAMEDESCRIPTIONNAMESELECTIONNAMEFIELDNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal FIELDNAME As String) As DSSELFIELDSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DESCRIPTIONNAME, SELECTIONNAME, FIELDNAME}),DSSELFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DSSELFIELDSDataTable = CType(MyBase.Clone,DSSELFIELDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DSSELFIELDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnDATASTORENAME = MyBase.Columns("DATASTORENAME")
            Me.columnDESCRIPTIONNAME = MyBase.Columns("DESCRIPTIONNAME")
            Me.columnSELECTIONNAME = MyBase.Columns("SELECTIONNAME")
            Me.columnFIELDNAME = MyBase.Columns("FIELDNAME")
            Me.columnPARENTNAME = MyBase.Columns("PARENTNAME")
            Me.columnSEQNO = MyBase.Columns("SEQNO")
            Me.columnDESCFIELDDESCRIPTION = MyBase.Columns("DESCFIELDDESCRIPTION")
            Me.columnNCHILDREN = MyBase.Columns("NCHILDREN")
            Me.columnNLEVEL = MyBase.Columns("NLEVEL")
            Me.columnNTIMES = MyBase.Columns("NTIMES")
            Me.columnNOCCNO = MyBase.Columns("NOCCNO")
            Me.columnDATATYPE = MyBase.Columns("DATATYPE")
            Me.columnNOFFSET = MyBase.Columns("NOFFSET")
            Me.columnNLENGTH = MyBase.Columns("NLENGTH")
            Me.columnNSCALE = MyBase.Columns("NSCALE")
            Me.columnCANNULL = MyBase.Columns("CANNULL")
            Me.columnISKEY = MyBase.Columns("ISKEY")
            Me.columnORGNAME = MyBase.Columns("ORGNAME")
            Me.columnDATEFORMAT = MyBase.Columns("DATEFORMAT")
            Me.columnLABEL = MyBase.Columns("LABEL")
            Me.columnINITVAL = MyBase.Columns("INITVAL")
            Me.columnRETYPE = MyBase.Columns("RETYPE")
            Me.columnINVALID = MyBase.Columns("INVALID")
            Me.columnEXTTYPE = MyBase.Columns("EXTTYPE")
            Me.columnIDENTVAL = MyBase.Columns("IDENTVAL")
            Me.columnFOREIGNKEY = MyBase.Columns("FOREIGNKEY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnDATASTORENAME = New Global.System.Data.DataColumn("DATASTORENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTORENAME)
            Me.columnDESCRIPTIONNAME = New Global.System.Data.DataColumn("DESCRIPTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTIONNAME)
            Me.columnSELECTIONNAME = New Global.System.Data.DataColumn("SELECTIONNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSELECTIONNAME)
            Me.columnFIELDNAME = New Global.System.Data.DataColumn("FIELDNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFIELDNAME)
            Me.columnPARENTNAME = New Global.System.Data.DataColumn("PARENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPARENTNAME)
            Me.columnSEQNO = New Global.System.Data.DataColumn("SEQNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQNO)
            Me.columnDESCFIELDDESCRIPTION = New Global.System.Data.DataColumn("DESCFIELDDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCFIELDDESCRIPTION)
            Me.columnNCHILDREN = New Global.System.Data.DataColumn("NCHILDREN", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCHILDREN)
            Me.columnNLEVEL = New Global.System.Data.DataColumn("NLEVEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLEVEL)
            Me.columnNTIMES = New Global.System.Data.DataColumn("NTIMES", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNTIMES)
            Me.columnNOCCNO = New Global.System.Data.DataColumn("NOCCNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOCCNO)
            Me.columnDATATYPE = New Global.System.Data.DataColumn("DATATYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATATYPE)
            Me.columnNOFFSET = New Global.System.Data.DataColumn("NOFFSET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNOFFSET)
            Me.columnNLENGTH = New Global.System.Data.DataColumn("NLENGTH", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLENGTH)
            Me.columnNSCALE = New Global.System.Data.DataColumn("NSCALE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNSCALE)
            Me.columnCANNULL = New Global.System.Data.DataColumn("CANNULL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCANNULL)
            Me.columnISKEY = New Global.System.Data.DataColumn("ISKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISKEY)
            Me.columnORGNAME = New Global.System.Data.DataColumn("ORGNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORGNAME)
            Me.columnDATEFORMAT = New Global.System.Data.DataColumn("DATEFORMAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATEFORMAT)
            Me.columnLABEL = New Global.System.Data.DataColumn("LABEL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLABEL)
            Me.columnINITVAL = New Global.System.Data.DataColumn("INITVAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINITVAL)
            Me.columnRETYPE = New Global.System.Data.DataColumn("RETYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRETYPE)
            Me.columnINVALID = New Global.System.Data.DataColumn("INVALID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVALID)
            Me.columnEXTTYPE = New Global.System.Data.DataColumn("EXTTYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXTTYPE)
            Me.columnIDENTVAL = New Global.System.Data.DataColumn("IDENTVAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDENTVAL)
            Me.columnFOREIGNKEY = New Global.System.Data.DataColumn("FOREIGNKEY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFOREIGNKEY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnDATASTORENAME, Me.columnDESCRIPTIONNAME, Me.columnSELECTIONNAME, Me.columnFIELDNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnDATASTORENAME.AllowDBNull = false
            Me.columnDATASTORENAME.MaxLength = 20
            Me.columnDESCRIPTIONNAME.AllowDBNull = false
            Me.columnDESCRIPTIONNAME.MaxLength = 50
            Me.columnSELECTIONNAME.AllowDBNull = false
            Me.columnSELECTIONNAME.MaxLength = 50
            Me.columnFIELDNAME.AllowDBNull = false
            Me.columnFIELDNAME.MaxLength = 128
            Me.columnPARENTNAME.MaxLength = 50
            Me.columnDESCFIELDDESCRIPTION.MaxLength = 255
            Me.columnDATATYPE.MaxLength = 30
            Me.columnCANNULL.MaxLength = 3
            Me.columnISKEY.MaxLength = 3
            Me.columnORGNAME.MaxLength = 255
            Me.columnDATEFORMAT.MaxLength = 50
            Me.columnLABEL.MaxLength = 255
            Me.columnINITVAL.MaxLength = 255
            Me.columnRETYPE.MaxLength = 50
            Me.columnINVALID.MaxLength = 30
            Me.columnEXTTYPE.MaxLength = 50
            Me.columnIDENTVAL.MaxLength = 50
            Me.columnFOREIGNKEY.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewDSSELFIELDSRow() As DSSELFIELDSRow
            Return CType(Me.NewRow,DSSELFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DSSELFIELDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DSSELFIELDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DSSELFIELDSRowChangedEvent) Is Nothing) Then
                RaiseEvent DSSELFIELDSRowChanged(Me, New DSSELFIELDSRowChangeEvent(CType(e.Row,DSSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DSSELFIELDSRowChangingEvent) Is Nothing) Then
                RaiseEvent DSSELFIELDSRowChanging(Me, New DSSELFIELDSRowChangeEvent(CType(e.Row,DSSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DSSELFIELDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DSSELFIELDSRowDeleted(Me, New DSSELFIELDSRowChangeEvent(CType(e.Row,DSSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DSSELFIELDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DSSELFIELDSRowDeleting(Me, New DSSELFIELDSRowChangeEvent(CType(e.Row,DSSELFIELDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveDSSELFIELDSRow(ByVal row As DSSELFIELDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DSSELFIELDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENGINESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnENGINEDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENGINES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENGINESRow
            Get
                Return CType(Me.Rows(index),ENGINESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESRowChanging As ENGINESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESRowChanged As ENGINESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESRowDeleting As ENGINESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESRowDeleted As ENGINESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddENGINESRow(ByVal row As ENGINESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddENGINESRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal ENGINEDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As ENGINESRow
            Dim rowENGINESRow As ENGINESRow = CType(Me.NewRow,ENGINESRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGINEDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowENGINESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENGINESRow)
            Return rowENGINESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String) As ENGINESRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME}),ENGINESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENGINESDataTable = CType(MyBase.Clone,ENGINESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENGINESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnENGINEDESCRIPTION = MyBase.Columns("ENGINEDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnENGINEDESCRIPTION = New Global.System.Data.DataColumn("ENGINEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINEDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnENGINEDESCRIPTION.MaxLength = 1024
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewENGINESRow() As ENGINESRow
            Return CType(Me.NewRow,ENGINESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENGINESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENGINESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENGINESRowChangedEvent) Is Nothing) Then
                RaiseEvent ENGINESRowChanged(Me, New ENGINESRowChangeEvent(CType(e.Row,ENGINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENGINESRowChangingEvent) Is Nothing) Then
                RaiseEvent ENGINESRowChanging(Me, New ENGINESRowChangeEvent(CType(e.Row,ENGINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENGINESRowDeletedEvent) Is Nothing) Then
                RaiseEvent ENGINESRowDeleted(Me, New ENGINESRowChangeEvent(CType(e.Row,ENGINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENGINESRowDeletingEvent) Is Nothing) Then
                RaiseEvent ENGINESRowDeleting(Me, New ENGINESRowChangeEvent(CType(e.Row,ENGINESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveENGINESRow(ByVal row As ENGINESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENGINESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENGINESATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnENGINEATTRB As Global.System.Data.DataColumn
        
        Private columnENGINEATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENGINESATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINEATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINEATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINEATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINEATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENGINESATTRRow
            Get
                Return CType(Me.Rows(index),ENGINESATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESATTRRowChanging As ENGINESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESATTRRowChanged As ENGINESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESATTRRowDeleting As ENGINESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENGINESATTRRowDeleted As ENGINESATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddENGINESATTRRow(ByVal row As ENGINESATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddENGINESATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal ENGINEATTRB As String, ByVal ENGINEATTRBVALUE As String) As ENGINESATTRRow
            Dim rowENGINESATTRRow As ENGINESATTRRow = CType(Me.NewRow,ENGINESATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGINEATTRB, ENGINEATTRBVALUE}
            rowENGINESATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENGINESATTRRow)
            Return rowENGINESATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEENGINEATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal ENGINEATTRB As String) As ENGINESATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGINEATTRB}),ENGINESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENGINESATTRDataTable = CType(MyBase.Clone,ENGINESATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENGINESATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnENGINEATTRB = MyBase.Columns("ENGINEATTRB")
            Me.columnENGINEATTRBVALUE = MyBase.Columns("ENGINEATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnENGINEATTRB = New Global.System.Data.DataColumn("ENGINEATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINEATTRB)
            Me.columnENGINEATTRBVALUE = New Global.System.Data.DataColumn("ENGINEATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINEATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnENGINEATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnENGINEATTRB.AllowDBNull = false
            Me.columnENGINEATTRB.MaxLength = 24
            Me.columnENGINEATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewENGINESATTRRow() As ENGINESATTRRow
            Return CType(Me.NewRow,ENGINESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENGINESATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENGINESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENGINESATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent ENGINESATTRRowChanged(Me, New ENGINESATTRRowChangeEvent(CType(e.Row,ENGINESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENGINESATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent ENGINESATTRRowChanging(Me, New ENGINESATTRRowChangeEvent(CType(e.Row,ENGINESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENGINESATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent ENGINESATTRRowDeleted(Me, New ENGINESATTRRowChangeEvent(CType(e.Row,ENGINESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENGINESATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent ENGINESATTRRowDeleting(Me, New ENGINESATTRRowChangeEvent(CType(e.Row,ENGINESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveENGINESATTRRow(ByVal row As ENGINESATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENGINESATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENVIRONMENTSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENVIRONMENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENVIRONMENTSRow
            Get
                Return CType(Me.Rows(index),ENVIRONMENTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSRowChanging As ENVIRONMENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSRowChanged As ENVIRONMENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSRowDeleting As ENVIRONMENTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSRowDeleted As ENVIRONMENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddENVIRONMENTSRow(ByVal row As ENVIRONMENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddENVIRONMENTSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As ENVIRONMENTSRow
            Dim rowENVIRONMENTSRow As ENVIRONMENTSRow = CType(Me.NewRow,ENVIRONMENTSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowENVIRONMENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENVIRONMENTSRow)
            Return rowENVIRONMENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String) As ENVIRONMENTSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME}),ENVIRONMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENVIRONMENTSDataTable = CType(MyBase.Clone,ENVIRONMENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENVIRONMENTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnENVIRONMENTDESCRIPTION = MyBase.Columns("ENVIRONMENTDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnENVIRONMENTDESCRIPTION = New Global.System.Data.DataColumn("ENVIRONMENTDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnENVIRONMENTDESCRIPTION.MaxLength = 1024
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewENVIRONMENTSRow() As ENVIRONMENTSRow
            Return CType(Me.NewRow,ENVIRONMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENVIRONMENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENVIRONMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENVIRONMENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSRowChanged(Me, New ENVIRONMENTSRowChangeEvent(CType(e.Row,ENVIRONMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENVIRONMENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSRowChanging(Me, New ENVIRONMENTSRowChangeEvent(CType(e.Row,ENVIRONMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENVIRONMENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSRowDeleted(Me, New ENVIRONMENTSRowChangeEvent(CType(e.Row,ENVIRONMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENVIRONMENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSRowDeleting(Me, New ENVIRONMENTSRowChangeEvent(CType(e.Row,ENVIRONMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveENVIRONMENTSRow(ByVal row As ENVIRONMENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENVIRONMENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ENVIRONMENTSATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTATTRB As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ENVIRONMENTSATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ENVIRONMENTSATTRRow
            Get
                Return CType(Me.Rows(index),ENVIRONMENTSATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSATTRRowChanging As ENVIRONMENTSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSATTRRowChanged As ENVIRONMENTSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSATTRRowDeleting As ENVIRONMENTSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ENVIRONMENTSATTRRowDeleted As ENVIRONMENTSATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddENVIRONMENTSATTRRow(ByVal row As ENVIRONMENTSATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddENVIRONMENTSATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTATTRB As String, ByVal ENVIRONMENTATTRBVALUE As String) As ENVIRONMENTSATTRRow
            Dim rowENVIRONMENTSATTRRow As ENVIRONMENTSATTRRow = CType(Me.NewRow,ENVIRONMENTSATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTATTRB, ENVIRONMENTATTRBVALUE}
            rowENVIRONMENTSATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowENVIRONMENTSATTRRow)
            Return rowENVIRONMENTSATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMEENVIRONMENTATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTATTRB As String) As ENVIRONMENTSATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTATTRB}),ENVIRONMENTSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ENVIRONMENTSATTRDataTable = CType(MyBase.Clone,ENVIRONMENTSATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ENVIRONMENTSATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnENVIRONMENTATTRB = MyBase.Columns("ENVIRONMENTATTRB")
            Me.columnENVIRONMENTATTRBVALUE = MyBase.Columns("ENVIRONMENTATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnENVIRONMENTATTRB = New Global.System.Data.DataColumn("ENVIRONMENTATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTATTRB)
            Me.columnENVIRONMENTATTRBVALUE = New Global.System.Data.DataColumn("ENVIRONMENTATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnENVIRONMENTATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnENVIRONMENTATTRB.AllowDBNull = false
            Me.columnENVIRONMENTATTRB.MaxLength = 24
            Me.columnENVIRONMENTATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewENVIRONMENTSATTRRow() As ENVIRONMENTSATTRRow
            Return CType(Me.NewRow,ENVIRONMENTSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ENVIRONMENTSATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ENVIRONMENTSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ENVIRONMENTSATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSATTRRowChanged(Me, New ENVIRONMENTSATTRRowChangeEvent(CType(e.Row,ENVIRONMENTSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ENVIRONMENTSATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSATTRRowChanging(Me, New ENVIRONMENTSATTRRowChangeEvent(CType(e.Row,ENVIRONMENTSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ENVIRONMENTSATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSATTRRowDeleted(Me, New ENVIRONMENTSATTRRowChangeEvent(CType(e.Row,ENVIRONMENTSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ENVIRONMENTSATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent ENVIRONMENTSATTRRowDeleting(Me, New ENVIRONMENTSATTRRowChangeEvent(CType(e.Row,ENVIRONMENTSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveENVIRONMENTSATTRRow(ByVal row As ENVIRONMENTSATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ENVIRONMENTSATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROJECTATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnPROJECTATTRB As Global.System.Data.DataColumn
        
        Private columnPROJECTATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROJECTATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROJECTATTRRow
            Get
                Return CType(Me.Rows(index),PROJECTATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTATTRRowChanging As PROJECTATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTATTRRowChanged As PROJECTATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTATTRRowDeleting As PROJECTATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTATTRRowDeleted As PROJECTATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPROJECTATTRRow(ByVal row As PROJECTATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPROJECTATTRRow(ByVal PROJECTNAME As String, ByVal PROJECTATTRB As String, ByVal PROJECTATTRBVALUE As String) As PROJECTATTRRow
            Dim rowPROJECTATTRRow As PROJECTATTRRow = CType(Me.NewRow,PROJECTATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, PROJECTATTRB, PROJECTATTRBVALUE}
            rowPROJECTATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROJECTATTRRow)
            Return rowPROJECTATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEPROJECTATTRB(ByVal PROJECTNAME As String, ByVal PROJECTATTRB As String) As PROJECTATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, PROJECTATTRB}),PROJECTATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROJECTATTRDataTable = CType(MyBase.Clone,PROJECTATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROJECTATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnPROJECTATTRB = MyBase.Columns("PROJECTATTRB")
            Me.columnPROJECTATTRBVALUE = MyBase.Columns("PROJECTATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnPROJECTATTRB = New Global.System.Data.DataColumn("PROJECTATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTATTRB)
            Me.columnPROJECTATTRBVALUE = New Global.System.Data.DataColumn("PROJECTATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnPROJECTATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnPROJECTATTRB.AllowDBNull = false
            Me.columnPROJECTATTRB.MaxLength = 24
            Me.columnPROJECTATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPROJECTATTRRow() As PROJECTATTRRow
            Return CType(Me.NewRow,PROJECTATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROJECTATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROJECTATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROJECTATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent PROJECTATTRRowChanged(Me, New PROJECTATTRRowChangeEvent(CType(e.Row,PROJECTATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROJECTATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent PROJECTATTRRowChanging(Me, New PROJECTATTRRowChangeEvent(CType(e.Row,PROJECTATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROJECTATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROJECTATTRRowDeleted(Me, New PROJECTATTRRowChangeEvent(CType(e.Row,PROJECTATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROJECTATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROJECTATTRRowDeleting(Me, New PROJECTATTRRowChangeEvent(CType(e.Row,PROJECTATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePROJECTATTRRow(ByVal row As PROJECTATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROJECTATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROJECTSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnPROJECTDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnSECURITYATTR As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROJECTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SECURITYATTRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSECURITYATTR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROJECTSRow
            Get
                Return CType(Me.Rows(index),PROJECTSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTSRowChanging As PROJECTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTSRowChanged As PROJECTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTSRowDeleting As PROJECTSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROJECTSRowDeleted As PROJECTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPROJECTSRow(ByVal row As PROJECTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPROJECTSRow(ByVal PROJECTNAME As String, ByVal PROJECTDESCRIPTION As String, ByVal SECURITYATTR As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As PROJECTSRow
            Dim rowPROJECTSRow As PROJECTSRow = CType(Me.NewRow,PROJECTSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, PROJECTDESCRIPTION, SECURITYATTR, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowPROJECTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROJECTSRow)
            Return rowPROJECTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAME(ByVal PROJECTNAME As String) As PROJECTSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME}),PROJECTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROJECTSDataTable = CType(MyBase.Clone,PROJECTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROJECTSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnPROJECTDESCRIPTION = MyBase.Columns("PROJECTDESCRIPTION")
            Me.columnSECURITYATTR = MyBase.Columns("SECURITYATTR")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnPROJECTDESCRIPTION = New Global.System.Data.DataColumn("PROJECTDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTDESCRIPTION)
            Me.columnSECURITYATTR = New Global.System.Data.DataColumn("SECURITYATTR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSECURITYATTR)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.Unique = true
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnPROJECTDESCRIPTION.MaxLength = 1024
            Me.columnSECURITYATTR.MaxLength = 24
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPROJECTSRow() As PROJECTSRow
            Return CType(Me.NewRow,PROJECTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROJECTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROJECTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROJECTSRowChangedEvent) Is Nothing) Then
                RaiseEvent PROJECTSRowChanged(Me, New PROJECTSRowChangeEvent(CType(e.Row,PROJECTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROJECTSRowChangingEvent) Is Nothing) Then
                RaiseEvent PROJECTSRowChanging(Me, New PROJECTSRowChangeEvent(CType(e.Row,PROJECTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROJECTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROJECTSRowDeleted(Me, New PROJECTSRowChangeEvent(CType(e.Row,PROJECTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROJECTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROJECTSRowDeleting(Me, New PROJECTSRowChangeEvent(CType(e.Row,PROJECTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePROJECTSRow(ByVal row As PROJECTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROJECTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYSTEMSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYSTEMS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYSTEMSRow
            Get
                Return CType(Me.Rows(index),SYSTEMSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSRowChanging As SYSTEMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSRowChanged As SYSTEMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSRowDeleting As SYSTEMSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSRowDeleted As SYSTEMSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSYSTEMSRow(ByVal row As SYSTEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSYSTEMSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal SYSTEMDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As SYSTEMSRow
            Dim rowSYSTEMSRow As SYSTEMSRow = CType(Me.NewRow,SYSTEMSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowSYSTEMSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYSTEMSRow)
            Return rowSYSTEMSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String) As SYSTEMSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME}),SYSTEMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYSTEMSDataTable = CType(MyBase.Clone,SYSTEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYSTEMSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnSYSTEMDESCRIPTION = MyBase.Columns("SYSTEMDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnSYSTEMDESCRIPTION = New Global.System.Data.DataColumn("SYSTEMDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnSYSTEMDESCRIPTION.MaxLength = 255
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSYSTEMSRow() As SYSTEMSRow
            Return CType(Me.NewRow,SYSTEMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYSTEMSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYSTEMSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYSTEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent SYSTEMSRowChanged(Me, New SYSTEMSRowChangeEvent(CType(e.Row,SYSTEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYSTEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent SYSTEMSRowChanging(Me, New SYSTEMSRowChangeEvent(CType(e.Row,SYSTEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYSTEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYSTEMSRowDeleted(Me, New SYSTEMSRowChangeEvent(CType(e.Row,SYSTEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYSTEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYSTEMSRowDeleting(Me, New SYSTEMSRowChangeEvent(CType(e.Row,SYSTEMSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSYSTEMSRow(ByVal row As SYSTEMSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYSTEMSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYSTEMSATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMATTRB As Global.System.Data.DataColumn
        
        Private columnSYSTEMATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYSTEMSATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYSTEMSATTRRow
            Get
                Return CType(Me.Rows(index),SYSTEMSATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSATTRRowChanging As SYSTEMSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSATTRRowChanged As SYSTEMSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSATTRRowDeleting As SYSTEMSATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SYSTEMSATTRRowDeleted As SYSTEMSATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSYSTEMSATTRRow(ByVal row As SYSTEMSATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSYSTEMSATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal SYSTEMATTRB As String, ByVal SYSTEMATTRBVALUE As String) As SYSTEMSATTRRow
            Dim rowSYSTEMSATTRRow As SYSTEMSATTRRow = CType(Me.NewRow,SYSTEMSATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMATTRB, SYSTEMATTRBVALUE}
            rowSYSTEMSATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSYSTEMSATTRRow)
            Return rowSYSTEMSATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMESYSTEMATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal SYSTEMATTRB As String) As SYSTEMSATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMATTRB}),SYSTEMSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SYSTEMSATTRDataTable = CType(MyBase.Clone,SYSTEMSATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SYSTEMSATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnSYSTEMATTRB = MyBase.Columns("SYSTEMATTRB")
            Me.columnSYSTEMATTRBVALUE = MyBase.Columns("SYSTEMATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnSYSTEMATTRB = New Global.System.Data.DataColumn("SYSTEMATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMATTRB)
            Me.columnSYSTEMATTRBVALUE = New Global.System.Data.DataColumn("SYSTEMATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnSYSTEMATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnSYSTEMATTRB.AllowDBNull = false
            Me.columnSYSTEMATTRB.MaxLength = 24
            Me.columnSYSTEMATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSYSTEMSATTRRow() As SYSTEMSATTRRow
            Return CType(Me.NewRow,SYSTEMSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SYSTEMSATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SYSTEMSATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYSTEMSATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent SYSTEMSATTRRowChanged(Me, New SYSTEMSATTRRowChangeEvent(CType(e.Row,SYSTEMSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYSTEMSATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent SYSTEMSATTRRowChanging(Me, New SYSTEMSATTRRowChangeEvent(CType(e.Row,SYSTEMSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYSTEMSATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYSTEMSATTRRowDeleted(Me, New SYSTEMSATTRRowChangeEvent(CType(e.Row,SYSTEMSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYSTEMSATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYSTEMSATTRRowDeleting(Me, New SYSTEMSATTRRowChangeEvent(CType(e.Row,SYSTEMSATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSYSTEMSATTRRow(ByVal row As SYSTEMSATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYSTEMSATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TASKDSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnTASKNAME As Global.System.Data.DataColumn
        
        Private columnDATASTORENAME As Global.System.Data.DataColumn
        
        Private columnTASKTYPE As Global.System.Data.DataColumn
        
        Private columnDSDIRECTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TASKDS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DATASTORENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATASTORENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DSDIRECTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDSDIRECTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TASKDSRow
            Get
                Return CType(Me.Rows(index),TASKDSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKDSRowChanging As TASKDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKDSRowChanged As TASKDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKDSRowDeleting As TASKDSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKDSRowDeleted As TASKDSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTASKDSRow(ByVal row As TASKDSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTASKDSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String, ByVal DATASTORENAME As String, ByVal TASKTYPE As Integer, ByVal DSDIRECTION As String) As TASKDSRow
            Dim rowTASKDSRow As TASKDSRow = CType(Me.NewRow,TASKDSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, DATASTORENAME, TASKTYPE, DSDIRECTION}
            rowTASKDSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTASKDSRow)
            Return rowTASKDSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMETASKNAMEDATASTORENAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String, ByVal DATASTORENAME As String) As TASKDSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, DATASTORENAME}),TASKDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TASKDSDataTable = CType(MyBase.Clone,TASKDSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TASKDSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnTASKNAME = MyBase.Columns("TASKNAME")
            Me.columnDATASTORENAME = MyBase.Columns("DATASTORENAME")
            Me.columnTASKTYPE = MyBase.Columns("TASKTYPE")
            Me.columnDSDIRECTION = MyBase.Columns("DSDIRECTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnTASKNAME = New Global.System.Data.DataColumn("TASKNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKNAME)
            Me.columnDATASTORENAME = New Global.System.Data.DataColumn("DATASTORENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATASTORENAME)
            Me.columnTASKTYPE = New Global.System.Data.DataColumn("TASKTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKTYPE)
            Me.columnDSDIRECTION = New Global.System.Data.DataColumn("DSDIRECTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSDIRECTION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnTASKNAME, Me.columnDATASTORENAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnTASKNAME.AllowDBNull = false
            Me.columnTASKNAME.MaxLength = 50
            Me.columnDATASTORENAME.AllowDBNull = false
            Me.columnDATASTORENAME.MaxLength = 20
            Me.columnDSDIRECTION.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTASKDSRow() As TASKDSRow
            Return CType(Me.NewRow,TASKDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TASKDSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TASKDSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TASKDSRowChangedEvent) Is Nothing) Then
                RaiseEvent TASKDSRowChanged(Me, New TASKDSRowChangeEvent(CType(e.Row,TASKDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TASKDSRowChangingEvent) Is Nothing) Then
                RaiseEvent TASKDSRowChanging(Me, New TASKDSRowChangeEvent(CType(e.Row,TASKDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TASKDSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TASKDSRowDeleted(Me, New TASKDSRowChangeEvent(CType(e.Row,TASKDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TASKDSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TASKDSRowDeleting(Me, New TASKDSRowChangeEvent(CType(e.Row,TASKDSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTASKDSRow(ByVal row As TASKDSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TASKDSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TASKMAPDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnTASKNAME As Global.System.Data.DataColumn
        
        Private columnMAPPINGID As Global.System.Data.DataColumn
        
        Private columnTASKTYPE As Global.System.Data.DataColumn
        
        Private columnMAPPINGDESC As Global.System.Data.DataColumn
        
        Private columnMAPPINGTARGET As Global.System.Data.DataColumn
        
        Private columnSOURCETYPE As Global.System.Data.DataColumn
        
        Private columnTARGETTYPE As Global.System.Data.DataColumn
        
        Private columnISMAPPED As Global.System.Data.DataColumn
        
        Private columnMAPPINGSOURCEID As Global.System.Data.DataColumn
        
        Private columnMAPPINGTARGETID As Global.System.Data.DataColumn
        
        Private columnSOURCEPARENT As Global.System.Data.DataColumn
        
        Private columnTARGETPARENT As Global.System.Data.DataColumn
        
        Private columnSEQNO As Global.System.Data.DataColumn
        
        Private columnSOURCEDATASTORE As Global.System.Data.DataColumn
        
        Private columnTARGETDATASTORE As Global.System.Data.DataColumn
        
        Private columnMAPPINGSOURCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TASKMAP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAPPINGIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPPINGID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAPPINGDESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPPINGDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAPPINGTARGETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPPINGTARGET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOURCETYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCETYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TARGETTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ISMAPPEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnISMAPPED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAPPINGSOURCEIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPPINGSOURCEID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAPPINGTARGETIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPPINGTARGETID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOURCEPARENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCEPARENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TARGETPARENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETPARENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SEQNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSEQNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SOURCEDATASTOREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSOURCEDATASTORE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TARGETDATASTOREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTARGETDATASTORE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MAPPINGSOURCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMAPPINGSOURCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TASKMAPRow
            Get
                Return CType(Me.Rows(index),TASKMAPRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKMAPRowChanging As TASKMAPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKMAPRowChanged As TASKMAPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKMAPRowDeleting As TASKMAPRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKMAPRowDeleted As TASKMAPRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTASKMAPRow(ByVal row As TASKMAPRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTASKMAPRow( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal TASKNAME As String,  _
                    ByVal MAPPINGID As Long,  _
                    ByVal TASKTYPE As Integer,  _
                    ByVal MAPPINGDESC As String,  _
                    ByVal MAPPINGTARGET As String,  _
                    ByVal SOURCETYPE As Integer,  _
                    ByVal TARGETTYPE As Integer,  _
                    ByVal ISMAPPED As String,  _
                    ByVal MAPPINGSOURCEID As String,  _
                    ByVal MAPPINGTARGETID As String,  _
                    ByVal SOURCEPARENT As String,  _
                    ByVal TARGETPARENT As String,  _
                    ByVal SEQNO As Integer,  _
                    ByVal SOURCEDATASTORE As String,  _
                    ByVal TARGETDATASTORE As String,  _
                    ByVal MAPPINGSOURCE As String) As TASKMAPRow
            Dim rowTASKMAPRow As TASKMAPRow = CType(Me.NewRow,TASKMAPRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, MAPPINGID, TASKTYPE, MAPPINGDESC, MAPPINGTARGET, SOURCETYPE, TARGETTYPE, ISMAPPED, MAPPINGSOURCEID, MAPPINGTARGETID, SOURCEPARENT, TARGETPARENT, SEQNO, SOURCEDATASTORE, TARGETDATASTORE, MAPPINGSOURCE}
            rowTASKMAPRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTASKMAPRow)
            Return rowTASKMAPRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMETASKNAMEMAPPINGID(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String, ByVal MAPPINGID As Long) As TASKMAPRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, MAPPINGID}),TASKMAPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TASKMAPDataTable = CType(MyBase.Clone,TASKMAPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TASKMAPDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnTASKNAME = MyBase.Columns("TASKNAME")
            Me.columnMAPPINGID = MyBase.Columns("MAPPINGID")
            Me.columnTASKTYPE = MyBase.Columns("TASKTYPE")
            Me.columnMAPPINGDESC = MyBase.Columns("MAPPINGDESC")
            Me.columnMAPPINGTARGET = MyBase.Columns("MAPPINGTARGET")
            Me.columnSOURCETYPE = MyBase.Columns("SOURCETYPE")
            Me.columnTARGETTYPE = MyBase.Columns("TARGETTYPE")
            Me.columnISMAPPED = MyBase.Columns("ISMAPPED")
            Me.columnMAPPINGSOURCEID = MyBase.Columns("MAPPINGSOURCEID")
            Me.columnMAPPINGTARGETID = MyBase.Columns("MAPPINGTARGETID")
            Me.columnSOURCEPARENT = MyBase.Columns("SOURCEPARENT")
            Me.columnTARGETPARENT = MyBase.Columns("TARGETPARENT")
            Me.columnSEQNO = MyBase.Columns("SEQNO")
            Me.columnSOURCEDATASTORE = MyBase.Columns("SOURCEDATASTORE")
            Me.columnTARGETDATASTORE = MyBase.Columns("TARGETDATASTORE")
            Me.columnMAPPINGSOURCE = MyBase.Columns("MAPPINGSOURCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnTASKNAME = New Global.System.Data.DataColumn("TASKNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKNAME)
            Me.columnMAPPINGID = New Global.System.Data.DataColumn("MAPPINGID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPPINGID)
            Me.columnTASKTYPE = New Global.System.Data.DataColumn("TASKTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKTYPE)
            Me.columnMAPPINGDESC = New Global.System.Data.DataColumn("MAPPINGDESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPPINGDESC)
            Me.columnMAPPINGTARGET = New Global.System.Data.DataColumn("MAPPINGTARGET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPPINGTARGET)
            Me.columnSOURCETYPE = New Global.System.Data.DataColumn("SOURCETYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCETYPE)
            Me.columnTARGETTYPE = New Global.System.Data.DataColumn("TARGETTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETTYPE)
            Me.columnISMAPPED = New Global.System.Data.DataColumn("ISMAPPED", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnISMAPPED)
            Me.columnMAPPINGSOURCEID = New Global.System.Data.DataColumn("MAPPINGSOURCEID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPPINGSOURCEID)
            Me.columnMAPPINGTARGETID = New Global.System.Data.DataColumn("MAPPINGTARGETID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPPINGTARGETID)
            Me.columnSOURCEPARENT = New Global.System.Data.DataColumn("SOURCEPARENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCEPARENT)
            Me.columnTARGETPARENT = New Global.System.Data.DataColumn("TARGETPARENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETPARENT)
            Me.columnSEQNO = New Global.System.Data.DataColumn("SEQNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSEQNO)
            Me.columnSOURCEDATASTORE = New Global.System.Data.DataColumn("SOURCEDATASTORE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSOURCEDATASTORE)
            Me.columnTARGETDATASTORE = New Global.System.Data.DataColumn("TARGETDATASTORE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTARGETDATASTORE)
            Me.columnMAPPINGSOURCE = New Global.System.Data.DataColumn("MAPPINGSOURCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMAPPINGSOURCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnTASKNAME, Me.columnMAPPINGID}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnTASKNAME.AllowDBNull = false
            Me.columnTASKNAME.MaxLength = 50
            Me.columnMAPPINGID.AllowDBNull = false
            Me.columnMAPPINGDESC.MaxLength = 255
            Me.columnMAPPINGTARGET.MaxLength = 128
            Me.columnISMAPPED.MaxLength = 1
            Me.columnMAPPINGSOURCEID.MaxLength = 1024
            Me.columnMAPPINGTARGETID.MaxLength = 128
            Me.columnSOURCEPARENT.MaxLength = 20
            Me.columnTARGETPARENT.MaxLength = 20
            Me.columnSOURCEDATASTORE.MaxLength = 20
            Me.columnTARGETDATASTORE.MaxLength = 20
            Me.columnMAPPINGSOURCE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTASKMAPRow() As TASKMAPRow
            Return CType(Me.NewRow,TASKMAPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TASKMAPRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TASKMAPRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TASKMAPRowChangedEvent) Is Nothing) Then
                RaiseEvent TASKMAPRowChanged(Me, New TASKMAPRowChangeEvent(CType(e.Row,TASKMAPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TASKMAPRowChangingEvent) Is Nothing) Then
                RaiseEvent TASKMAPRowChanging(Me, New TASKMAPRowChangeEvent(CType(e.Row,TASKMAPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TASKMAPRowDeletedEvent) Is Nothing) Then
                RaiseEvent TASKMAPRowDeleted(Me, New TASKMAPRowChangeEvent(CType(e.Row,TASKMAPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TASKMAPRowDeletingEvent) Is Nothing) Then
                RaiseEvent TASKMAPRowDeleting(Me, New TASKMAPRowChangeEvent(CType(e.Row,TASKMAPRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTASKMAPRow(ByVal row As TASKMAPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TASKMAPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TASKSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnTASKNAME As Global.System.Data.DataColumn
        
        Private columnTASKTYPE As Global.System.Data.DataColumn
        
        Private columnTASKSEQNO As Global.System.Data.DataColumn
        
        Private columnTASKDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnCREATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnUPDATED_TIMESTAMP As Global.System.Data.DataColumn
        
        Private columnCREATED_USER_ID As Global.System.Data.DataColumn
        
        Private columnUPDATED_USER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TASKS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKTYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKTYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKSEQNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKSEQNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TASKDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTASKDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_TIMESTAMPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_TIMESTAMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CREATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPDATED_USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPDATED_USER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TASKSRow
            Get
                Return CType(Me.Rows(index),TASKSRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKSRowChanging As TASKSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKSRowChanged As TASKSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKSRowDeleting As TASKSRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TASKSRowDeleted As TASKSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTASKSRow(ByVal row As TASKSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTASKSRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String, ByVal TASKTYPE As Integer, ByVal TASKSEQNO As Integer, ByVal TASKDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Date, ByVal UPDATED_TIMESTAMP As Date, ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As TASKSRow
            Dim rowTASKSRow As TASKSRow = CType(Me.NewRow,TASKSRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, TASKTYPE, TASKSEQNO, TASKDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID}
            rowTASKSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTASKSRow)
            Return rowTASKSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMETASKNAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String) As TASKSRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME}),TASKSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TASKSDataTable = CType(MyBase.Clone,TASKSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TASKSDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnTASKNAME = MyBase.Columns("TASKNAME")
            Me.columnTASKTYPE = MyBase.Columns("TASKTYPE")
            Me.columnTASKSEQNO = MyBase.Columns("TASKSEQNO")
            Me.columnTASKDESCRIPTION = MyBase.Columns("TASKDESCRIPTION")
            Me.columnCREATED_TIMESTAMP = MyBase.Columns("CREATED_TIMESTAMP")
            Me.columnUPDATED_TIMESTAMP = MyBase.Columns("UPDATED_TIMESTAMP")
            Me.columnCREATED_USER_ID = MyBase.Columns("CREATED_USER_ID")
            Me.columnUPDATED_USER_ID = MyBase.Columns("UPDATED_USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnTASKNAME = New Global.System.Data.DataColumn("TASKNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKNAME)
            Me.columnTASKTYPE = New Global.System.Data.DataColumn("TASKTYPE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKTYPE)
            Me.columnTASKSEQNO = New Global.System.Data.DataColumn("TASKSEQNO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKSEQNO)
            Me.columnTASKDESCRIPTION = New Global.System.Data.DataColumn("TASKDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTASKDESCRIPTION)
            Me.columnCREATED_TIMESTAMP = New Global.System.Data.DataColumn("CREATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_TIMESTAMP)
            Me.columnUPDATED_TIMESTAMP = New Global.System.Data.DataColumn("UPDATED_TIMESTAMP", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_TIMESTAMP)
            Me.columnCREATED_USER_ID = New Global.System.Data.DataColumn("CREATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATED_USER_ID)
            Me.columnUPDATED_USER_ID = New Global.System.Data.DataColumn("UPDATED_USER_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPDATED_USER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnTASKNAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnTASKNAME.AllowDBNull = false
            Me.columnTASKNAME.MaxLength = 50
            Me.columnTASKDESCRIPTION.MaxLength = 1024
            Me.columnCREATED_USER_ID.MaxLength = 30
            Me.columnUPDATED_USER_ID.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTASKSRow() As TASKSRow
            Return CType(Me.NewRow,TASKSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TASKSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TASKSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TASKSRowChangedEvent) Is Nothing) Then
                RaiseEvent TASKSRowChanged(Me, New TASKSRowChangeEvent(CType(e.Row,TASKSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TASKSRowChangingEvent) Is Nothing) Then
                RaiseEvent TASKSRowChanging(Me, New TASKSRowChangeEvent(CType(e.Row,TASKSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TASKSRowDeletedEvent) Is Nothing) Then
                RaiseEvent TASKSRowDeleted(Me, New TASKSRowChangeEvent(CType(e.Row,TASKSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TASKSRowDeletingEvent) Is Nothing) Then
                RaiseEvent TASKSRowDeleting(Me, New TASKSRowChangeEvent(CType(e.Row,TASKSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTASKSRow(ByVal row As TASKSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TASKSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Test1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnEmplNumber As Global.System.Data.DataColumn
        
        Private columnSerNo As Global.System.Data.DataColumn
        
        Private columnTimeStamp1 As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnSalary As Global.System.Data.DataColumn
        
        Private columnBonusSmall As Global.System.Data.DataColumn
        
        Private columnBigDate As Global.System.Data.DataColumn
        
        Private columnSmallDate As Global.System.Data.DataColumn
        
        Private columnBit1 As Global.System.Data.DataColumn
        
        Private columnTinyint1 As Global.System.Data.DataColumn
        
        Private columnSmallInt1 As Global.System.Data.DataColumn
        
        Private columnInt1 As Global.System.Data.DataColumn
        
        Private columnBigInt1 As Global.System.Data.DataColumn
        
        Private columnFloat1 As Global.System.Data.DataColumn
        
        Private columnReal1 As Global.System.Data.DataColumn
        
        Private columnChar1 As Global.System.Data.DataColumn
        
        Private columnText1 As Global.System.Data.DataColumn
        
        Private columnNchar1 As Global.System.Data.DataColumn
        
        Private columnNvarchar1 As Global.System.Data.DataColumn
        
        Private columnBin1 As Global.System.Data.DataColumn
        
        Private columnVarbin1 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Test1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EmplNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmplNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SerNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TimeStamp1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeStamp1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalary
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BonusSmallColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBonusSmall
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BigDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBigDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SmallDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSmallDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Bit1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBit1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Tinyint1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTinyint1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SmallInt1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSmallInt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Int1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnInt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BigInt1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBigInt1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Float1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnFloat1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Real1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReal1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Char1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChar1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Text1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnText1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nchar1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNchar1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Nvarchar1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNvarchar1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Bin1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBin1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Varbin1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnVarbin1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Test1Row
            Get
                Return CType(Me.Rows(index),Test1Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Test1RowChanging As Test1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Test1RowChanged As Test1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Test1RowDeleting As Test1RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Test1RowDeleted As Test1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTest1Row(ByVal row As Test1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTest1Row( _
                    ByVal EmplNumber As System.Guid,  _
                    ByVal SerNo As Integer,  _
                    ByVal TimeStamp1() As Byte,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal Salary As Decimal,  _
                    ByVal BonusSmall As Decimal,  _
                    ByVal BigDate As Date,  _
                    ByVal SmallDate As Date,  _
                    ByVal Bit1 As Boolean,  _
                    ByVal Tinyint1 As Byte,  _
                    ByVal SmallInt1 As Short,  _
                    ByVal Int1 As Integer,  _
                    ByVal BigInt1 As Long,  _
                    ByVal Float1 As Double,  _
                    ByVal Real1 As Single,  _
                    ByVal Char1 As String,  _
                    ByVal Text1 As String,  _
                    ByVal Nchar1 As String,  _
                    ByVal Nvarchar1 As String,  _
                    ByVal Bin1() As Byte,  _
                    ByVal Varbin1() As Byte) As Test1Row
            Dim rowTest1Row As Test1Row = CType(Me.NewRow,Test1Row)
            Dim columnValuesArray() As Object = New Object() {EmplNumber, SerNo, TimeStamp1, LastName, FirstName, Salary, BonusSmall, BigDate, SmallDate, Bit1, Tinyint1, SmallInt1, Int1, BigInt1, Float1, Real1, Char1, Text1, Nchar1, Nvarchar1, Bin1, Varbin1}
            rowTest1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowTest1Row)
            Return rowTest1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEmplNumber(ByVal EmplNumber As System.Guid) As Test1Row
            Return CType(Me.Rows.Find(New Object() {EmplNumber}),Test1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Test1DataTable = CType(MyBase.Clone,Test1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Test1DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEmplNumber = MyBase.Columns("EmplNumber")
            Me.columnSerNo = MyBase.Columns("SerNo")
            Me.columnTimeStamp1 = MyBase.Columns("TimeStamp1")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnSalary = MyBase.Columns("Salary")
            Me.columnBonusSmall = MyBase.Columns("BonusSmall")
            Me.columnBigDate = MyBase.Columns("BigDate")
            Me.columnSmallDate = MyBase.Columns("SmallDate")
            Me.columnBit1 = MyBase.Columns("Bit1")
            Me.columnTinyint1 = MyBase.Columns("Tinyint1")
            Me.columnSmallInt1 = MyBase.Columns("SmallInt1")
            Me.columnInt1 = MyBase.Columns("Int1")
            Me.columnBigInt1 = MyBase.Columns("BigInt1")
            Me.columnFloat1 = MyBase.Columns("Float1")
            Me.columnReal1 = MyBase.Columns("Real1")
            Me.columnChar1 = MyBase.Columns("Char1")
            Me.columnText1 = MyBase.Columns("Text1")
            Me.columnNchar1 = MyBase.Columns("Nchar1")
            Me.columnNvarchar1 = MyBase.Columns("Nvarchar1")
            Me.columnBin1 = MyBase.Columns("Bin1")
            Me.columnVarbin1 = MyBase.Columns("Varbin1")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEmplNumber = New Global.System.Data.DataColumn("EmplNumber", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmplNumber)
            Me.columnSerNo = New Global.System.Data.DataColumn("SerNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerNo)
            Me.columnTimeStamp1 = New Global.System.Data.DataColumn("TimeStamp1", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeStamp1)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnSalary = New Global.System.Data.DataColumn("Salary", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalary)
            Me.columnBonusSmall = New Global.System.Data.DataColumn("BonusSmall", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBonusSmall)
            Me.columnBigDate = New Global.System.Data.DataColumn("BigDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBigDate)
            Me.columnSmallDate = New Global.System.Data.DataColumn("SmallDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSmallDate)
            Me.columnBit1 = New Global.System.Data.DataColumn("Bit1", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBit1)
            Me.columnTinyint1 = New Global.System.Data.DataColumn("Tinyint1", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTinyint1)
            Me.columnSmallInt1 = New Global.System.Data.DataColumn("SmallInt1", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSmallInt1)
            Me.columnInt1 = New Global.System.Data.DataColumn("Int1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInt1)
            Me.columnBigInt1 = New Global.System.Data.DataColumn("BigInt1", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBigInt1)
            Me.columnFloat1 = New Global.System.Data.DataColumn("Float1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFloat1)
            Me.columnReal1 = New Global.System.Data.DataColumn("Real1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReal1)
            Me.columnChar1 = New Global.System.Data.DataColumn("Char1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChar1)
            Me.columnText1 = New Global.System.Data.DataColumn("Text1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnText1)
            Me.columnNchar1 = New Global.System.Data.DataColumn("Nchar1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNchar1)
            Me.columnNvarchar1 = New Global.System.Data.DataColumn("Nvarchar1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNvarchar1)
            Me.columnBin1 = New Global.System.Data.DataColumn("Bin1", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBin1)
            Me.columnVarbin1 = New Global.System.Data.DataColumn("Varbin1", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVarbin1)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEmplNumber}, true))
            Me.columnEmplNumber.AllowDBNull = false
            Me.columnEmplNumber.Unique = true
            Me.columnSerNo.AllowDBNull = false
            Me.columnTimeStamp1.ReadOnly = true
            Me.columnLastName.AllowDBNull = false
            Me.columnLastName.MaxLength = 50
            Me.columnFirstName.AllowDBNull = false
            Me.columnFirstName.MaxLength = 50
            Me.columnChar1.MaxLength = 10
            Me.columnText1.MaxLength = 2147483647
            Me.columnNchar1.MaxLength = 10
            Me.columnNvarchar1.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTest1Row() As Test1Row
            Return CType(Me.NewRow,Test1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Test1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Test1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Test1RowChangedEvent) Is Nothing) Then
                RaiseEvent Test1RowChanged(Me, New Test1RowChangeEvent(CType(e.Row,Test1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Test1RowChangingEvent) Is Nothing) Then
                RaiseEvent Test1RowChanging(Me, New Test1RowChangeEvent(CType(e.Row,Test1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Test1RowDeletedEvent) Is Nothing) Then
                RaiseEvent Test1RowDeleted(Me, New Test1RowChangeEvent(CType(e.Row,Test1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Test1RowDeletingEvent) Is Nothing) Then
                RaiseEvent Test1RowDeleting(Me, New Test1RowChangeEvent(CType(e.Row,Test1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTest1Row(ByVal row As Test1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Test1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VARIABLESDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnVARIABLENAME As Global.System.Data.DataColumn
        
        Private columnVARIABLEDESCRIPTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VARIABLES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VARIABLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIABLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VARIABLEDESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIABLEDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VARIABLESRow
            Get
                Return CType(Me.Rows(index),VARIABLESRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESRowChanging As VARIABLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESRowChanged As VARIABLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESRowDeleting As VARIABLESRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESRowDeleted As VARIABLESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddVARIABLESRow(ByVal row As VARIABLESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVARIABLESRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEDESCRIPTION As String) As VARIABLESRow
            Dim rowVARIABLESRow As VARIABLESRow = CType(Me.NewRow,VARIABLESRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME, VARIABLEDESCRIPTION}
            rowVARIABLESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVARIABLESRow)
            Return rowVARIABLESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEVARIABLENAME(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String) As VARIABLESRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME}),VARIABLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VARIABLESDataTable = CType(MyBase.Clone,VARIABLESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VARIABLESDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnVARIABLENAME = MyBase.Columns("VARIABLENAME")
            Me.columnVARIABLEDESCRIPTION = MyBase.Columns("VARIABLEDESCRIPTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnVARIABLENAME = New Global.System.Data.DataColumn("VARIABLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIABLENAME)
            Me.columnVARIABLEDESCRIPTION = New Global.System.Data.DataColumn("VARIABLEDESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIABLEDESCRIPTION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnVARIABLENAME}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnVARIABLENAME.AllowDBNull = false
            Me.columnVARIABLENAME.MaxLength = 50
            Me.columnVARIABLEDESCRIPTION.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewVARIABLESRow() As VARIABLESRow
            Return CType(Me.NewRow,VARIABLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VARIABLESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VARIABLESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VARIABLESRowChangedEvent) Is Nothing) Then
                RaiseEvent VARIABLESRowChanged(Me, New VARIABLESRowChangeEvent(CType(e.Row,VARIABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VARIABLESRowChangingEvent) Is Nothing) Then
                RaiseEvent VARIABLESRowChanging(Me, New VARIABLESRowChangeEvent(CType(e.Row,VARIABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VARIABLESRowDeletedEvent) Is Nothing) Then
                RaiseEvent VARIABLESRowDeleted(Me, New VARIABLESRowChangeEvent(CType(e.Row,VARIABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VARIABLESRowDeletingEvent) Is Nothing) Then
                RaiseEvent VARIABLESRowDeleting(Me, New VARIABLESRowChangeEvent(CType(e.Row,VARIABLESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveVARIABLESRow(ByVal row As VARIABLESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VARIABLESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VARIABLESATTRDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPROJECTNAME As Global.System.Data.DataColumn
        
        Private columnENVIRONMENTNAME As Global.System.Data.DataColumn
        
        Private columnSYSTEMNAME As Global.System.Data.DataColumn
        
        Private columnENGINENAME As Global.System.Data.DataColumn
        
        Private columnVARIABLENAME As Global.System.Data.DataColumn
        
        Private columnVARIABLEATTRB As Global.System.Data.DataColumn
        
        Private columnVARIABLEATTRBVALUE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VARIABLESATTR"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROJECTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENVIRONMENTNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENVIRONMENTNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYSTEMNAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYSTEMNAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ENGINENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnENGINENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VARIABLENAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIABLENAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VARIABLEATTRBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIABLEATTRB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VARIABLEATTRBVALUEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVARIABLEATTRBVALUE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VARIABLESATTRRow
            Get
                Return CType(Me.Rows(index),VARIABLESATTRRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESATTRRowChanging As VARIABLESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESATTRRowChanged As VARIABLESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESATTRRowDeleting As VARIABLESATTRRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event VARIABLESATTRRowDeleted As VARIABLESATTRRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddVARIABLESATTRRow(ByVal row As VARIABLESATTRRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddVARIABLESATTRRow(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEATTRB As String, ByVal VARIABLEATTRBVALUE As String) As VARIABLESATTRRow
            Dim rowVARIABLESATTRRow As VARIABLESATTRRow = CType(Me.NewRow,VARIABLESATTRRow)
            Dim columnValuesArray() As Object = New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME, VARIABLEATTRB, VARIABLEATTRBVALUE}
            rowVARIABLESATTRRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVARIABLESATTRRow)
            Return rowVARIABLESATTRRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPROJECTNAMEENVIRONMENTNAMESYSTEMNAMEENGINENAMEVARIABLENAMEVARIABLEATTRB(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEATTRB As String) As VARIABLESATTRRow
            Return CType(Me.Rows.Find(New Object() {PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME, VARIABLEATTRB}),VARIABLESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VARIABLESATTRDataTable = CType(MyBase.Clone,VARIABLESATTRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VARIABLESATTRDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPROJECTNAME = MyBase.Columns("PROJECTNAME")
            Me.columnENVIRONMENTNAME = MyBase.Columns("ENVIRONMENTNAME")
            Me.columnSYSTEMNAME = MyBase.Columns("SYSTEMNAME")
            Me.columnENGINENAME = MyBase.Columns("ENGINENAME")
            Me.columnVARIABLENAME = MyBase.Columns("VARIABLENAME")
            Me.columnVARIABLEATTRB = MyBase.Columns("VARIABLEATTRB")
            Me.columnVARIABLEATTRBVALUE = MyBase.Columns("VARIABLEATTRBVALUE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPROJECTNAME = New Global.System.Data.DataColumn("PROJECTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECTNAME)
            Me.columnENVIRONMENTNAME = New Global.System.Data.DataColumn("ENVIRONMENTNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENVIRONMENTNAME)
            Me.columnSYSTEMNAME = New Global.System.Data.DataColumn("SYSTEMNAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYSTEMNAME)
            Me.columnENGINENAME = New Global.System.Data.DataColumn("ENGINENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnENGINENAME)
            Me.columnVARIABLENAME = New Global.System.Data.DataColumn("VARIABLENAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIABLENAME)
            Me.columnVARIABLEATTRB = New Global.System.Data.DataColumn("VARIABLEATTRB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIABLEATTRB)
            Me.columnVARIABLEATTRBVALUE = New Global.System.Data.DataColumn("VARIABLEATTRBVALUE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVARIABLEATTRBVALUE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPROJECTNAME, Me.columnENVIRONMENTNAME, Me.columnSYSTEMNAME, Me.columnENGINENAME, Me.columnVARIABLENAME, Me.columnVARIABLEATTRB}, true))
            Me.columnPROJECTNAME.AllowDBNull = false
            Me.columnPROJECTNAME.MaxLength = 20
            Me.columnENVIRONMENTNAME.AllowDBNull = false
            Me.columnENVIRONMENTNAME.MaxLength = 20
            Me.columnSYSTEMNAME.AllowDBNull = false
            Me.columnSYSTEMNAME.MaxLength = 20
            Me.columnENGINENAME.AllowDBNull = false
            Me.columnENGINENAME.MaxLength = 20
            Me.columnVARIABLENAME.AllowDBNull = false
            Me.columnVARIABLENAME.MaxLength = 50
            Me.columnVARIABLEATTRB.AllowDBNull = false
            Me.columnVARIABLEATTRB.MaxLength = 24
            Me.columnVARIABLEATTRBVALUE.MaxLength = 1024
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewVARIABLESATTRRow() As VARIABLESATTRRow
            Return CType(Me.NewRow,VARIABLESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VARIABLESATTRRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VARIABLESATTRRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VARIABLESATTRRowChangedEvent) Is Nothing) Then
                RaiseEvent VARIABLESATTRRowChanged(Me, New VARIABLESATTRRowChangeEvent(CType(e.Row,VARIABLESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VARIABLESATTRRowChangingEvent) Is Nothing) Then
                RaiseEvent VARIABLESATTRRowChanging(Me, New VARIABLESATTRRowChangeEvent(CType(e.Row,VARIABLESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VARIABLESATTRRowDeletedEvent) Is Nothing) Then
                RaiseEvent VARIABLESATTRRowDeleted(Me, New VARIABLESATTRRowChangeEvent(CType(e.Row,VARIABLESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VARIABLESATTRRowDeletingEvent) Is Nothing) Then
                RaiseEvent VARIABLESATTRRowDeleting(Me, New VARIABLESATTRRowChangeEvent(CType(e.Row,VARIABLESATTRRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveVARIABLESATTRRow(ByVal row As VARIABLESATTRRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SQDmetaDataSet = New SQDmetaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VARIABLESATTRDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CONNECTIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCONNECTIONS As CONNECTIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCONNECTIONS = CType(Me.Table,CONNECTIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableCONNECTIONS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableCONNECTIONS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CONNECTIONNAME() As String
            Get
                Return CType(Me(Me.tableCONNECTIONS.CONNECTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONS.CONNECTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CONNECTIONDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONNECTIONS.CONNECTIONDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONNECTIONDESCRIPTION' in table 'CONNECTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONNECTIONS.CONNECTIONDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCONNECTIONS.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'CONNECTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONNECTIONS.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCONNECTIONS.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'CONNECTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONNECTIONS.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONNECTIONS.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'CONNECTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONNECTIONS.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONNECTIONS.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'CONNECTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCONNECTIONS.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCONNECTIONDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableCONNECTIONS.CONNECTIONDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCONNECTIONDESCRIPTIONNull()
            Me(Me.tableCONNECTIONS.CONNECTIONDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableCONNECTIONS.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableCONNECTIONS.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableCONNECTIONS.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableCONNECTIONS.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableCONNECTIONS.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableCONNECTIONS.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableCONNECTIONS.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableCONNECTIONS.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CONNECTIONSATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableCONNECTIONSATTR As CONNECTIONSATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCONNECTIONSATTR = CType(Me.Table,CONNECTIONSATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableCONNECTIONSATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONSATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableCONNECTIONSATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONSATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CONNECTIONNAME() As String
            Get
                Return CType(Me(Me.tableCONNECTIONSATTR.CONNECTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONSATTR.CONNECTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CONNECTIONATTRB() As String
            Get
                Return CType(Me(Me.tableCONNECTIONSATTR.CONNECTIONATTRBColumn),String)
            End Get
            Set
                Me(Me.tableCONNECTIONSATTR.CONNECTIONATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CONNECTIONATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCONNECTIONSATTR.CONNECTIONATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CONNECTIONATTRBVALUE' in table 'CONNECTIONSATTR' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCONNECTIONSATTR.CONNECTIONATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCONNECTIONATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableCONNECTIONSATTR.CONNECTIONATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCONNECTIONATTRBVALUENull()
            Me(Me.tableCONNECTIONSATTR.CONNECTIONATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DATASTORESRow
        Inherits Global.System.Data.DataRow
        
        Private tableDATASTORES As DATASTORESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDATASTORES = CType(Me.Table,DATASTORESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDATASTORES.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORES.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDATASTORES.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORES.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableDATASTORES.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORES.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableDATASTORES.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORES.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTORENAME() As String
            Get
                Return CType(Me(Me.tableDATASTORES.DATASTORENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORES.DATASTORENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DSDIRECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.DSDIRECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DSDIRECTION' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.DSDIRECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DSTYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.DSTYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DSTYPE' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.DSTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTOREDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.DATASTOREDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATASTOREDESCRIPTION' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.DATASTOREDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORES.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'DATASTORES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORES.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDSDIRECTIONNull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.DSDIRECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDSDIRECTIONNull()
            Me(Me.tableDATASTORES.DSDIRECTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDSTYPENull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.DSTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDSTYPENull()
            Me(Me.tableDATASTORES.DSTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATASTOREDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.DATASTOREDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATASTOREDESCRIPTIONNull()
            Me(Me.tableDATASTORES.DATASTOREDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableDATASTORES.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableDATASTORES.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableDATASTORES.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableDATASTORES.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableDATASTORES.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DATASTORESATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableDATASTORESATTR As DATASTORESATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDATASTORESATTR = CType(Me.Table,DATASTORESATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDATASTORESATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORESATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDATASTORESATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORESATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableDATASTORESATTR.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORESATTR.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableDATASTORESATTR.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORESATTR.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTORENAME() As String
            Get
                Return CType(Me(Me.tableDATASTORESATTR.DATASTORENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORESATTR.DATASTORENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTOREATTRB() As String
            Get
                Return CType(Me(Me.tableDATASTORESATTR.DATASTOREATTRBColumn),String)
            End Get
            Set
                Me(Me.tableDATASTORESATTR.DATASTOREATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTOREATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDATASTORESATTR.DATASTOREATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATASTOREATTRBVALUE' in table 'DATASTORESATTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDATASTORESATTR.DATASTOREATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATASTOREATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableDATASTORESATTR.DATASTOREATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATASTOREATTRBVALUENull()
            Me(Me.tableDATASTORESATTR.DATASTOREATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DESCRIPTIONFIELDSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDESCRIPTIONFIELDS As DESCRIPTIONFIELDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDESCRIPTIONFIELDS = CType(Me.Table,DESCRIPTIONFIELDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONFIELDS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONFIELDS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONFIELDS.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FIELDNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONFIELDS.FIELDNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.FIELDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PARENTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.PARENTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENTNAME' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.PARENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.SEQNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQNO' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.SEQNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCFIELDDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.DESCFIELDDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCFIELDDESCRIPTION' in table 'DESCRIPTIONFIELDS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.DESCFIELDDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NCHILDREN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NCHILDRENColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCHILDREN' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NCHILDRENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NLEVEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NLEVELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLEVEL' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NLEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIMES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NTIMESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIMES' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NTIMESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOCCNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NOCCNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOCCNO' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NOCCNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATATYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.DATATYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATATYPE' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.DATATYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOFFSET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NOFFSETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOFFSET' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NOFFSETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NLENGTH() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NLENGTHColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLENGTH' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NLENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSCALE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.NSCALEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSCALE' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.NSCALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CANNULL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.CANNULLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CANNULL' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.CANNULLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ISKEY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.ISKEYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISKEY' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.ISKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORGNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.ORGNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORGNAME' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.ORGNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATEFORMAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.DATEFORMATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEFORMAT' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.DATEFORMATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.LABELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.LABELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INITVAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.INITVALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INITVAL' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.INITVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.RETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RETYPE' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.RETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INVALID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.INVALIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVALID' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.INVALIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.EXTTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTTYPE' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.EXTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDENTVAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.IDENTVALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTVAL' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.IDENTVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FOREIGNKEY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONFIELDS.FOREIGNKEYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FOREIGNKEY' in table 'DESCRIPTIONFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONFIELDS.FOREIGNKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPARENTNAMENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.PARENTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPARENTNAMENull()
            Me(Me.tableDESCRIPTIONFIELDS.PARENTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSEQNONull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.SEQNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSEQNONull()
            Me(Me.tableDESCRIPTIONFIELDS.SEQNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESCFIELDDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.DESCFIELDDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESCFIELDDESCRIPTIONNull()
            Me(Me.tableDESCRIPTIONFIELDS.DESCFIELDDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNCHILDRENNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NCHILDRENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNCHILDRENNull()
            Me(Me.tableDESCRIPTIONFIELDS.NCHILDRENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNLEVELNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NLEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNLEVELNull()
            Me(Me.tableDESCRIPTIONFIELDS.NLEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIMESNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NTIMESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIMESNull()
            Me(Me.tableDESCRIPTIONFIELDS.NTIMESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOCCNONull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NOCCNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOCCNONull()
            Me(Me.tableDESCRIPTIONFIELDS.NOCCNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATATYPENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.DATATYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATATYPENull()
            Me(Me.tableDESCRIPTIONFIELDS.DATATYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOFFSETNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NOFFSETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOFFSETNull()
            Me(Me.tableDESCRIPTIONFIELDS.NOFFSETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNLENGTHNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NLENGTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNLENGTHNull()
            Me(Me.tableDESCRIPTIONFIELDS.NLENGTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSCALENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.NSCALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSCALENull()
            Me(Me.tableDESCRIPTIONFIELDS.NSCALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCANNULLNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.CANNULLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCANNULLNull()
            Me(Me.tableDESCRIPTIONFIELDS.CANNULLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsISKEYNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.ISKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetISKEYNull()
            Me(Me.tableDESCRIPTIONFIELDS.ISKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORGNAMENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.ORGNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORGNAMENull()
            Me(Me.tableDESCRIPTIONFIELDS.ORGNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATEFORMATNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.DATEFORMATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATEFORMATNull()
            Me(Me.tableDESCRIPTIONFIELDS.DATEFORMATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABELNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.LABELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABELNull()
            Me(Me.tableDESCRIPTIONFIELDS.LABELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsINITVALNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.INITVALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetINITVALNull()
            Me(Me.tableDESCRIPTIONFIELDS.INITVALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRETYPENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.RETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRETYPENull()
            Me(Me.tableDESCRIPTIONFIELDS.RETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsINVALIDNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.INVALIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetINVALIDNull()
            Me(Me.tableDESCRIPTIONFIELDS.INVALIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTTYPENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.EXTTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTTYPENull()
            Me(Me.tableDESCRIPTIONFIELDS.EXTTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDENTVALNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.IDENTVALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDENTVALNull()
            Me(Me.tableDESCRIPTIONFIELDS.IDENTVALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFOREIGNKEYNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONFIELDS.FOREIGNKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFOREIGNKEYNull()
            Me(Me.tableDESCRIPTIONFIELDS.FOREIGNKEYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DESCRIPTIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDESCRIPTIONS As DESCRIPTIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDESCRIPTIONS = CType(Me.Table,DESCRIPTIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONS.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONTYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONS.DESCRIPTIONTYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTIONTYPE' in table 'DESCRIPTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.DESCRIPTIONTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONS.DESCRIPTIONDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTIONDESCRIPTION' in table 'DESCRIPTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.DESCRIPTIONDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONS.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'DESCRIPTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONS.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'DESCRIPTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONS.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'DESCRIPTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONS.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'DESCRIPTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONS.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESCRIPTIONTYPENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONS.DESCRIPTIONTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESCRIPTIONTYPENull()
            Me(Me.tableDESCRIPTIONS.DESCRIPTIONTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESCRIPTIONDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONS.DESCRIPTIONDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESCRIPTIONDESCRIPTIONNull()
            Me(Me.tableDESCRIPTIONS.DESCRIPTIONDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONS.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableDESCRIPTIONS.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONS.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableDESCRIPTIONS.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONS.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableDESCRIPTIONS.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONS.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableDESCRIPTIONS.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DESCRIPTIONSATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableDESCRIPTIONSATTR As DESCRIPTIONSATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDESCRIPTIONSATTR = CType(Me.Table,DESCRIPTIONSATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONATTRB() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONATTRBColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTIONATTRBVALUE' in table 'DESCRIPTIONSATTR' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESCRIPTIONATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONSATTR.DESCRIPTIONATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESCRIPTIONATTRBVALUENull()
            Me(Me.tableDESCRIPTIONSATTR.DESCRIPTIONATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DESCRIPTIONSELECTRow
        Inherits Global.System.Data.DataRow
        
        Private tableDESCRIPTIONSELECT As DESCRIPTIONSELECTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDESCRIPTIONSELECT = CType(Me.Table,DESCRIPTIONSELECTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSELECT.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSELECT.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSELECT.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSELECT.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSELECT.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSELECT.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SELECTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTIONSELECT.SELECTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTIONSELECT.SELECTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ISSYSTEMSEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONSELECT.ISSYSTEMSELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISSYSTEMSEL' in table 'DESCRIPTIONSELECT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONSELECT.ISSYSTEMSELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SELECTDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTIONSELECT.SELECTDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELECTDESCRIPTION' in table 'DESCRIPTIONSELECT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTIONSELECT.SELECTDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsISSYSTEMSELNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONSELECT.ISSYSTEMSELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetISSYSTEMSELNull()
            Me(Me.tableDESCRIPTIONSELECT.ISSYSTEMSELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSELECTDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTIONSELECT.SELECTDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSELECTDESCRIPTIONNull()
            Me(Me.tableDESCRIPTIONSELECT.SELECTDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DESCRIPTSELFIELDSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDESCRIPTSELFIELDS As DESCRIPTSELFIELDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDESCRIPTSELFIELDS = CType(Me.Table,DESCRIPTSELFIELDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTSELFIELDS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTSELFIELDS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTSELFIELDS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTSELFIELDS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTSELFIELDS.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTSELFIELDS.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SELECTIONNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTSELFIELDS.SELECTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTSELFIELDS.SELECTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FIELDNAME() As String
            Get
                Return CType(Me(Me.tableDESCRIPTSELFIELDS.FIELDNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDESCRIPTSELFIELDS.FIELDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SELECTFIELDDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDESCRIPTSELFIELDS.SELECTFIELDDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SELECTFIELDDESCRIPTION' in table 'DESCRIPTSELFIELDS' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDESCRIPTSELFIELDS.SELECTFIELDDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSELECTFIELDDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDESCRIPTSELFIELDS.SELECTFIELDDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSELECTFIELDDESCRIPTIONNull()
            Me(Me.tableDESCRIPTSELFIELDS.SELECTFIELDDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DSSELECTIONSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDSSELECTIONS As DSSELECTIONSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDSSELECTIONS = CType(Me.Table,DSSELECTIONSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTORENAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.DATASTORENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.DATASTORENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SELECTIONNAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.SELECTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.SELECTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDSSELECTIONS.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELECTIONS.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PARENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELECTIONS.PARENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENT' in table 'DSSELECTIONS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELECTIONS.PARENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPARENTNull() As Boolean
            Return Me.IsNull(Me.tableDSSELECTIONS.PARENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPARENTNull()
            Me(Me.tableDSSELECTIONS.PARENTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DSSELFIELDSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDSSELFIELDS As DSSELFIELDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDSSELFIELDS = CType(Me.Table,DSSELFIELDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTORENAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.DATASTORENAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.DATASTORENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCRIPTIONNAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.DESCRIPTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.DESCRIPTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SELECTIONNAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.SELECTIONNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.SELECTIONNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FIELDNAME() As String
            Get
                Return CType(Me(Me.tableDSSELFIELDS.FIELDNAMEColumn),String)
            End Get
            Set
                Me(Me.tableDSSELFIELDS.FIELDNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PARENTNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.PARENTNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PARENTNAME' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.PARENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.SEQNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQNO' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.SEQNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DESCFIELDDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.DESCFIELDDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCFIELDDESCRIPTION' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.DESCFIELDDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NCHILDREN() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NCHILDRENColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NCHILDREN' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NCHILDRENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NLEVEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NLEVELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLEVEL' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NLEVELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NTIMES() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NTIMESColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NTIMES' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NTIMESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOCCNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NOCCNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOCCNO' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NOCCNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATATYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.DATATYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATATYPE' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.DATATYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NOFFSET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NOFFSETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NOFFSET' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NOFFSETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NLENGTH() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NLENGTHColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NLENGTH' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NLENGTHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NSCALE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.NSCALEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NSCALE' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.NSCALEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CANNULL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.CANNULLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CANNULL' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.CANNULLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ISKEY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.ISKEYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISKEY' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.ISKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ORGNAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.ORGNAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORGNAME' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.ORGNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATEFORMAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.DATEFORMATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATEFORMAT' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.DATEFORMATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LABEL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.LABELColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LABEL' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.LABELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INITVAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.INITVALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INITVAL' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.INITVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property RETYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.RETYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RETYPE' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.RETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property INVALID() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.INVALIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVALID' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.INVALIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXTTYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.EXTTYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXTTYPE' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.EXTTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property IDENTVAL() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.IDENTVALColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IDENTVAL' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.IDENTVALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FOREIGNKEY() As String
            Get
                Try 
                    Return CType(Me(Me.tableDSSELFIELDS.FOREIGNKEYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FOREIGNKEY' in table 'DSSELFIELDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDSSELFIELDS.FOREIGNKEYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPARENTNAMENull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.PARENTNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPARENTNAMENull()
            Me(Me.tableDSSELFIELDS.PARENTNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSEQNONull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.SEQNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSEQNONull()
            Me(Me.tableDSSELFIELDS.SEQNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDESCFIELDDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.DESCFIELDDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDESCFIELDDESCRIPTIONNull()
            Me(Me.tableDSSELFIELDS.DESCFIELDDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNCHILDRENNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NCHILDRENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNCHILDRENNull()
            Me(Me.tableDSSELFIELDS.NCHILDRENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNLEVELNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NLEVELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNLEVELNull()
            Me(Me.tableDSSELFIELDS.NLEVELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNTIMESNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NTIMESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNTIMESNull()
            Me(Me.tableDSSELFIELDS.NTIMESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOCCNONull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NOCCNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOCCNONull()
            Me(Me.tableDSSELFIELDS.NOCCNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATATYPENull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.DATATYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATATYPENull()
            Me(Me.tableDSSELFIELDS.DATATYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNOFFSETNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NOFFSETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNOFFSETNull()
            Me(Me.tableDSSELFIELDS.NOFFSETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNLENGTHNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NLENGTHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNLENGTHNull()
            Me(Me.tableDSSELFIELDS.NLENGTHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNSCALENull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.NSCALEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNSCALENull()
            Me(Me.tableDSSELFIELDS.NSCALEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCANNULLNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.CANNULLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCANNULLNull()
            Me(Me.tableDSSELFIELDS.CANNULLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsISKEYNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.ISKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetISKEYNull()
            Me(Me.tableDSSELFIELDS.ISKEYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsORGNAMENull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.ORGNAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetORGNAMENull()
            Me(Me.tableDSSELFIELDS.ORGNAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDATEFORMATNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.DATEFORMATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDATEFORMATNull()
            Me(Me.tableDSSELFIELDS.DATEFORMATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsLABELNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.LABELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetLABELNull()
            Me(Me.tableDSSELFIELDS.LABELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsINITVALNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.INITVALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetINITVALNull()
            Me(Me.tableDSSELFIELDS.INITVALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsRETYPENull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.RETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetRETYPENull()
            Me(Me.tableDSSELFIELDS.RETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsINVALIDNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.INVALIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetINVALIDNull()
            Me(Me.tableDSSELFIELDS.INVALIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXTTYPENull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.EXTTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXTTYPENull()
            Me(Me.tableDSSELFIELDS.EXTTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDENTVALNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.IDENTVALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDENTVALNull()
            Me(Me.tableDSSELFIELDS.IDENTVALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFOREIGNKEYNull() As Boolean
            Return Me.IsNull(Me.tableDSSELFIELDS.FOREIGNKEYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFOREIGNKEYNull()
            Me(Me.tableDSSELFIELDS.FOREIGNKEYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENGINESRow
        Inherits Global.System.Data.DataRow
        
        Private tableENGINES As ENGINESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENGINES = CType(Me.Table,ENGINESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableENGINES.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINES.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableENGINES.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINES.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableENGINES.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINES.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableENGINES.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINES.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableENGINES.ENGINEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENGINEDESCRIPTION' in table 'ENGINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINES.ENGINEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableENGINES.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'ENGINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINES.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableENGINES.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'ENGINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINES.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableENGINES.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'ENGINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINES.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableENGINES.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'ENGINES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINES.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsENGINEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableENGINES.ENGINEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetENGINEDESCRIPTIONNull()
            Me(Me.tableENGINES.ENGINEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableENGINES.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableENGINES.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableENGINES.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableENGINES.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableENGINES.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableENGINES.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableENGINES.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableENGINES.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENGINESATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableENGINESATTR As ENGINESATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENGINESATTR = CType(Me.Table,ENGINESATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableENGINESATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINESATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableENGINESATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINESATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableENGINESATTR.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINESATTR.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableENGINESATTR.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableENGINESATTR.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINEATTRB() As String
            Get
                Return CType(Me(Me.tableENGINESATTR.ENGINEATTRBColumn),String)
            End Get
            Set
                Me(Me.tableENGINESATTR.ENGINEATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINEATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableENGINESATTR.ENGINEATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENGINEATTRBVALUE' in table 'ENGINESATTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENGINESATTR.ENGINEATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsENGINEATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableENGINESATTR.ENGINEATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetENGINEATTRBVALUENull()
            Me(Me.tableENGINESATTR.ENGINEATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENVIRONMENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableENVIRONMENTS As ENVIRONMENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENVIRONMENTS = CType(Me.Table,ENVIRONMENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableENVIRONMENTS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENVIRONMENTS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableENVIRONMENTS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENVIRONMENTS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableENVIRONMENTS.ENVIRONMENTDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENVIRONMENTDESCRIPTION' in table 'ENVIRONMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENVIRONMENTS.ENVIRONMENTDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableENVIRONMENTS.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'ENVIRONMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENVIRONMENTS.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableENVIRONMENTS.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'ENVIRONMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENVIRONMENTS.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableENVIRONMENTS.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'ENVIRONMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENVIRONMENTS.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableENVIRONMENTS.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'ENVIRONMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableENVIRONMENTS.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsENVIRONMENTDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableENVIRONMENTS.ENVIRONMENTDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetENVIRONMENTDESCRIPTIONNull()
            Me(Me.tableENVIRONMENTS.ENVIRONMENTDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableENVIRONMENTS.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableENVIRONMENTS.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableENVIRONMENTS.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableENVIRONMENTS.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableENVIRONMENTS.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableENVIRONMENTS.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableENVIRONMENTS.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableENVIRONMENTS.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ENVIRONMENTSATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableENVIRONMENTSATTR As ENVIRONMENTSATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableENVIRONMENTSATTR = CType(Me.Table,ENVIRONMENTSATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableENVIRONMENTSATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENVIRONMENTSATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTATTRB() As String
            Get
                Return CType(Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTATTRBColumn),String)
            End Get
            Set
                Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ENVIRONMENTATTRBVALUE' in table 'ENVIRONMENTSATTR' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsENVIRONMENTATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableENVIRONMENTSATTR.ENVIRONMENTATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetENVIRONMENTATTRBVALUENull()
            Me(Me.tableENVIRONMENTSATTR.ENVIRONMENTATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PROJECTATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROJECTATTR As PROJECTATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROJECTATTR = CType(Me.Table,PROJECTATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tablePROJECTATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tablePROJECTATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTATTRB() As String
            Get
                Return CType(Me(Me.tablePROJECTATTR.PROJECTATTRBColumn),String)
            End Get
            Set
                Me(Me.tablePROJECTATTR.PROJECTATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTATTR.PROJECTATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROJECTATTRBVALUE' in table 'PROJECTATTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTATTR.PROJECTATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROJECTATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tablePROJECTATTR.PROJECTATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROJECTATTRBVALUENull()
            Me(Me.tablePROJECTATTR.PROJECTATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PROJECTSRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROJECTS As PROJECTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROJECTS = CType(Me.Table,PROJECTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tablePROJECTS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tablePROJECTS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTS.PROJECTDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROJECTDESCRIPTION' in table 'PROJECTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTS.PROJECTDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SECURITYATTR() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTS.SECURITYATTRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SECURITYATTR' in table 'PROJECTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTS.SECURITYATTRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTS.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'PROJECTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTS.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTS.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'PROJECTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTS.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTS.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'PROJECTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTS.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROJECTS.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'PROJECTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROJECTS.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROJECTDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePROJECTS.PROJECTDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROJECTDESCRIPTIONNull()
            Me(Me.tablePROJECTS.PROJECTDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSECURITYATTRNull() As Boolean
            Return Me.IsNull(Me.tablePROJECTS.SECURITYATTRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSECURITYATTRNull()
            Me(Me.tablePROJECTS.SECURITYATTRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tablePROJECTS.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tablePROJECTS.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tablePROJECTS.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tablePROJECTS.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tablePROJECTS.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tablePROJECTS.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tablePROJECTS.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tablePROJECTS.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SYSTEMSRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYSTEMS As SYSTEMSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYSTEMS = CType(Me.Table,SYSTEMSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableSYSTEMS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableSYSTEMS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableSYSTEMS.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMS.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYSTEMS.SYSTEMDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYSTEMDESCRIPTION' in table 'SYSTEMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSTEMS.SYSTEMDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSYSTEMS.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'SYSTEMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSTEMS.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSYSTEMS.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'SYSTEMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSTEMS.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYSTEMS.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'SYSTEMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSTEMS.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYSTEMS.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'SYSTEMS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSTEMS.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSYSTEMDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableSYSTEMS.SYSTEMDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSYSTEMDESCRIPTIONNull()
            Me(Me.tableSYSTEMS.SYSTEMDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableSYSTEMS.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableSYSTEMS.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableSYSTEMS.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableSYSTEMS.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableSYSTEMS.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableSYSTEMS.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableSYSTEMS.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableSYSTEMS.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SYSTEMSATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableSYSTEMSATTR As SYSTEMSATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYSTEMSATTR = CType(Me.Table,SYSTEMSATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableSYSTEMSATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMSATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableSYSTEMSATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMSATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableSYSTEMSATTR.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMSATTR.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMATTRB() As String
            Get
                Return CType(Me(Me.tableSYSTEMSATTR.SYSTEMATTRBColumn),String)
            End Get
            Set
                Me(Me.tableSYSTEMSATTR.SYSTEMATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYSTEMSATTR.SYSTEMATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYSTEMATTRBVALUE' in table 'SYSTEMSATTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYSTEMSATTR.SYSTEMATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSYSTEMATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableSYSTEMSATTR.SYSTEMATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSYSTEMATTRBVALUENull()
            Me(Me.tableSYSTEMSATTR.SYSTEMATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TASKDSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTASKDS As TASKDSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTASKDS = CType(Me.Table,TASKDSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableTASKDS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKDS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableTASKDS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKDS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableTASKDS.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKDS.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableTASKDS.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKDS.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKNAME() As String
            Get
                Return CType(Me(Me.tableTASKDS.TASKNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKDS.TASKNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DATASTORENAME() As String
            Get
                Return CType(Me(Me.tableTASKDS.DATASTORENAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKDS.DATASTORENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKTYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKDS.TASKTYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKTYPE' in table 'TASKDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKDS.TASKTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DSDIRECTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKDS.DSDIRECTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DSDIRECTION' in table 'TASKDS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKDS.DSDIRECTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTASKTYPENull() As Boolean
            Return Me.IsNull(Me.tableTASKDS.TASKTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTASKTYPENull()
            Me(Me.tableTASKDS.TASKTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDSDIRECTIONNull() As Boolean
            Return Me.IsNull(Me.tableTASKDS.DSDIRECTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDSDIRECTIONNull()
            Me(Me.tableTASKDS.DSDIRECTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TASKMAPRow
        Inherits Global.System.Data.DataRow
        
        Private tableTASKMAP As TASKMAPDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTASKMAP = CType(Me.Table,TASKMAPDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableTASKMAP.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKMAP.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableTASKMAP.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKMAP.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableTASKMAP.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKMAP.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableTASKMAP.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKMAP.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKNAME() As String
            Get
                Return CType(Me(Me.tableTASKMAP.TASKNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKMAP.TASKNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAPPINGID() As Long
            Get
                Return CType(Me(Me.tableTASKMAP.MAPPINGIDColumn),Long)
            End Get
            Set
                Me(Me.tableTASKMAP.MAPPINGIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKTYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.TASKTYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKTYPE' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.TASKTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAPPINGDESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.MAPPINGDESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAPPINGDESC' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.MAPPINGDESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAPPINGTARGET() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.MAPPINGTARGETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAPPINGTARGET' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.MAPPINGTARGETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOURCETYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.SOURCETYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCETYPE' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.SOURCETYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TARGETTYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.TARGETTYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETTYPE' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.TARGETTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ISMAPPED() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.ISMAPPEDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ISMAPPED' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.ISMAPPEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAPPINGSOURCEID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.MAPPINGSOURCEIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAPPINGSOURCEID' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.MAPPINGSOURCEIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAPPINGTARGETID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.MAPPINGTARGETIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAPPINGTARGETID' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.MAPPINGTARGETIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOURCEPARENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.SOURCEPARENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCEPARENT' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.SOURCEPARENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TARGETPARENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.TARGETPARENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETPARENT' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.TARGETPARENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SEQNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.SEQNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SEQNO' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.SEQNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SOURCEDATASTORE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.SOURCEDATASTOREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SOURCEDATASTORE' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.SOURCEDATASTOREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TARGETDATASTORE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.TARGETDATASTOREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TARGETDATASTORE' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.TARGETDATASTOREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MAPPINGSOURCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKMAP.MAPPINGSOURCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MAPPINGSOURCE' in table 'TASKMAP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKMAP.MAPPINGSOURCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTASKTYPENull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.TASKTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTASKTYPENull()
            Me(Me.tableTASKMAP.TASKTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAPPINGDESCNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.MAPPINGDESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAPPINGDESCNull()
            Me(Me.tableTASKMAP.MAPPINGDESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAPPINGTARGETNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.MAPPINGTARGETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAPPINGTARGETNull()
            Me(Me.tableTASKMAP.MAPPINGTARGETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSOURCETYPENull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.SOURCETYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSOURCETYPENull()
            Me(Me.tableTASKMAP.SOURCETYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTARGETTYPENull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.TARGETTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTARGETTYPENull()
            Me(Me.tableTASKMAP.TARGETTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsISMAPPEDNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.ISMAPPEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetISMAPPEDNull()
            Me(Me.tableTASKMAP.ISMAPPEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAPPINGSOURCEIDNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.MAPPINGSOURCEIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAPPINGSOURCEIDNull()
            Me(Me.tableTASKMAP.MAPPINGSOURCEIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAPPINGTARGETIDNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.MAPPINGTARGETIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAPPINGTARGETIDNull()
            Me(Me.tableTASKMAP.MAPPINGTARGETIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSOURCEPARENTNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.SOURCEPARENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSOURCEPARENTNull()
            Me(Me.tableTASKMAP.SOURCEPARENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTARGETPARENTNull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.TARGETPARENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTARGETPARENTNull()
            Me(Me.tableTASKMAP.TARGETPARENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSEQNONull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.SEQNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSEQNONull()
            Me(Me.tableTASKMAP.SEQNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSOURCEDATASTORENull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.SOURCEDATASTOREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSOURCEDATASTORENull()
            Me(Me.tableTASKMAP.SOURCEDATASTOREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTARGETDATASTORENull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.TARGETDATASTOREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTARGETDATASTORENull()
            Me(Me.tableTASKMAP.TARGETDATASTOREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMAPPINGSOURCENull() As Boolean
            Return Me.IsNull(Me.tableTASKMAP.MAPPINGSOURCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMAPPINGSOURCENull()
            Me(Me.tableTASKMAP.MAPPINGSOURCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TASKSRow
        Inherits Global.System.Data.DataRow
        
        Private tableTASKS As TASKSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTASKS = CType(Me.Table,TASKSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableTASKS.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKS.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableTASKS.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKS.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableTASKS.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKS.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableTASKS.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKS.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKNAME() As String
            Get
                Return CType(Me(Me.tableTASKS.TASKNAMEColumn),String)
            End Get
            Set
                Me(Me.tableTASKS.TASKNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKTYPE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.TASKTYPEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKTYPE' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.TASKTYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKSEQNO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.TASKSEQNOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKSEQNO' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.TASKSEQNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TASKDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.TASKDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TASKDESCRIPTION' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.TASKDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.CREATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_TIMESTAMP' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.CREATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_TIMESTAMP() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.UPDATED_TIMESTAMPColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_TIMESTAMP' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.UPDATED_TIMESTAMPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CREATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.CREATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATED_USER_ID' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.CREATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPDATED_USER_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tableTASKS.UPDATED_USER_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UPDATED_USER_ID' in table 'TASKS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTASKS.UPDATED_USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTASKTYPENull() As Boolean
            Return Me.IsNull(Me.tableTASKS.TASKTYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTASKTYPENull()
            Me(Me.tableTASKS.TASKTYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTASKSEQNONull() As Boolean
            Return Me.IsNull(Me.tableTASKS.TASKSEQNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTASKSEQNONull()
            Me(Me.tableTASKS.TASKSEQNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTASKDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableTASKS.TASKDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTASKDESCRIPTIONNull()
            Me(Me.tableTASKS.TASKDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableTASKS.CREATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_TIMESTAMPNull()
            Me(Me.tableTASKS.CREATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_TIMESTAMPNull() As Boolean
            Return Me.IsNull(Me.tableTASKS.UPDATED_TIMESTAMPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_TIMESTAMPNull()
            Me(Me.tableTASKS.UPDATED_TIMESTAMPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCREATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableTASKS.CREATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCREATED_USER_IDNull()
            Me(Me.tableTASKS.CREATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUPDATED_USER_IDNull() As Boolean
            Return Me.IsNull(Me.tableTASKS.UPDATED_USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUPDATED_USER_IDNull()
            Me(Me.tableTASKS.UPDATED_USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Test1Row
        Inherits Global.System.Data.DataRow
        
        Private tableTest1 As Test1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTest1 = CType(Me.Table,Test1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EmplNumber() As System.Guid
            Get
                Return CType(Me(Me.tableTest1.EmplNumberColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableTest1.EmplNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SerNo() As Integer
            Get
                Return CType(Me(Me.tableTest1.SerNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTest1.SerNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TimeStamp1() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTest1.TimeStamp1Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TimeStamp1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.TimeStamp1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableTest1.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableTest1.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tableTest1.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableTest1.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Salary() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTest1.SalaryColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Salary' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.SalaryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BonusSmall() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableTest1.BonusSmallColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BonusSmall' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.BonusSmallColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BigDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTest1.BigDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BigDate' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.BigDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SmallDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTest1.SmallDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SmallDate' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.SmallDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Bit1() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Bit1Column),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bit1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Bit1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Tinyint1() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Tinyint1Column),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tinyint1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Tinyint1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SmallInt1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTest1.SmallInt1Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SmallInt1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.SmallInt1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Int1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Int1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Int1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Int1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BigInt1() As Long
            Get
                Try 
                    Return CType(Me(Me.tableTest1.BigInt1Column),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BigInt1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.BigInt1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Float1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Float1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Float1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Float1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Real1() As Single
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Real1Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Real1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Real1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Char1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Char1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Char1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Char1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Text1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Text1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Text1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Text1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nchar1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Nchar1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nchar1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Nchar1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Nvarchar1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Nvarchar1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Nvarchar1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Nvarchar1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Bin1() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Bin1Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bin1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Bin1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Varbin1() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTest1.Varbin1Column),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Varbin1' in table 'Test1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTest1.Varbin1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTimeStamp1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.TimeStamp1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTimeStamp1Null()
            Me(Me.tableTest1.TimeStamp1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSalaryNull() As Boolean
            Return Me.IsNull(Me.tableTest1.SalaryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSalaryNull()
            Me(Me.tableTest1.SalaryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBonusSmallNull() As Boolean
            Return Me.IsNull(Me.tableTest1.BonusSmallColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBonusSmallNull()
            Me(Me.tableTest1.BonusSmallColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBigDateNull() As Boolean
            Return Me.IsNull(Me.tableTest1.BigDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBigDateNull()
            Me(Me.tableTest1.BigDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSmallDateNull() As Boolean
            Return Me.IsNull(Me.tableTest1.SmallDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSmallDateNull()
            Me(Me.tableTest1.SmallDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBit1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Bit1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBit1Null()
            Me(Me.tableTest1.Bit1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTinyint1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Tinyint1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTinyint1Null()
            Me(Me.tableTest1.Tinyint1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSmallInt1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.SmallInt1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSmallInt1Null()
            Me(Me.tableTest1.SmallInt1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsInt1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Int1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetInt1Null()
            Me(Me.tableTest1.Int1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBigInt1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.BigInt1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBigInt1Null()
            Me(Me.tableTest1.BigInt1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsFloat1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Float1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetFloat1Null()
            Me(Me.tableTest1.Float1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsReal1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Real1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetReal1Null()
            Me(Me.tableTest1.Real1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsChar1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Char1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetChar1Null()
            Me(Me.tableTest1.Char1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsText1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Text1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetText1Null()
            Me(Me.tableTest1.Text1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNchar1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Nchar1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNchar1Null()
            Me(Me.tableTest1.Nchar1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNvarchar1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Nvarchar1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNvarchar1Null()
            Me(Me.tableTest1.Nvarchar1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBin1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Bin1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBin1Null()
            Me(Me.tableTest1.Bin1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVarbin1Null() As Boolean
            Return Me.IsNull(Me.tableTest1.Varbin1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVarbin1Null()
            Me(Me.tableTest1.Varbin1Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VARIABLESRow
        Inherits Global.System.Data.DataRow
        
        Private tableVARIABLES As VARIABLESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVARIABLES = CType(Me.Table,VARIABLESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableVARIABLES.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLES.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableVARIABLES.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLES.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableVARIABLES.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLES.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableVARIABLES.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLES.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VARIABLENAME() As String
            Get
                Return CType(Me(Me.tableVARIABLES.VARIABLENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLES.VARIABLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VARIABLEDESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableVARIABLES.VARIABLEDESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VARIABLEDESCRIPTION' in table 'VARIABLES' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVARIABLES.VARIABLEDESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVARIABLEDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableVARIABLES.VARIABLEDESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVARIABLEDESCRIPTIONNull()
            Me(Me.tableVARIABLES.VARIABLEDESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class VARIABLESATTRRow
        Inherits Global.System.Data.DataRow
        
        Private tableVARIABLESATTR As VARIABLESATTRDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVARIABLESATTR = CType(Me.Table,VARIABLESATTRDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROJECTNAME() As String
            Get
                Return CType(Me(Me.tableVARIABLESATTR.PROJECTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLESATTR.PROJECTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENVIRONMENTNAME() As String
            Get
                Return CType(Me(Me.tableVARIABLESATTR.ENVIRONMENTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLESATTR.ENVIRONMENTNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SYSTEMNAME() As String
            Get
                Return CType(Me(Me.tableVARIABLESATTR.SYSTEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLESATTR.SYSTEMNAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ENGINENAME() As String
            Get
                Return CType(Me(Me.tableVARIABLESATTR.ENGINENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLESATTR.ENGINENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VARIABLENAME() As String
            Get
                Return CType(Me(Me.tableVARIABLESATTR.VARIABLENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLESATTR.VARIABLENAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VARIABLEATTRB() As String
            Get
                Return CType(Me(Me.tableVARIABLESATTR.VARIABLEATTRBColumn),String)
            End Get
            Set
                Me(Me.tableVARIABLESATTR.VARIABLEATTRBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VARIABLEATTRBVALUE() As String
            Get
                Try 
                    Return CType(Me(Me.tableVARIABLESATTR.VARIABLEATTRBVALUEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VARIABLEATTRBVALUE' in table 'VARIABLESATTR' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVARIABLESATTR.VARIABLEATTRBVALUEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsVARIABLEATTRBVALUENull() As Boolean
            Return Me.IsNull(Me.tableVARIABLESATTR.VARIABLEATTRBVALUEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetVARIABLEATTRBVALUENull()
            Me(Me.tableVARIABLESATTR.VARIABLEATTRBVALUEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CONNECTIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CONNECTIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CONNECTIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CONNECTIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CONNECTIONSATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CONNECTIONSATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CONNECTIONSATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CONNECTIONSATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DATASTORESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DATASTORESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DATASTORESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DATASTORESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DATASTORESATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DATASTORESATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DATASTORESATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DATASTORESATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DESCRIPTIONFIELDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DESCRIPTIONFIELDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DESCRIPTIONFIELDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DESCRIPTIONFIELDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DESCRIPTIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DESCRIPTIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DESCRIPTIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DESCRIPTIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DESCRIPTIONSATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DESCRIPTIONSATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DESCRIPTIONSATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DESCRIPTIONSATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DESCRIPTIONSELECTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DESCRIPTIONSELECTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DESCRIPTIONSELECTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DESCRIPTIONSELECTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DESCRIPTSELFIELDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DESCRIPTSELFIELDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DESCRIPTSELFIELDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DESCRIPTSELFIELDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DSSELECTIONSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DSSELECTIONSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DSSELECTIONSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DSSELECTIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class DSSELFIELDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DSSELFIELDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As DSSELFIELDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As DSSELFIELDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ENGINESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENGINESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ENGINESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ENGINESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ENGINESATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENGINESATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ENGINESATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ENGINESATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ENVIRONMENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENVIRONMENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ENVIRONMENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ENVIRONMENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ENVIRONMENTSATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ENVIRONMENTSATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ENVIRONMENTSATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ENVIRONMENTSATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PROJECTATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROJECTATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PROJECTATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PROJECTATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PROJECTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROJECTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PROJECTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PROJECTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SYSTEMSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYSTEMSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SYSTEMSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SYSTEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SYSTEMSATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SYSTEMSATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SYSTEMSATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SYSTEMSATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TASKDSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TASKDSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TASKDSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TASKDSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TASKMAPRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TASKMAPRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TASKMAPRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TASKMAPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TASKSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TASKSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TASKSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TASKSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Test1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Test1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Test1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Test1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class VARIABLESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VARIABLESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As VARIABLESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As VARIABLESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class VARIABLESATTRRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VARIABLESATTRRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As VARIABLESATTRRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As VARIABLESATTRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SQDmetaDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CONNECTIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CONNECTIONS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("CONNECTIONNAME", "CONNECTIONNAME")
            tableMapping.ColumnMappings.Add("CONNECTIONDESCRIPTION", "CONNECTIONDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CONNECTIONS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AN"& _ 
                "D ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([CONNECTIONNAME] = @Origi"& _ 
                "nal_CONNECTIONNAME) AND ((@IsNull_CONNECTIONDESCRIPTION = 1 AND [CONNECTIONDESCR"& _ 
                "IPTION] IS NULL) OR ([CONNECTIONDESCRIPTION] = @Original_CONNECTIONDESCRIPTION))"& _ 
                " AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREAT"& _ 
                "ED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = "& _ 
                "1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_T"& _ 
                "IMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ("& _ 
                "[CREATED_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = "& _ 
                "1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_"& _ 
                "ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONNECTIONDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CONNECTIONS] ([PROJECTNAME], [ENVIRONMENTNAME], [CONNECTIONNAM"& _ 
                "E], [CONNECTIONDESCRIPTION], [CREATED_TIMESTAMP], [UPDATED_TIMESTAMP], [CREATED_"& _ 
                "USER_ID], [UPDATED_USER_ID]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @CONNECTION"& _ 
                "NAME, @CONNECTIONDESCRIPTION, @CREATED_TIMESTAMP, @UPDATED_TIMESTAMP, @CREATED_U"& _ 
                "SER_ID, @UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME,"& _ 
                " CONNECTIONDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, U"& _ 
                "PDATED_USER_ID FROM CONNECTIONS WHERE (CONNECTIONNAME = @CONNECTIONNAME) AND (EN"& _ 
                "VIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CONNECTIONS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = "& _ 
                "@ENVIRONMENTNAME, [CONNECTIONNAME] = @CONNECTIONNAME, [CONNECTIONDESCRIPTION] = "& _ 
                "@CONNECTIONDESCRIPTION, [CREATED_TIMESTAMP] = @CREATED_TIMESTAMP, [UPDATED_TIMES"& _ 
                "TAMP] = @UPDATED_TIMESTAMP, [CREATED_USER_ID] = @CREATED_USER_ID, [UPDATED_USER_"& _ 
                "ID] = @UPDATED_USER_ID WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVI"& _ 
                "RONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([CONNECTIONNAME] = @Original_CONN"& _ 
                "ECTIONNAME) AND ((@IsNull_CONNECTIONDESCRIPTION = 1 AND [CONNECTIONDESCRIPTION] "& _ 
                "IS NULL) OR ([CONNECTIONDESCRIPTION] = @Original_CONNECTIONDESCRIPTION)) AND ((@"& _ 
                "IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMES"& _ 
                "TAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [U"& _ 
                "PDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP"& _ 
                ")) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATED"& _ 
                "_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND [U"& _ 
                "PDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONDESCRIPTION, CREA"& _ 
                "TED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM CONNECTI"& _ 
                "ONS WHERE (CONNECTIONNAME = @CONNECTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENT"& _ 
                "NAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONNECTIONDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONDESCRIPTION, CREAT"& _ 
                "ED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM dbo.CONNE"& _ 
                "CTIONS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.CONNECTIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.CONNECTIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.CONNECTIONSDataTable = New SQDmetaDataSet.CONNECTIONSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.CONNECTIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CONNECTIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_CONNECTIONNAME As String, ByVal Original_CONNECTIONDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CONNECTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CONNECTIONNAME,String)
            End If
            If (Original_CONNECTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CONNECTIONDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String, ByVal CONNECTIONDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONNECTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CONNECTIONNAME,String)
            End If
            If (CONNECTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CONNECTIONDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal CONNECTIONNAME As String,  _
                    ByVal CONNECTIONDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_CONNECTIONNAME As String,  _
                    ByVal Original_CONNECTIONDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONNECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CONNECTIONNAME,String)
            End If
            If (CONNECTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CONNECTIONDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CONNECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CONNECTIONNAME,String)
            End If
            If (Original_CONNECTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CONNECTIONDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CONNECTIONDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_CONNECTIONNAME As String, ByVal Original_CONNECTIONDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_CONNECTIONNAME, CONNECTIONDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_CONNECTIONNAME, Original_CONNECTIONDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CONNECTIONSATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CONNECTIONSATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("CONNECTIONNAME", "CONNECTIONNAME")
            tableMapping.ColumnMappings.Add("CONNECTIONATTRB", "CONNECTIONATTRB")
            tableMapping.ColumnMappings.Add("CONNECTIONATTRBVALUE", "CONNECTIONATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CONNECTIONSATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAME"& _ 
                ") AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([CONNECTIONNAME] = @O"& _ 
                "riginal_CONNECTIONNAME) AND ([CONNECTIONATTRB] = @Original_CONNECTIONATTRB) AND "& _ 
                "((@IsNull_CONNECTIONATTRBVALUE = 1 AND [CONNECTIONATTRBVALUE] IS NULL) OR ([CONN"& _ 
                "ECTIONATTRBVALUE] = @Original_CONNECTIONATTRBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONNECTIONATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CONNECTIONSATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [CONNECTIO"& _ 
                "NNAME], [CONNECTIONATTRB], [CONNECTIONATTRBVALUE]) VALUES (@PROJECTNAME, @ENVIRO"& _ 
                "NMENTNAME, @CONNECTIONNAME, @CONNECTIONATTRB, @CONNECTIONATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PR"& _ 
                "OJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONATTRB, CONNECTIONATTRBVALU"& _ 
                "E FROM CONNECTIONSATTR WHERE (CONNECTIONATTRB = @CONNECTIONATTRB) AND (CONNECTIO"& _ 
                "NNAME = @CONNECTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNA"& _ 
                "ME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CONNECTIONSATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME"& _ 
                "] = @ENVIRONMENTNAME, [CONNECTIONNAME] = @CONNECTIONNAME, [CONNECTIONATTRB] = @C"& _ 
                "ONNECTIONATTRB, [CONNECTIONATTRBVALUE] = @CONNECTIONATTRBVALUE WHERE (([PROJECTN"& _ 
                "AME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME"& _ 
                ") AND ([CONNECTIONNAME] = @Original_CONNECTIONNAME) AND ([CONNECTIONATTRB] = @Or"& _ 
                "iginal_CONNECTIONATTRB) AND ((@IsNull_CONNECTIONATTRBVALUE = 1 AND [CONNECTIONAT"& _ 
                "TRBVALUE] IS NULL) OR ([CONNECTIONATTRBVALUE] = @Original_CONNECTIONATTRBVALUE))"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONATTRB, CONNEC"& _ 
                "TIONATTRBVALUE FROM CONNECTIONSATTR WHERE (CONNECTIONATTRB = @CONNECTIONATTRB) A"& _ 
                "ND (CONNECTIONNAME = @CONNECTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) A"& _ 
                "ND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CONNECTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CONNECTIONATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CONNECTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CONNECTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, CONNECTIONNAME, CONNECTIONATTRB, CONNECTIONA"& _ 
                "TTRBVALUE FROM dbo.CONNECTIONSATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.CONNECTIONSATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.CONNECTIONSATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.CONNECTIONSATTRDataTable = New SQDmetaDataSet.CONNECTIONSATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.CONNECTIONSATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CONNECTIONSATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_CONNECTIONNAME As String, ByVal Original_CONNECTIONATTRB As String, ByVal Original_CONNECTIONATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CONNECTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CONNECTIONNAME,String)
            End If
            If (Original_CONNECTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CONNECTIONATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_CONNECTIONATTRB,String)
            End If
            If (Original_CONNECTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CONNECTIONATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String, ByVal CONNECTIONATTRB As String, ByVal CONNECTIONATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONNECTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CONNECTIONNAME,String)
            End If
            If (CONNECTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONNECTIONATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CONNECTIONATTRB,String)
            End If
            If (CONNECTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CONNECTIONATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal CONNECTIONNAME As String, ByVal CONNECTIONATTRB As String, ByVal CONNECTIONATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_CONNECTIONNAME As String, ByVal Original_CONNECTIONATTRB As String, ByVal Original_CONNECTIONATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONNECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CONNECTIONNAME,String)
            End If
            If (CONNECTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CONNECTIONATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CONNECTIONATTRB,String)
            End If
            If (CONNECTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CONNECTIONATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_CONNECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CONNECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CONNECTIONNAME,String)
            End If
            If (Original_CONNECTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_CONNECTIONATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_CONNECTIONATTRB,String)
            End If
            If (Original_CONNECTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_CONNECTIONATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CONNECTIONATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_CONNECTIONNAME As String, ByVal Original_CONNECTIONATTRB As String, ByVal Original_CONNECTIONATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_CONNECTIONNAME, Original_CONNECTIONATTRB, CONNECTIONATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_CONNECTIONNAME, Original_CONNECTIONATTRB, Original_CONNECTIONATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DATASTORESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DATASTORES"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("DATASTORENAME", "DATASTORENAME")
            tableMapping.ColumnMappings.Add("DSDIRECTION", "DSDIRECTION")
            tableMapping.ColumnMappings.Add("DSTYPE", "DSTYPE")
            tableMapping.ColumnMappings.Add("DATASTOREDESCRIPTION", "DATASTOREDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DATASTORES] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND"& _ 
                " ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_S"& _ 
                "YSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTORENAME] = @Ori"& _ 
                "ginal_DATASTORENAME) AND ((@IsNull_DSDIRECTION = 1 AND [DSDIRECTION] IS NULL) OR"& _ 
                " ([DSDIRECTION] = @Original_DSDIRECTION)) AND ((@IsNull_DSTYPE = 1 AND [DSTYPE] "& _ 
                "IS NULL) OR ([DSTYPE] = @Original_DSTYPE)) AND ((@IsNull_DATASTOREDESCRIPTION = "& _ 
                "1 AND [DATASTOREDESCRIPTION] IS NULL) OR ([DATASTOREDESCRIPTION] = @Original_DAT"& _ 
                "ASTOREDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] "& _ 
                "IS NULL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_U"& _ 
                "PDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = "& _ 
                "@Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USE"& _ 
                "R_ID] IS NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull"& _ 
                "_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Ori"& _ 
                "ginal_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DSDIRECTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DSTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DSTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATASTOREDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTOREDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DATASTORES] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], ["& _ 
                "ENGINENAME], [DATASTORENAME], [DSDIRECTION], [DSTYPE], [DATASTOREDESCRIPTION], ["& _ 
                "CREATED_TIMESTAMP], [UPDATED_TIMESTAMP], [CREATED_USER_ID], [UPDATED_USER_ID]) V"& _ 
                "ALUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @DATASTORENAME,"& _ 
                " @DSDIRECTION, @DSTYPE, @DATASTOREDESCRIPTION, @CREATED_TIMESTAMP, @UPDATED_TIME"& _ 
                "STAMP, @CREATED_USER_ID, @UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME"& _ 
                ", SYSTEMNAME, ENGINENAME, DATASTORENAME, DSDIRECTION, DSTYPE, DATASTOREDESCRIPTI"& _ 
                "ON, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM "& _ 
                "DATASTORES WHERE (DATASTORENAME = @DATASTORENAME) AND (ENGINENAME = @ENGINENAME)"& _ 
                " AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND ("& _ 
                "SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTOREDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DATASTORES] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @"& _ 
                "ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [DATAST"& _ 
                "ORENAME] = @DATASTORENAME, [DSDIRECTION] = @DSDIRECTION, [DSTYPE] = @DSTYPE, [DA"& _ 
                "TASTOREDESCRIPTION] = @DATASTOREDESCRIPTION, [CREATED_TIMESTAMP] = @CREATED_TIME"& _ 
                "STAMP, [UPDATED_TIMESTAMP] = @UPDATED_TIMESTAMP, [CREATED_USER_ID] = @CREATED_US"& _ 
                "ER_ID, [UPDATED_USER_ID] = @UPDATED_USER_ID WHERE (([PROJECTNAME] = @Original_PR"& _ 
                "OJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME]"& _ 
                " = @Original_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTO"& _ 
                "RENAME] = @Original_DATASTORENAME) AND ((@IsNull_DSDIRECTION = 1 AND [DSDIRECTIO"& _ 
                "N] IS NULL) OR ([DSDIRECTION] = @Original_DSDIRECTION)) AND ((@IsNull_DSTYPE = 1"& _ 
                " AND [DSTYPE] IS NULL) OR ([DSTYPE] = @Original_DSTYPE)) AND ((@IsNull_DATASTORE"& _ 
                "DESCRIPTION = 1 AND [DATASTOREDESCRIPTION] IS NULL) OR ([DATASTOREDESCRIPTION] ="& _ 
                " @Original_DATASTOREDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREAT"& _ 
                "ED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) A"& _ 
                "ND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED"& _ 
                "_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AN"& _ 
                "D [CREATED_USER_ID] IS NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID))"& _ 
                " AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_U"& _ 
                "SER_ID] = @Original_UPDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SY"& _ 
                "STEMNAME, ENGINENAME, DATASTORENAME, DSDIRECTION, DSTYPE, DATASTOREDESCRIPTION, "& _ 
                "CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM DATA"& _ 
                "STORES WHERE (DATASTORENAME = @DATASTORENAME) AND (ENGINENAME = @ENGINENAME) AND"& _ 
                " (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYST"& _ 
                "EMNAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTOREDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DSDIRECTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DSTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DSTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATASTOREDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTOREDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DSDIR"& _ 
                "ECTION, DSTYPE, DATASTOREDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREA"& _ 
                "TED_USER_ID, UPDATED_USER_ID FROM dbo.DATASTORES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DATASTORESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DATASTORESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DATASTORESDataTable = New SQDmetaDataSet.DATASTORESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DATASTORESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DATASTORES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_DSDIRECTION As String, ByVal Original_DSTYPE As Global.System.Nullable(Of Integer), ByVal Original_DATASTOREDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_DSDIRECTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DSDIRECTION,String)
            End If
            If (Original_DSTYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DSTYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DATASTOREDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DATASTOREDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DSDIRECTION As String, ByVal DSTYPE As Global.System.Nullable(Of Integer), ByVal DATASTOREDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (DSDIRECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DSDIRECTION,String)
            End If
            If (DSTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DSTYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATASTOREDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATASTOREDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal DATASTORENAME As String,  _
                    ByVal DSDIRECTION As String,  _
                    ByVal DSTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal DATASTOREDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_DSDIRECTION As String,  _
                    ByVal Original_DSTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATASTOREDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (DSDIRECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DSDIRECTION,String)
            End If
            If (DSTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DSTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DATASTOREDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DATASTOREDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_DSDIRECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_DSDIRECTION,String)
            End If
            If (Original_DSTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_DSTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_DATASTOREDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_DATASTOREDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DSDIRECTION As String,  _
                    ByVal DSTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal DATASTOREDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_DSDIRECTION As String,  _
                    ByVal Original_DSTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATASTOREDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, DSDIRECTION, DSTYPE, DATASTOREDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_DSDIRECTION, Original_DSTYPE, Original_DATASTOREDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DATASTORESATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DATASTORESATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("DATASTORENAME", "DATASTORENAME")
            tableMapping.ColumnMappings.Add("DATASTOREATTRB", "DATASTOREATTRB")
            tableMapping.ColumnMappings.Add("DATASTOREATTRBVALUE", "DATASTOREATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DATASTORESATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAME)"& _ 
                " AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Origin"& _ 
                "al_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTORENAME] = "& _ 
                "@Original_DATASTORENAME) AND ([DATASTOREATTRB] = @Original_DATASTOREATTRB) AND ("& _ 
                "(@IsNull_DATASTOREATTRBVALUE = 1 AND [DATASTOREATTRBVALUE] IS NULL) OR ([DATASTO"& _ 
                "REATTRBVALUE] = @Original_DATASTOREATTRBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTOREATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATASTOREATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTOREATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DATASTORESATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME"& _ 
                "], [ENGINENAME], [DATASTORENAME], [DATASTOREATTRB], [DATASTOREATTRBVALUE]) VALUE"& _ 
                "S (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @DATASTORENAME, @DA"& _ 
                "TASTOREATTRB, @DATASTOREATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTE"& _ 
                "MNAME, ENGINENAME, DATASTORENAME, DATASTOREATTRB, DATASTOREATTRBVALUE FROM DATAS"& _ 
                "TORESATTR WHERE (DATASTOREATTRB = @DATASTOREATTRB) AND (DATASTORENAME = @DATASTO"& _ 
                "RENAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) "& _ 
                "AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTOREATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTOREATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DATASTORESATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME]"& _ 
                " = @ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [DA"& _ 
                "TASTORENAME] = @DATASTORENAME, [DATASTOREATTRB] = @DATASTOREATTRB, [DATASTOREATT"& _ 
                "RBVALUE] = @DATASTOREATTRBVALUE WHERE (([PROJECTNAME] = @Original_PROJECTNAME) A"& _ 
                "ND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original"& _ 
                "_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTORENAME] = @O"& _ 
                "riginal_DATASTORENAME) AND ([DATASTOREATTRB] = @Original_DATASTOREATTRB) AND ((@"& _ 
                "IsNull_DATASTOREATTRBVALUE = 1 AND [DATASTOREATTRBVALUE] IS NULL) OR ([DATASTORE"& _ 
                "ATTRBVALUE] = @Original_DATASTOREATTRBVALUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENT"& _ 
                "NAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DATASTOREATTRB, DATASTOREATTRBVALUE"& _ 
                " FROM DATASTORESATTR WHERE (DATASTOREATTRB = @DATASTOREATTRB) AND (DATASTORENAME"& _ 
                " = @DATASTORENAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRO"& _ 
                "NMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTOREATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTOREATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTOREATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATASTOREATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTOREATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTOREATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DATAS"& _ 
                "TOREATTRB, DATASTOREATTRBVALUE FROM dbo.DATASTORESATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DATASTORESATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DATASTORESATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DATASTORESATTRDataTable = New SQDmetaDataSet.DATASTORESATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DATASTORESATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DATASTORESATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_DATASTOREATTRB As String, ByVal Original_DATASTOREATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_DATASTOREATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTOREATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DATASTOREATTRB,String)
            End If
            If (Original_DATASTOREATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_DATASTOREATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DATASTOREATTRB As String, ByVal DATASTOREATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (DATASTOREATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTOREATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DATASTOREATTRB,String)
            End If
            If (DATASTOREATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DATASTOREATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal DATASTOREATTRB As String, ByVal DATASTOREATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_DATASTOREATTRB As String, ByVal Original_DATASTOREATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (DATASTOREATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTOREATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DATASTOREATTRB,String)
            End If
            If (DATASTOREATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DATASTOREATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_DATASTOREATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTOREATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DATASTOREATTRB,String)
            End If
            If (Original_DATASTOREATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DATASTOREATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DATASTOREATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_DATASTOREATTRB As String, ByVal Original_DATASTOREATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_DATASTOREATTRB, DATASTOREATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_DATASTOREATTRB, Original_DATASTOREATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DESCRIPTIONFIELDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DESCRIPTIONFIELDS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("FIELDNAME", "FIELDNAME")
            tableMapping.ColumnMappings.Add("PARENTNAME", "PARENTNAME")
            tableMapping.ColumnMappings.Add("SEQNO", "SEQNO")
            tableMapping.ColumnMappings.Add("DESCFIELDDESCRIPTION", "DESCFIELDDESCRIPTION")
            tableMapping.ColumnMappings.Add("NCHILDREN", "NCHILDREN")
            tableMapping.ColumnMappings.Add("NLEVEL", "NLEVEL")
            tableMapping.ColumnMappings.Add("NTIMES", "NTIMES")
            tableMapping.ColumnMappings.Add("NOCCNO", "NOCCNO")
            tableMapping.ColumnMappings.Add("DATATYPE", "DATATYPE")
            tableMapping.ColumnMappings.Add("NOFFSET", "NOFFSET")
            tableMapping.ColumnMappings.Add("NLENGTH", "NLENGTH")
            tableMapping.ColumnMappings.Add("NSCALE", "NSCALE")
            tableMapping.ColumnMappings.Add("CANNULL", "CANNULL")
            tableMapping.ColumnMappings.Add("ISKEY", "ISKEY")
            tableMapping.ColumnMappings.Add("ORGNAME", "ORGNAME")
            tableMapping.ColumnMappings.Add("DATEFORMAT", "DATEFORMAT")
            tableMapping.ColumnMappings.Add("LABEL", "LABEL")
            tableMapping.ColumnMappings.Add("INITVAL", "INITVAL")
            tableMapping.ColumnMappings.Add("RETYPE", "RETYPE")
            tableMapping.ColumnMappings.Add("INVALID", "INVALID")
            tableMapping.ColumnMappings.Add("EXTTYPE", "EXTTYPE")
            tableMapping.ColumnMappings.Add("IDENTVAL", "IDENTVAL")
            tableMapping.ColumnMappings.Add("FOREIGNKEY", "FOREIGNKEY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DESCRIPTIONFIELDS] WHERE (([PROJECTNAME] = @Original_PROJECTNA"& _ 
                "ME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] ="& _ 
                " @Original_DESCRIPTIONNAME) AND ([FIELDNAME] = @Original_FIELDNAME) AND ((@IsNul"& _ 
                "l_PARENTNAME = 1 AND [PARENTNAME] IS NULL) OR ([PARENTNAME] = @Original_PARENTNA"& _ 
                "ME)) AND ((@IsNull_SEQNO = 1 AND [SEQNO] IS NULL) OR ([SEQNO] = @Original_SEQNO)"& _ 
                ") AND ((@IsNull_DESCFIELDDESCRIPTION = 1 AND [DESCFIELDDESCRIPTION] IS NULL) OR "& _ 
                "([DESCFIELDDESCRIPTION] = @Original_DESCFIELDDESCRIPTION)) AND ((@IsNull_NCHILDR"& _ 
                "EN = 1 AND [NCHILDREN] IS NULL) OR ([NCHILDREN] = @Original_NCHILDREN)) AND ((@I"& _ 
                "sNull_NLEVEL = 1 AND [NLEVEL] IS NULL) OR ([NLEVEL] = @Original_NLEVEL)) AND ((@"& _ 
                "IsNull_NTIMES = 1 AND [NTIMES] IS NULL) OR ([NTIMES] = @Original_NTIMES)) AND (("& _ 
                "@IsNull_NOCCNO = 1 AND [NOCCNO] IS NULL) OR ([NOCCNO] = @Original_NOCCNO)) AND ("& _ 
                "(@IsNull_DATATYPE = 1 AND [DATATYPE] IS NULL) OR ([DATATYPE] = @Original_DATATYP"& _ 
                "E)) AND ((@IsNull_NOFFSET = 1 AND [NOFFSET] IS NULL) OR ([NOFFSET] = @Original_N"& _ 
                "OFFSET)) AND ((@IsNull_NLENGTH = 1 AND [NLENGTH] IS NULL) OR ([NLENGTH] = @Origi"& _ 
                "nal_NLENGTH)) AND ((@IsNull_NSCALE = 1 AND [NSCALE] IS NULL) OR ([NSCALE] = @Ori"& _ 
                "ginal_NSCALE)) AND ((@IsNull_CANNULL = 1 AND [CANNULL] IS NULL) OR ([CANNULL] = "& _ 
                "@Original_CANNULL)) AND ((@IsNull_ISKEY = 1 AND [ISKEY] IS NULL) OR ([ISKEY] = @"& _ 
                "Original_ISKEY)) AND ((@IsNull_ORGNAME = 1 AND [ORGNAME] IS NULL) OR ([ORGNAME] "& _ 
                "= @Original_ORGNAME)) AND ((@IsNull_DATEFORMAT = 1 AND [DATEFORMAT] IS NULL) OR "& _ 
                "([DATEFORMAT] = @Original_DATEFORMAT)) AND ((@IsNull_LABEL = 1 AND [LABEL] IS NU"& _ 
                "LL) OR ([LABEL] = @Original_LABEL)) AND ((@IsNull_INITVAL = 1 AND [INITVAL] IS N"& _ 
                "ULL) OR ([INITVAL] = @Original_INITVAL)) AND ((@IsNull_RETYPE = 1 AND [RETYPE] I"& _ 
                "S NULL) OR ([RETYPE] = @Original_RETYPE)) AND ((@IsNull_INVALID = 1 AND [INVALID"& _ 
                "] IS NULL) OR ([INVALID] = @Original_INVALID)) AND ((@IsNull_EXTTYPE = 1 AND [EX"& _ 
                "TTYPE] IS NULL) OR ([EXTTYPE] = @Original_EXTTYPE)) AND ((@IsNull_IDENTVAL = 1 A"& _ 
                "ND [IDENTVAL] IS NULL) OR ([IDENTVAL] = @Original_IDENTVAL)) AND ((@IsNull_FOREI"& _ 
                "GNKEY = 1 AND [FOREIGNKEY] IS NULL) OR ([FOREIGNKEY] = @Original_FOREIGNKEY)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENTNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATATYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANNULL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORGNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATEFORMAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LABEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INITVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EXTTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IDENTVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOREIGNKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DESCRIPTIONFIELDS] ([PROJECTNAME], [ENVIRONMENTNAME], [DESCRIP"& _ 
                "TIONNAME], [FIELDNAME], [PARENTNAME], [SEQNO], [DESCFIELDDESCRIPTION], [NCHILDRE"& _ 
                "N], [NLEVEL], [NTIMES], [NOCCNO], [DATATYPE], [NOFFSET], [NLENGTH], [NSCALE], [C"& _ 
                "ANNULL], [ISKEY], [ORGNAME], [DATEFORMAT], [LABEL], [INITVAL], [RETYPE], [INVALI"& _ 
                "D], [EXTTYPE], [IDENTVAL], [FOREIGNKEY]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME,"& _ 
                " @DESCRIPTIONNAME, @FIELDNAME, @PARENTNAME, @SEQNO, @DESCFIELDDESCRIPTION, @NCHI"& _ 
                "LDREN, @NLEVEL, @NTIMES, @NOCCNO, @DATATYPE, @NOFFSET, @NLENGTH, @NSCALE, @CANNU"& _ 
                "LL, @ISKEY, @ORGNAME, @DATEFORMAT, @LABEL, @INITVAL, @RETYPE, @INVALID, @EXTTYPE"& _ 
                ", @IDENTVAL, @FOREIGNKEY);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME"& _ 
                ", FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES,"& _ 
                " NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT"& _ 
                ", LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY FROM DESCRIPTIO"& _ 
                "NFIELDS WHERE (DESCRIPTIONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = @ENVIR"& _ 
                "ONMENTNAME) AND (FIELDNAME = @FIELDNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DESCRIPTIONFIELDS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNA"& _ 
                "ME] = @ENVIRONMENTNAME, [DESCRIPTIONNAME] = @DESCRIPTIONNAME, [FIELDNAME] = @FIE"& _ 
                "LDNAME, [PARENTNAME] = @PARENTNAME, [SEQNO] = @SEQNO, [DESCFIELDDESCRIPTION] = @"& _ 
                "DESCFIELDDESCRIPTION, [NCHILDREN] = @NCHILDREN, [NLEVEL] = @NLEVEL, [NTIMES] = @"& _ 
                "NTIMES, [NOCCNO] = @NOCCNO, [DATATYPE] = @DATATYPE, [NOFFSET] = @NOFFSET, [NLENG"& _ 
                "TH] = @NLENGTH, [NSCALE] = @NSCALE, [CANNULL] = @CANNULL, [ISKEY] = @ISKEY, [ORG"& _ 
                "NAME] = @ORGNAME, [DATEFORMAT] = @DATEFORMAT, [LABEL] = @LABEL, [INITVAL] = @INI"& _ 
                "TVAL, [RETYPE] = @RETYPE, [INVALID] = @INVALID, [EXTTYPE] = @EXTTYPE, [IDENTVAL]"& _ 
                " = @IDENTVAL, [FOREIGNKEY] = @FOREIGNKEY WHERE (([PROJECTNAME] = @Original_PROJE"& _ 
                "CTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAM"& _ 
                "E] = @Original_DESCRIPTIONNAME) AND ([FIELDNAME] = @Original_FIELDNAME) AND ((@I"& _ 
                "sNull_PARENTNAME = 1 AND [PARENTNAME] IS NULL) OR ([PARENTNAME] = @Original_PARE"& _ 
                "NTNAME)) AND ((@IsNull_SEQNO = 1 AND [SEQNO] IS NULL) OR ([SEQNO] = @Original_SE"& _ 
                "QNO)) AND ((@IsNull_DESCFIELDDESCRIPTION = 1 AND [DESCFIELDDESCRIPTION] IS NULL)"& _ 
                " OR ([DESCFIELDDESCRIPTION] = @Original_DESCFIELDDESCRIPTION)) AND ((@IsNull_NCH"& _ 
                "ILDREN = 1 AND [NCHILDREN] IS NULL) OR ([NCHILDREN] = @Original_NCHILDREN)) AND "& _ 
                "((@IsNull_NLEVEL = 1 AND [NLEVEL] IS NULL) OR ([NLEVEL] = @Original_NLEVEL)) AND"& _ 
                " ((@IsNull_NTIMES = 1 AND [NTIMES] IS NULL) OR ([NTIMES] = @Original_NTIMES)) AN"& _ 
                "D ((@IsNull_NOCCNO = 1 AND [NOCCNO] IS NULL) OR ([NOCCNO] = @Original_NOCCNO)) A"& _ 
                "ND ((@IsNull_DATATYPE = 1 AND [DATATYPE] IS NULL) OR ([DATATYPE] = @Original_DAT"& _ 
                "ATYPE)) AND ((@IsNull_NOFFSET = 1 AND [NOFFSET] IS NULL) OR ([NOFFSET] = @Origin"& _ 
                "al_NOFFSET)) AND ((@IsNull_NLENGTH = 1 AND [NLENGTH] IS NULL) OR ([NLENGTH] = @O"& _ 
                "riginal_NLENGTH)) AND ((@IsNull_NSCALE = 1 AND [NSCALE] IS NULL) OR ([NSCALE] = "& _ 
                "@Original_NSCALE)) AND ((@IsNull_CANNULL = 1 AND [CANNULL] IS NULL) OR ([CANNULL"& _ 
                "] = @Original_CANNULL)) AND ((@IsNull_ISKEY = 1 AND [ISKEY] IS NULL) OR ([ISKEY]"& _ 
                " = @Original_ISKEY)) AND ((@IsNull_ORGNAME = 1 AND [ORGNAME] IS NULL) OR ([ORGNA"& _ 
                "ME] = @Original_ORGNAME)) AND ((@IsNull_DATEFORMAT = 1 AND [DATEFORMAT] IS NULL)"& _ 
                " OR ([DATEFORMAT] = @Original_DATEFORMAT)) AND ((@IsNull_LABEL = 1 AND [LABEL] I"& _ 
                "S NULL) OR ([LABEL] = @Original_LABEL)) AND ((@IsNull_INITVAL = 1 AND [INITVAL] "& _ 
                "IS NULL) OR ([INITVAL] = @Original_INITVAL)) AND ((@IsNull_RETYPE = 1 AND [RETYP"& _ 
                "E] IS NULL) OR ([RETYPE] = @Original_RETYPE)) AND ((@IsNull_INVALID = 1 AND [INV"& _ 
                "ALID] IS NULL) OR ([INVALID] = @Original_INVALID)) AND ((@IsNull_EXTTYPE = 1 AND"& _ 
                " [EXTTYPE] IS NULL) OR ([EXTTYPE] = @Original_EXTTYPE)) AND ((@IsNull_IDENTVAL ="& _ 
                " 1 AND [IDENTVAL] IS NULL) OR ([IDENTVAL] = @Original_IDENTVAL)) AND ((@IsNull_F"& _ 
                "OREIGNKEY = 1 AND [FOREIGNKEY] IS NULL) OR ([FOREIGNKEY] = @Original_FOREIGNKEY)"& _ 
                "));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, FIELDNAME, PARENTNAME"& _ 
                ", SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFF"& _ 
                "SET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYP"& _ 
                "E, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY FROM DESCRIPTIONFIELDS WHERE (DESCRIPT"& _ 
                "IONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (FIELDN"& _ 
                "AME = @FIELDNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENTNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATATYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANNULL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORGNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATEFORMAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LABEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INITVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EXTTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IDENTVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOREIGNKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, FIELDNAME, PARENTNAME, SEQN"& _ 
                "O, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFFSET, N"& _ 
                "LENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYPE, INV"& _ 
                "ALID, EXTTYPE, IDENTVAL, FOREIGNKEY FROM dbo.DESCRIPTIONFIELDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONFIELDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DESCRIPTIONFIELDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DESCRIPTIONFIELDSDataTable = New SQDmetaDataSet.DESCRIPTIONFIELDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONFIELDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DESCRIPTIONFIELDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_FIELDNAME As String,  _
                    ByVal Original_PARENTNAME As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCFIELDDESCRIPTION As String,  _
                    ByVal Original_NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATATYPE As String,  _
                    ByVal Original_NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CANNULL As String,  _
                    ByVal Original_ISKEY As String,  _
                    ByVal Original_ORGNAME As String,  _
                    ByVal Original_DATEFORMAT As String,  _
                    ByVal Original_LABEL As String,  _
                    ByVal Original_INITVAL As String,  _
                    ByVal Original_RETYPE As String,  _
                    ByVal Original_INVALID As String,  _
                    ByVal Original_EXTTYPE As String,  _
                    ByVal Original_IDENTVAL As String,  _
                    ByVal Original_FOREIGNKEY As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIELDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_FIELDNAME,String)
            End If
            If (Original_PARENTNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_PARENTNAME,String)
            End If
            If (Original_SEQNO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_SEQNO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_DESCFIELDDESCRIPTION,String)
            End If
            If (Original_NCHILDREN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_NCHILDREN.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_NLEVEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_NLEVEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_NTIMES.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_NTIMES.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_NOCCNO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_NOCCNO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_DATATYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_DATATYPE,String)
            End If
            If (Original_NOFFSET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_NOFFSET.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_NLENGTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_NLENGTH.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_NSCALE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_NSCALE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_CANNULL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_CANNULL,String)
            End If
            If (Original_ISKEY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_ISKEY,String)
            End If
            If (Original_ORGNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_ORGNAME,String)
            End If
            If (Original_DATEFORMAT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_DATEFORMAT,String)
            End If
            If (Original_LABEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_LABEL,String)
            End If
            If (Original_INITVAL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_INITVAL,String)
            End If
            If (Original_RETYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_RETYPE,String)
            End If
            If (Original_INVALID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_INVALID,String)
            End If
            If (Original_EXTTYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_EXTTYPE,String)
            End If
            If (Original_IDENTVAL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_IDENTVAL,String)
            End If
            If (Original_FOREIGNKEY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_FOREIGNKEY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal FIELDNAME As String,  _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIELDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FIELDNAME,String)
            End If
            If (PARENTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PARENTNAME,String)
            End If
            If (SEQNO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SEQNO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DESCFIELDDESCRIPTION,String)
            End If
            If (NCHILDREN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(NCHILDREN.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (NLEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(NLEVEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NTIMES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NTIMES.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (NOCCNO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(NOCCNO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DATATYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DATATYPE,String)
            End If
            If (NOFFSET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(NOFFSET.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NLENGTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NLENGTH.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (NSCALE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NSCALE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CANNULL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CANNULL,String)
            End If
            If (ISKEY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ISKEY,String)
            End If
            If (ORGNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ORGNAME,String)
            End If
            If (DATEFORMAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(DATEFORMAT,String)
            End If
            If (LABEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(LABEL,String)
            End If
            If (INITVAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(INITVAL,String)
            End If
            If (RETYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(RETYPE,String)
            End If
            If (INVALID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(INVALID,String)
            End If
            If (EXTTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(EXTTYPE,String)
            End If
            If (IDENTVAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(IDENTVAL,String)
            End If
            If (FOREIGNKEY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(FOREIGNKEY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal FIELDNAME As String,  _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_FIELDNAME As String,  _
                    ByVal Original_PARENTNAME As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCFIELDDESCRIPTION As String,  _
                    ByVal Original_NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATATYPE As String,  _
                    ByVal Original_NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CANNULL As String,  _
                    ByVal Original_ISKEY As String,  _
                    ByVal Original_ORGNAME As String,  _
                    ByVal Original_DATEFORMAT As String,  _
                    ByVal Original_LABEL As String,  _
                    ByVal Original_INITVAL As String,  _
                    ByVal Original_RETYPE As String,  _
                    ByVal Original_INVALID As String,  _
                    ByVal Original_EXTTYPE As String,  _
                    ByVal Original_IDENTVAL As String,  _
                    ByVal Original_FOREIGNKEY As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIELDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FIELDNAME,String)
            End If
            If (PARENTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PARENTNAME,String)
            End If
            If (SEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DESCFIELDDESCRIPTION,String)
            End If
            If (NCHILDREN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(NCHILDREN.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (NLEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(NLEVEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (NTIMES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(NTIMES.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (NOCCNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(NOCCNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DATATYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(DATATYPE,String)
            End If
            If (NOFFSET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NOFFSET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NLENGTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NLENGTH.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (NSCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NSCALE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CANNULL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CANNULL,String)
            End If
            If (ISKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ISKEY,String)
            End If
            If (ORGNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ORGNAME,String)
            End If
            If (DATEFORMAT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(DATEFORMAT,String)
            End If
            If (LABEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LABEL,String)
            End If
            If (INITVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(INITVAL,String)
            End If
            If (RETYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(RETYPE,String)
            End If
            If (INVALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(INVALID,String)
            End If
            If (EXTTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(EXTTYPE,String)
            End If
            If (IDENTVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(IDENTVAL,String)
            End If
            If (FOREIGNKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(FOREIGNKEY,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIELDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_FIELDNAME,String)
            End If
            If (Original_PARENTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_PARENTNAME,String)
            End If
            If (Original_SEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_DESCFIELDDESCRIPTION,String)
            End If
            If (Original_NCHILDREN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_NCHILDREN.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_NLEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_NLEVEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_NTIMES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_NTIMES.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_NOCCNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_NOCCNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_DATATYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_DATATYPE,String)
            End If
            If (Original_NOFFSET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_NOFFSET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_NLENGTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_NLENGTH.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_NSCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_NSCALE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_CANNULL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_CANNULL,String)
            End If
            If (Original_ISKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_ISKEY,String)
            End If
            If (Original_ORGNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_ORGNAME,String)
            End If
            If (Original_DATEFORMAT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_DATEFORMAT,String)
            End If
            If (Original_LABEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_LABEL,String)
            End If
            If (Original_INITVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_INITVAL,String)
            End If
            If (Original_RETYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_RETYPE,String)
            End If
            If (Original_INVALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_INVALID,String)
            End If
            If (Original_EXTTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_EXTTYPE,String)
            End If
            If (Original_IDENTVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_IDENTVAL,String)
            End If
            If (Original_FOREIGNKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_FOREIGNKEY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_FIELDNAME As String,  _
                    ByVal Original_PARENTNAME As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCFIELDDESCRIPTION As String,  _
                    ByVal Original_NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATATYPE As String,  _
                    ByVal Original_NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CANNULL As String,  _
                    ByVal Original_ISKEY As String,  _
                    ByVal Original_ORGNAME As String,  _
                    ByVal Original_DATEFORMAT As String,  _
                    ByVal Original_LABEL As String,  _
                    ByVal Original_INITVAL As String,  _
                    ByVal Original_RETYPE As String,  _
                    ByVal Original_INVALID As String,  _
                    ByVal Original_EXTTYPE As String,  _
                    ByVal Original_IDENTVAL As String,  _
                    ByVal Original_FOREIGNKEY As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_FIELDNAME, Original_PARENTNAME, Original_SEQNO, Original_DESCFIELDDESCRIPTION, Original_NCHILDREN, Original_NLEVEL, Original_NTIMES, Original_NOCCNO, Original_DATATYPE, Original_NOFFSET, Original_NLENGTH, Original_NSCALE, Original_CANNULL, Original_ISKEY, Original_ORGNAME, Original_DATEFORMAT, Original_LABEL, Original_INITVAL, Original_RETYPE, Original_INVALID, Original_EXTTYPE, Original_IDENTVAL, Original_FOREIGNKEY)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DESCRIPTIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DESCRIPTIONS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONTYPE", "DESCRIPTIONTYPE")
            tableMapping.ColumnMappings.Add("DESCRIPTIONDESCRIPTION", "DESCRIPTIONDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DESCRIPTIONS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) A"& _ 
                "ND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] = @Ori"& _ 
                "ginal_DESCRIPTIONNAME) AND ((@IsNull_DESCRIPTIONTYPE = 1 AND [DESCRIPTIONTYPE] I"& _ 
                "S NULL) OR ([DESCRIPTIONTYPE] = @Original_DESCRIPTIONTYPE)) AND ((@IsNull_DESCRI"& _ 
                "PTIONDESCRIPTION = 1 AND [DESCRIPTIONDESCRIPTION] IS NULL) OR ([DESCRIPTIONDESCR"& _ 
                "IPTION] = @Original_DESCRIPTIONDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1"& _ 
                " AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TI"& _ 
                "MESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) O"& _ 
                "R ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USE"& _ 
                "R_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATED_USER_ID] = @Original_CREATE"& _ 
                "D_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR "& _ 
                "([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTIONTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTIONDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DESCRIPTIONS] ([PROJECTNAME], [ENVIRONMENTNAME], [DESCRIPTIONN"& _ 
                "AME], [DESCRIPTIONTYPE], [DESCRIPTIONDESCRIPTION], [CREATED_TIMESTAMP], [UPDATED"& _ 
                "_TIMESTAMP], [CREATED_USER_ID], [UPDATED_USER_ID]) VALUES (@PROJECTNAME, @ENVIRO"& _ 
                "NMENTNAME, @DESCRIPTIONNAME, @DESCRIPTIONTYPE, @DESCRIPTIONDESCRIPTION, @CREATED"& _ 
                "_TIMESTAMP, @UPDATED_TIMESTAMP, @CREATED_USER_ID, @UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRO"& _ 
                "JECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONTYPE, DESCRIPTIONDESCRIPT"& _ 
                "ION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM"& _ 
                " DESCRIPTIONS WHERE (DESCRIPTIONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = "& _ 
                "@ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DESCRIPTIONS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] ="& _ 
                " @ENVIRONMENTNAME, [DESCRIPTIONNAME] = @DESCRIPTIONNAME, [DESCRIPTIONTYPE] = @DE"& _ 
                "SCRIPTIONTYPE, [DESCRIPTIONDESCRIPTION] = @DESCRIPTIONDESCRIPTION, [CREATED_TIME"& _ 
                "STAMP] = @CREATED_TIMESTAMP, [UPDATED_TIMESTAMP] = @UPDATED_TIMESTAMP, [CREATED_"& _ 
                "USER_ID] = @CREATED_USER_ID, [UPDATED_USER_ID] = @UPDATED_USER_ID WHERE (([PROJE"& _ 
                "CTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTN"& _ 
                "AME) AND ([DESCRIPTIONNAME] = @Original_DESCRIPTIONNAME) AND ((@IsNull_DESCRIPTI"& _ 
                "ONTYPE = 1 AND [DESCRIPTIONTYPE] IS NULL) OR ([DESCRIPTIONTYPE] = @Original_DESC"& _ 
                "RIPTIONTYPE)) AND ((@IsNull_DESCRIPTIONDESCRIPTION = 1 AND [DESCRIPTIONDESCRIPTI"& _ 
                "ON] IS NULL) OR ([DESCRIPTIONDESCRIPTION] = @Original_DESCRIPTIONDESCRIPTION)) A"& _ 
                "ND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED"& _ 
                "_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 "& _ 
                "AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIM"& _ 
                "ESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([C"& _ 
                "REATED_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 "& _ 
                "AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID"& _ 
                ")));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONTYPE, DES"& _ 
                "CRIPTIONDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDA"& _ 
                "TED_USER_ID FROM DESCRIPTIONS WHERE (DESCRIPTIONNAME = @DESCRIPTIONNAME) AND (EN"& _ 
                "VIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTIONTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTIONDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONTYPE, DESCRIPTIO"& _ 
                "NDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USE"& _ 
                "R_ID FROM dbo.DESCRIPTIONS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DESCRIPTIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DESCRIPTIONSDataTable = New SQDmetaDataSet.DESCRIPTIONSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DESCRIPTIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_DESCRIPTIONTYPE As Global.System.Nullable(Of Integer), ByVal Original_DESCRIPTIONDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_DESCRIPTIONTYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DESCRIPTIONTYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCRIPTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DESCRIPTIONDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal DESCRIPTIONTYPE As Global.System.Nullable(Of Integer), ByVal DESCRIPTIONDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (DESCRIPTIONTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCRIPTIONTYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DESCRIPTIONDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal DESCRIPTIONTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal DESCRIPTIONDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_DESCRIPTIONTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCRIPTIONDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (DESCRIPTIONTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCRIPTIONTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DESCRIPTIONDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_DESCRIPTIONTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DESCRIPTIONTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCRIPTIONDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_DESCRIPTIONDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESCRIPTIONTYPE As Global.System.Nullable(Of Integer), ByVal DESCRIPTIONDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_DESCRIPTIONTYPE As Global.System.Nullable(Of Integer), ByVal Original_DESCRIPTIONDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, DESCRIPTIONTYPE, DESCRIPTIONDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_DESCRIPTIONTYPE, Original_DESCRIPTIONDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DESCRIPTIONSATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DESCRIPTIONSATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONATTRB", "DESCRIPTIONATTRB")
            tableMapping.ColumnMappings.Add("DESCRIPTIONATTRBVALUE", "DESCRIPTIONATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DESCRIPTIONSATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAM"& _ 
                "E) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] = "& _ 
                "@Original_DESCRIPTIONNAME) AND ([DESCRIPTIONATTRB] = @Original_DESCRIPTIONATTRB)"& _ 
                " AND ((@IsNull_DESCRIPTIONATTRBVALUE = 1 AND [DESCRIPTIONATTRBVALUE] IS NULL) OR"& _ 
                " ([DESCRIPTIONATTRBVALUE] = @Original_DESCRIPTIONATTRBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTIONATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DESCRIPTIONSATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [DESCRIPT"& _ 
                "IONNAME], [DESCRIPTIONATTRB], [DESCRIPTIONATTRBVALUE]) VALUES (@PROJECTNAME, @EN"& _ 
                "VIRONMENTNAME, @DESCRIPTIONNAME, @DESCRIPTIONATTRB, @DESCRIPTIONATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONATTRB, DESCRIPTIO"& _ 
                "NATTRBVALUE FROM DESCRIPTIONSATTR WHERE (DESCRIPTIONATTRB = @DESCRIPTIONATTRB) A"& _ 
                "ND (DESCRIPTIONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME)"& _ 
                " AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DESCRIPTIONSATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAM"& _ 
                "E] = @ENVIRONMENTNAME, [DESCRIPTIONNAME] = @DESCRIPTIONNAME, [DESCRIPTIONATTRB] "& _ 
                "= @DESCRIPTIONATTRB, [DESCRIPTIONATTRBVALUE] = @DESCRIPTIONATTRBVALUE WHERE (([P"& _ 
                "ROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONM"& _ 
                "ENTNAME) AND ([DESCRIPTIONNAME] = @Original_DESCRIPTIONNAME) AND ([DESCRIPTIONAT"& _ 
                "TRB] = @Original_DESCRIPTIONATTRB) AND ((@IsNull_DESCRIPTIONATTRBVALUE = 1 AND ["& _ 
                "DESCRIPTIONATTRBVALUE] IS NULL) OR ([DESCRIPTIONATTRBVALUE] = @Original_DESCRIPT"& _ 
                "IONATTRBVALUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIP"& _ 
                "TIONATTRB, DESCRIPTIONATTRBVALUE FROM DESCRIPTIONSATTR WHERE (DESCRIPTIONATTRB ="& _ 
                " @DESCRIPTIONATTRB) AND (DESCRIPTIONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAM"& _ 
                "E = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTIONATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, DESCRIPTIONATTRB, DESCRIPTI"& _ 
                "ONATTRBVALUE FROM dbo.DESCRIPTIONSATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONSATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DESCRIPTIONSATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DESCRIPTIONSATTRDataTable = New SQDmetaDataSet.DESCRIPTIONSATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONSATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DESCRIPTIONSATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_DESCRIPTIONATTRB As String, ByVal Original_DESCRIPTIONATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_DESCRIPTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DESCRIPTIONATTRB,String)
            End If
            If (Original_DESCRIPTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DESCRIPTIONATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal DESCRIPTIONATTRB As String, ByVal DESCRIPTIONATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (DESCRIPTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DESCRIPTIONATTRB,String)
            End If
            If (DESCRIPTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DESCRIPTIONATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal DESCRIPTIONATTRB As String, ByVal DESCRIPTIONATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_DESCRIPTIONATTRB As String, ByVal Original_DESCRIPTIONATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (DESCRIPTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DESCRIPTIONATTRB,String)
            End If
            If (DESCRIPTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DESCRIPTIONATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_DESCRIPTIONATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DESCRIPTIONATTRB,String)
            End If
            If (Original_DESCRIPTIONATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DESCRIPTIONATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DESCRIPTIONATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_DESCRIPTIONATTRB As String, ByVal Original_DESCRIPTIONATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_DESCRIPTIONATTRB, DESCRIPTIONATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_DESCRIPTIONATTRB, Original_DESCRIPTIONATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DESCRIPTIONSELECTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DESCRIPTIONSELECT"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("SELECTIONNAME", "SELECTIONNAME")
            tableMapping.ColumnMappings.Add("ISSYSTEMSEL", "ISSYSTEMSEL")
            tableMapping.ColumnMappings.Add("SELECTDESCRIPTION", "SELECTDESCRIPTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DESCRIPTIONSELECT] WHERE (([PROJECTNAME] = @Original_PROJECTNA"& _ 
                "ME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] ="& _ 
                " @Original_DESCRIPTIONNAME) AND ([SELECTIONNAME] = @Original_SELECTIONNAME) AND "& _ 
                "((@IsNull_ISSYSTEMSEL = 1 AND [ISSYSTEMSEL] IS NULL) OR ([ISSYSTEMSEL] = @Origin"& _ 
                "al_ISSYSTEMSEL)) AND ((@IsNull_SELECTDESCRIPTION = 1 AND [SELECTDESCRIPTION] IS "& _ 
                "NULL) OR ([SELECTDESCRIPTION] = @Original_SELECTDESCRIPTION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISSYSTEMSEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSYSTEMSEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISSYSTEMSEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSYSTEMSEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SELECTDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DESCRIPTIONSELECT] ([PROJECTNAME], [ENVIRONMENTNAME], [DESCRIP"& _ 
                "TIONNAME], [SELECTIONNAME], [ISSYSTEMSEL], [SELECTDESCRIPTION]) VALUES (@PROJECT"& _ 
                "NAME, @ENVIRONMENTNAME, @DESCRIPTIONNAME, @SELECTIONNAME, @ISSYSTEMSEL, @SELECTD"& _ 
                "ESCRIPTION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAM"& _ 
                "E, ISSYSTEMSEL, SELECTDESCRIPTION FROM DESCRIPTIONSELECT WHERE (DESCRIPTIONNAME "& _ 
                "= @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = "& _ 
                "@PROJECTNAME) AND (SELECTIONNAME = @SELECTIONNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISSYSTEMSEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSYSTEMSEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DESCRIPTIONSELECT] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNA"& _ 
                "ME] = @ENVIRONMENTNAME, [DESCRIPTIONNAME] = @DESCRIPTIONNAME, [SELECTIONNAME] = "& _ 
                "@SELECTIONNAME, [ISSYSTEMSEL] = @ISSYSTEMSEL, [SELECTDESCRIPTION] = @SELECTDESCR"& _ 
                "IPTION WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @"& _ 
                "Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] = @Original_DESCRIPTIONNAME) AN"& _ 
                "D ([SELECTIONNAME] = @Original_SELECTIONNAME) AND ((@IsNull_ISSYSTEMSEL = 1 AND "& _ 
                "[ISSYSTEMSEL] IS NULL) OR ([ISSYSTEMSEL] = @Original_ISSYSTEMSEL)) AND ((@IsNull"& _ 
                "_SELECTDESCRIPTION = 1 AND [SELECTDESCRIPTION] IS NULL) OR ([SELECTDESCRIPTION] "& _ 
                "= @Original_SELECTDESCRIPTION)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPT"& _ 
                "IONNAME, SELECTIONNAME, ISSYSTEMSEL, SELECTDESCRIPTION FROM DESCRIPTIONSELECT WH"& _ 
                "ERE (DESCRIPTIONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME"& _ 
                ") AND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONNAME = @SELECTIONNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISSYSTEMSEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSYSTEMSEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISSYSTEMSEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSYSTEMSEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISSYSTEMSEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISSYSTEMSEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SELECTDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME, ISSYSTEMSEL,"& _ 
                " SELECTDESCRIPTION FROM dbo.DESCRIPTIONSELECT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONSELECTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DESCRIPTIONSELECTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DESCRIPTIONSELECTDataTable = New SQDmetaDataSet.DESCRIPTIONSELECTDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DESCRIPTIONSELECTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DESCRIPTIONSELECT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_ISSYSTEMSEL As Global.System.Nullable(Of Integer), ByVal Original_SELECTDESCRIPTION As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_ISSYSTEMSEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ISSYSTEMSEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_SELECTDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_SELECTDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal ISSYSTEMSEL As Global.System.Nullable(Of Integer), ByVal SELECTDESCRIPTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SELECTIONNAME,String)
            End If
            If (ISSYSTEMSEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ISSYSTEMSEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SELECTDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SELECTDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal ISSYSTEMSEL As Global.System.Nullable(Of Integer), ByVal SELECTDESCRIPTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_ISSYSTEMSEL As Global.System.Nullable(Of Integer), ByVal Original_SELECTDESCRIPTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SELECTIONNAME,String)
            End If
            If (ISSYSTEMSEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ISSYSTEMSEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SELECTDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SELECTDESCRIPTION,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_ISSYSTEMSEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ISSYSTEMSEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_SELECTDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SELECTDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ISSYSTEMSEL As Global.System.Nullable(Of Integer), ByVal SELECTDESCRIPTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_ISSYSTEMSEL As Global.System.Nullable(Of Integer), ByVal Original_SELECTDESCRIPTION As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_SELECTIONNAME, ISSYSTEMSEL, SELECTDESCRIPTION, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_SELECTIONNAME, Original_ISSYSTEMSEL, Original_SELECTDESCRIPTION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DESCRIPTSELFIELDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DESCRIPTSELFIELDS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("SELECTIONNAME", "SELECTIONNAME")
            tableMapping.ColumnMappings.Add("FIELDNAME", "FIELDNAME")
            tableMapping.ColumnMappings.Add("SELECTFIELDDESCRIPTION", "SELECTFIELDDESCRIPTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DESCRIPTSELFIELDS] WHERE (([PROJECTNAME] = @Original_PROJECTNA"& _ 
                "ME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] ="& _ 
                " @Original_DESCRIPTIONNAME) AND ([SELECTIONNAME] = @Original_SELECTIONNAME) AND "& _ 
                "([FIELDNAME] = @Original_FIELDNAME) AND ((@IsNull_SELECTFIELDDESCRIPTION = 1 AND"& _ 
                " [SELECTFIELDDESCRIPTION] IS NULL) OR ([SELECTFIELDDESCRIPTION] = @Original_SELE"& _ 
                "CTFIELDDESCRIPTION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SELECTFIELDDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DESCRIPTSELFIELDS] ([PROJECTNAME], [ENVIRONMENTNAME], [DESCRIP"& _ 
                "TIONNAME], [SELECTIONNAME], [FIELDNAME], [SELECTFIELDDESCRIPTION]) VALUES (@PROJ"& _ 
                "ECTNAME, @ENVIRONMENTNAME, @DESCRIPTIONNAME, @SELECTIONNAME, @FIELDNAME, @SELECT"& _ 
                "FIELDDESCRIPTION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECT"& _ 
                "IONNAME, FIELDNAME, SELECTFIELDDESCRIPTION FROM DESCRIPTSELFIELDS WHERE (DESCRIP"& _ 
                "TIONNAME = @DESCRIPTIONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (FIELD"& _ 
                "NAME = @FIELDNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONNAME = @SELECT"& _ 
                "IONNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DESCRIPTSELFIELDS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNA"& _ 
                "ME] = @ENVIRONMENTNAME, [DESCRIPTIONNAME] = @DESCRIPTIONNAME, [SELECTIONNAME] = "& _ 
                "@SELECTIONNAME, [FIELDNAME] = @FIELDNAME, [SELECTFIELDDESCRIPTION] = @SELECTFIEL"& _ 
                "DDESCRIPTION WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAM"& _ 
                "E] = @Original_ENVIRONMENTNAME) AND ([DESCRIPTIONNAME] = @Original_DESCRIPTIONNA"& _ 
                "ME) AND ([SELECTIONNAME] = @Original_SELECTIONNAME) AND ([FIELDNAME] = @Original"& _ 
                "_FIELDNAME) AND ((@IsNull_SELECTFIELDDESCRIPTION = 1 AND [SELECTFIELDDESCRIPTION"& _ 
                "] IS NULL) OR ([SELECTFIELDDESCRIPTION] = @Original_SELECTFIELDDESCRIPTION)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME, FIELDNAME, "& _ 
                "SELECTFIELDDESCRIPTION FROM DESCRIPTSELFIELDS WHERE (DESCRIPTIONNAME = @DESCRIPT"& _ 
                "IONNAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (FIELDNAME = @FIELDNAME) A"& _ 
                "ND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONNAME = @SELECTIONNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SELECTFIELDDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, DESCRIPTIONNAME, SELECTIONNAME, FIELDNAME, S"& _ 
                "ELECTFIELDDESCRIPTION FROM dbo.DESCRIPTSELFIELDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DESCRIPTSELFIELDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DESCRIPTSELFIELDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DESCRIPTSELFIELDSDataTable = New SQDmetaDataSet.DESCRIPTSELFIELDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DESCRIPTSELFIELDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DESCRIPTSELFIELDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_FIELDNAME As String, ByVal Original_SELECTFIELDDESCRIPTION As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIELDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FIELDNAME,String)
            End If
            If (Original_SELECTFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SELECTFIELDDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal FIELDNAME As String, ByVal SELECTFIELDDESCRIPTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SELECTIONNAME,String)
            End If
            If (FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIELDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FIELDNAME,String)
            End If
            If (SELECTFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SELECTFIELDDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal DESCRIPTIONNAME As String, ByVal SELECTIONNAME As String, ByVal FIELDNAME As String, ByVal SELECTFIELDDESCRIPTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_FIELDNAME As String, ByVal Original_SELECTFIELDDESCRIPTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SELECTIONNAME,String)
            End If
            If (FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIELDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FIELDNAME,String)
            End If
            If (SELECTFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SELECTFIELDDESCRIPTION,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIELDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FIELDNAME,String)
            End If
            If (Original_SELECTFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SELECTFIELDDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SELECTFIELDDESCRIPTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_FIELDNAME As String, ByVal Original_SELECTFIELDDESCRIPTION As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_SELECTIONNAME, Original_FIELDNAME, SELECTFIELDDESCRIPTION, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_DESCRIPTIONNAME, Original_SELECTIONNAME, Original_FIELDNAME, Original_SELECTFIELDDESCRIPTION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DSSELECTIONSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DSSELECTIONS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("DATASTORENAME", "DATASTORENAME")
            tableMapping.ColumnMappings.Add("SELECTIONNAME", "SELECTIONNAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("PARENT", "PARENT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DSSELECTIONS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) A"& _ 
                "ND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original"& _ 
                "_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTORENAME] = @O"& _ 
                "riginal_DATASTORENAME) AND ([SELECTIONNAME] = @Original_SELECTIONNAME) AND ([DES"& _ 
                "CRIPTIONNAME] = @Original_DESCRIPTIONNAME) AND ((@IsNull_PARENT = 1 AND [PARENT]"& _ 
                " IS NULL) OR ([PARENT] = @Original_PARENT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DSSELECTIONS] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME],"& _ 
                " [ENGINENAME], [DATASTORENAME], [SELECTIONNAME], [DESCRIPTIONNAME], [PARENT]) VA"& _ 
                "LUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @DATASTORENAME, "& _ 
                "@SELECTIONNAME, @DESCRIPTIONNAME, @PARENT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME"& _ 
                ", SYSTEMNAME, ENGINENAME, DATASTORENAME, SELECTIONNAME, DESCRIPTIONNAME, PARENT "& _ 
                "FROM DSSELECTIONS WHERE (DATASTORENAME = @DATASTORENAME) AND (DESCRIPTIONNAME = "& _ 
                "@DESCRIPTIONNAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRON"& _ 
                "MENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONNAME = @SELECTIONNAME) "& _ 
                "AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DSSELECTIONS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] ="& _ 
                " @ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [DATA"& _ 
                "STORENAME] = @DATASTORENAME, [SELECTIONNAME] = @SELECTIONNAME, [DESCRIPTIONNAME]"& _ 
                " = @DESCRIPTIONNAME, [PARENT] = @PARENT WHERE (([PROJECTNAME] = @Original_PROJEC"& _ 
                "TNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @"& _ 
                "Original_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTORENA"& _ 
                "ME] = @Original_DATASTORENAME) AND ([SELECTIONNAME] = @Original_SELECTIONNAME) A"& _ 
                "ND ([DESCRIPTIONNAME] = @Original_DESCRIPTIONNAME) AND ((@IsNull_PARENT = 1 AND "& _ 
                "[PARENT] IS NULL) OR ([PARENT] = @Original_PARENT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIR"& _ 
                "ONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, SELECTIONNAME, DESCRIPTIONNAM"& _ 
                "E, PARENT FROM DSSELECTIONS WHERE (DATASTORENAME = @DATASTORENAME) AND (DESCRIPT"& _ 
                "IONNAME = @DESCRIPTIONNAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME "& _ 
                "= @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONNAME = @SELEC"& _ 
                "TIONNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, SELEC"& _ 
                "TIONNAME, DESCRIPTIONNAME, PARENT FROM dbo.DSSELECTIONS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DSSELECTIONSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DSSELECTIONSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DSSELECTIONSDataTable = New SQDmetaDataSet.DSSELECTIONSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DSSELECTIONSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DSSELECTIONS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_PARENT As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_PARENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PARENT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal DATASTORENAME As String, ByVal SELECTIONNAME As String, ByVal DESCRIPTIONNAME As String, ByVal PARENT As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SELECTIONNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (PARENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PARENT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal DATASTORENAME As String,  _
                    ByVal SELECTIONNAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal PARENT As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_SELECTIONNAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_PARENT As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SELECTIONNAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (PARENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PARENT,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_PARENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PARENT,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PARENT As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_SELECTIONNAME As String, ByVal Original_DESCRIPTIONNAME As String, ByVal Original_PARENT As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_SELECTIONNAME, Original_DESCRIPTIONNAME, PARENT, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_SELECTIONNAME, Original_DESCRIPTIONNAME, Original_PARENT)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DSSELFIELDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DSSELFIELDS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("DATASTORENAME", "DATASTORENAME")
            tableMapping.ColumnMappings.Add("DESCRIPTIONNAME", "DESCRIPTIONNAME")
            tableMapping.ColumnMappings.Add("SELECTIONNAME", "SELECTIONNAME")
            tableMapping.ColumnMappings.Add("FIELDNAME", "FIELDNAME")
            tableMapping.ColumnMappings.Add("PARENTNAME", "PARENTNAME")
            tableMapping.ColumnMappings.Add("SEQNO", "SEQNO")
            tableMapping.ColumnMappings.Add("DESCFIELDDESCRIPTION", "DESCFIELDDESCRIPTION")
            tableMapping.ColumnMappings.Add("NCHILDREN", "NCHILDREN")
            tableMapping.ColumnMappings.Add("NLEVEL", "NLEVEL")
            tableMapping.ColumnMappings.Add("NTIMES", "NTIMES")
            tableMapping.ColumnMappings.Add("NOCCNO", "NOCCNO")
            tableMapping.ColumnMappings.Add("DATATYPE", "DATATYPE")
            tableMapping.ColumnMappings.Add("NOFFSET", "NOFFSET")
            tableMapping.ColumnMappings.Add("NLENGTH", "NLENGTH")
            tableMapping.ColumnMappings.Add("NSCALE", "NSCALE")
            tableMapping.ColumnMappings.Add("CANNULL", "CANNULL")
            tableMapping.ColumnMappings.Add("ISKEY", "ISKEY")
            tableMapping.ColumnMappings.Add("ORGNAME", "ORGNAME")
            tableMapping.ColumnMappings.Add("DATEFORMAT", "DATEFORMAT")
            tableMapping.ColumnMappings.Add("LABEL", "LABEL")
            tableMapping.ColumnMappings.Add("INITVAL", "INITVAL")
            tableMapping.ColumnMappings.Add("RETYPE", "RETYPE")
            tableMapping.ColumnMappings.Add("INVALID", "INVALID")
            tableMapping.ColumnMappings.Add("EXTTYPE", "EXTTYPE")
            tableMapping.ColumnMappings.Add("IDENTVAL", "IDENTVAL")
            tableMapping.ColumnMappings.Add("FOREIGNKEY", "FOREIGNKEY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DSSELFIELDS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AN"& _ 
                "D ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_"& _ 
                "SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([DATASTORENAME] = @Or"& _ 
                "iginal_DATASTORENAME) AND ([DESCRIPTIONNAME] = @Original_DESCRIPTIONNAME) AND (["& _ 
                "SELECTIONNAME] = @Original_SELECTIONNAME) AND ([FIELDNAME] = @Original_FIELDNAME"& _ 
                ") AND ((@IsNull_PARENTNAME = 1 AND [PARENTNAME] IS NULL) OR ([PARENTNAME] = @Ori"& _ 
                "ginal_PARENTNAME)) AND ((@IsNull_SEQNO = 1 AND [SEQNO] IS NULL) OR ([SEQNO] = @O"& _ 
                "riginal_SEQNO)) AND ((@IsNull_DESCFIELDDESCRIPTION = 1 AND [DESCFIELDDESCRIPTION"& _ 
                "] IS NULL) OR ([DESCFIELDDESCRIPTION] = @Original_DESCFIELDDESCRIPTION)) AND ((@"& _ 
                "IsNull_NCHILDREN = 1 AND [NCHILDREN] IS NULL) OR ([NCHILDREN] = @Original_NCHILD"& _ 
                "REN)) AND ((@IsNull_NLEVEL = 1 AND [NLEVEL] IS NULL) OR ([NLEVEL] = @Original_NL"& _ 
                "EVEL)) AND ((@IsNull_NTIMES = 1 AND [NTIMES] IS NULL) OR ([NTIMES] = @Original_N"& _ 
                "TIMES)) AND ((@IsNull_NOCCNO = 1 AND [NOCCNO] IS NULL) OR ([NOCCNO] = @Original_"& _ 
                "NOCCNO)) AND ((@IsNull_DATATYPE = 1 AND [DATATYPE] IS NULL) OR ([DATATYPE] = @Or"& _ 
                "iginal_DATATYPE)) AND ((@IsNull_NOFFSET = 1 AND [NOFFSET] IS NULL) OR ([NOFFSET]"& _ 
                " = @Original_NOFFSET)) AND ((@IsNull_NLENGTH = 1 AND [NLENGTH] IS NULL) OR ([NLE"& _ 
                "NGTH] = @Original_NLENGTH)) AND ((@IsNull_NSCALE = 1 AND [NSCALE] IS NULL) OR (["& _ 
                "NSCALE] = @Original_NSCALE)) AND ((@IsNull_CANNULL = 1 AND [CANNULL] IS NULL) OR"& _ 
                " ([CANNULL] = @Original_CANNULL)) AND ((@IsNull_ISKEY = 1 AND [ISKEY] IS NULL) O"& _ 
                "R ([ISKEY] = @Original_ISKEY)) AND ((@IsNull_ORGNAME = 1 AND [ORGNAME] IS NULL) "& _ 
                "OR ([ORGNAME] = @Original_ORGNAME)) AND ((@IsNull_DATEFORMAT = 1 AND [DATEFORMAT"& _ 
                "] IS NULL) OR ([DATEFORMAT] = @Original_DATEFORMAT)) AND ((@IsNull_LABEL = 1 AND"& _ 
                " [LABEL] IS NULL) OR ([LABEL] = @Original_LABEL)) AND ((@IsNull_INITVAL = 1 AND "& _ 
                "[INITVAL] IS NULL) OR ([INITVAL] = @Original_INITVAL)) AND ((@IsNull_RETYPE = 1 "& _ 
                "AND [RETYPE] IS NULL) OR ([RETYPE] = @Original_RETYPE)) AND ((@IsNull_INVALID = "& _ 
                "1 AND [INVALID] IS NULL) OR ([INVALID] = @Original_INVALID)) AND ((@IsNull_EXTTY"& _ 
                "PE = 1 AND [EXTTYPE] IS NULL) OR ([EXTTYPE] = @Original_EXTTYPE)) AND ((@IsNull_"& _ 
                "IDENTVAL = 1 AND [IDENTVAL] IS NULL) OR ([IDENTVAL] = @Original_IDENTVAL)) AND ("& _ 
                "(@IsNull_FOREIGNKEY = 1 AND [FOREIGNKEY] IS NULL) OR ([FOREIGNKEY] = @Original_F"& _ 
                "OREIGNKEY)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENTNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATATYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANNULL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORGNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATEFORMAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LABEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INITVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EXTTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IDENTVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOREIGNKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DSSELFIELDS] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], "& _ 
                "[ENGINENAME], [DATASTORENAME], [DESCRIPTIONNAME], [SELECTIONNAME], [FIELDNAME], "& _ 
                "[PARENTNAME], [SEQNO], [DESCFIELDDESCRIPTION], [NCHILDREN], [NLEVEL], [NTIMES], "& _ 
                "[NOCCNO], [DATATYPE], [NOFFSET], [NLENGTH], [NSCALE], [CANNULL], [ISKEY], [ORGNA"& _ 
                "ME], [DATEFORMAT], [LABEL], [INITVAL], [RETYPE], [INVALID], [EXTTYPE], [IDENTVAL"& _ 
                "], [FOREIGNKEY]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAM"& _ 
                "E, @DATASTORENAME, @DESCRIPTIONNAME, @SELECTIONNAME, @FIELDNAME, @PARENTNAME, @S"& _ 
                "EQNO, @DESCFIELDDESCRIPTION, @NCHILDREN, @NLEVEL, @NTIMES, @NOCCNO, @DATATYPE, @"& _ 
                "NOFFSET, @NLENGTH, @NSCALE, @CANNULL, @ISKEY, @ORGNAME, @DATEFORMAT, @LABEL, @IN"& _ 
                "ITVAL, @RETYPE, @INVALID, @EXTTYPE, @IDENTVAL, @FOREIGNKEY);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME"& _ 
                ", ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DESCRIPTIONNAME, SELEC"& _ 
                "TIONNAME, FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL,"& _ 
                " NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DA"& _ 
                "TEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY FROM DS"& _ 
                "SELFIELDS WHERE (DATASTORENAME = @DATASTORENAME) AND (DESCRIPTIONNAME = @DESCRIP"& _ 
                "TIONNAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME"& _ 
                ") AND (FIELDNAME = @FIELDNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONNA"& _ 
                "ME = @SELECTIONNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DSSELFIELDS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = "& _ 
                "@ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [DATAS"& _ 
                "TORENAME] = @DATASTORENAME, [DESCRIPTIONNAME] = @DESCRIPTIONNAME, [SELECTIONNAME"& _ 
                "] = @SELECTIONNAME, [FIELDNAME] = @FIELDNAME, [PARENTNAME] = @PARENTNAME, [SEQNO"& _ 
                "] = @SEQNO, [DESCFIELDDESCRIPTION] = @DESCFIELDDESCRIPTION, [NCHILDREN] = @NCHIL"& _ 
                "DREN, [NLEVEL] = @NLEVEL, [NTIMES] = @NTIMES, [NOCCNO] = @NOCCNO, [DATATYPE] = @"& _ 
                "DATATYPE, [NOFFSET] = @NOFFSET, [NLENGTH] = @NLENGTH, [NSCALE] = @NSCALE, [CANNU"& _ 
                "LL] = @CANNULL, [ISKEY] = @ISKEY, [ORGNAME] = @ORGNAME, [DATEFORMAT] = @DATEFORM"& _ 
                "AT, [LABEL] = @LABEL, [INITVAL] = @INITVAL, [RETYPE] = @RETYPE, [INVALID] = @INV"& _ 
                "ALID, [EXTTYPE] = @EXTTYPE, [IDENTVAL] = @IDENTVAL, [FOREIGNKEY] = @FOREIGNKEY W"& _ 
                "HERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original"& _ 
                "_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEMNAME) AND ([ENGINENAME] = "& _ 
                "@Original_ENGINENAME) AND ([DATASTORENAME] = @Original_DATASTORENAME) AND ([DESC"& _ 
                "RIPTIONNAME] = @Original_DESCRIPTIONNAME) AND ([SELECTIONNAME] = @Original_SELEC"& _ 
                "TIONNAME) AND ([FIELDNAME] = @Original_FIELDNAME) AND ((@IsNull_PARENTNAME = 1 A"& _ 
                "ND [PARENTNAME] IS NULL) OR ([PARENTNAME] = @Original_PARENTNAME)) AND ((@IsNull"& _ 
                "_SEQNO = 1 AND [SEQNO] IS NULL) OR ([SEQNO] = @Original_SEQNO)) AND ((@IsNull_DE"& _ 
                "SCFIELDDESCRIPTION = 1 AND [DESCFIELDDESCRIPTION] IS NULL) OR ([DESCFIELDDESCRIP"& _ 
                "TION] = @Original_DESCFIELDDESCRIPTION)) AND ((@IsNull_NCHILDREN = 1 AND [NCHILD"& _ 
                "REN] IS NULL) OR ([NCHILDREN] = @Original_NCHILDREN)) AND ((@IsNull_NLEVEL = 1 A"& _ 
                "ND [NLEVEL] IS NULL) OR ([NLEVEL] = @Original_NLEVEL)) AND ((@IsNull_NTIMES = 1 "& _ 
                "AND [NTIMES] IS NULL) OR ([NTIMES] = @Original_NTIMES)) AND ((@IsNull_NOCCNO = 1"& _ 
                " AND [NOCCNO] IS NULL) OR ([NOCCNO] = @Original_NOCCNO)) AND ((@IsNull_DATATYPE "& _ 
                "= 1 AND [DATATYPE] IS NULL) OR ([DATATYPE] = @Original_DATATYPE)) AND ((@IsNull_"& _ 
                "NOFFSET = 1 AND [NOFFSET] IS NULL) OR ([NOFFSET] = @Original_NOFFSET)) AND ((@Is"& _ 
                "Null_NLENGTH = 1 AND [NLENGTH] IS NULL) OR ([NLENGTH] = @Original_NLENGTH)) AND "& _ 
                "((@IsNull_NSCALE = 1 AND [NSCALE] IS NULL) OR ([NSCALE] = @Original_NSCALE)) AND"& _ 
                " ((@IsNull_CANNULL = 1 AND [CANNULL] IS NULL) OR ([CANNULL] = @Original_CANNULL)"& _ 
                ") AND ((@IsNull_ISKEY = 1 AND [ISKEY] IS NULL) OR ([ISKEY] = @Original_ISKEY)) A"& _ 
                "ND ((@IsNull_ORGNAME = 1 AND [ORGNAME] IS NULL) OR ([ORGNAME] = @Original_ORGNAM"& _ 
                "E)) AND ((@IsNull_DATEFORMAT = 1 AND [DATEFORMAT] IS NULL) OR ([DATEFORMAT] = @O"& _ 
                "riginal_DATEFORMAT)) AND ((@IsNull_LABEL = 1 AND [LABEL] IS NULL) OR ([LABEL] = "& _ 
                "@Original_LABEL)) AND ((@IsNull_INITVAL = 1 AND [INITVAL] IS NULL) OR ([INITVAL]"& _ 
                " = @Original_INITVAL)) AND ((@IsNull_RETYPE = 1 AND [RETYPE] IS NULL) OR ([RETYP"& _ 
                "E] = @Original_RETYPE)) AND ((@IsNull_INVALID = 1 AND [INVALID] IS NULL) OR ([IN"& _ 
                "VALID] = @Original_INVALID)) AND ((@IsNull_EXTTYPE = 1 AND [EXTTYPE] IS NULL) OR"& _ 
                " ([EXTTYPE] = @Original_EXTTYPE)) AND ((@IsNull_IDENTVAL = 1 AND [IDENTVAL] IS N"& _ 
                "ULL) OR ([IDENTVAL] = @Original_IDENTVAL)) AND ((@IsNull_FOREIGNKEY = 1 AND [FOR"& _ 
                "EIGNKEY] IS NULL) OR ([FOREIGNKEY] = @Original_FOREIGNKEY)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAM"& _ 
                "E, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DESCRIPTIONNAME, SELE"& _ 
                "CTIONNAME, FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL"& _ 
                ", NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, D"& _ 
                "ATEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY FROM D"& _ 
                "SSELFIELDS WHERE (DATASTORENAME = @DATASTORENAME) AND (DESCRIPTIONNAME = @DESCRI"& _ 
                "PTIONNAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAM"& _ 
                "E) AND (FIELDNAME = @FIELDNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SELECTIONN"& _ 
                "AME = @SELECTIONNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SELECTIONNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SELECTIONNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FIELDNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FIELDNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PARENTNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PARENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PARENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCFIELDDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCFIELDDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NCHILDREN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NCHILDREN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLEVEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLEVEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NTIMES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NTIMES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOCCNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOCCNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATATYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATATYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATATYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NOFFSET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NOFFSET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NLENGTH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NLENGTH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NSCALE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NSCALE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CANNULL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CANNULL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CANNULL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORGNAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORGNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORGNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATEFORMAT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATEFORMAT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATEFORMAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LABEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LABEL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LABEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INITVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INITVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INITVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RETYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RETYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVALID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVALID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVALID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EXTTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EXTTYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXTTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IDENTVAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IDENTVAL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IDENTVAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FOREIGNKEY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FOREIGNKEY", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FOREIGNKEY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, DATASTORENAME, DESCR"& _ 
                "IPTIONNAME, SELECTIONNAME, FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, N"& _ 
                "CHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, I"& _ 
                "SKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, F"& _ 
                "OREIGNKEY FROM dbo.DSSELFIELDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.DSSELFIELDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.DSSELFIELDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.DSSELFIELDSDataTable = New SQDmetaDataSet.DSSELFIELDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.DSSELFIELDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DSSELFIELDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_SELECTIONNAME As String,  _
                    ByVal Original_FIELDNAME As String,  _
                    ByVal Original_PARENTNAME As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCFIELDDESCRIPTION As String,  _
                    ByVal Original_NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATATYPE As String,  _
                    ByVal Original_NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CANNULL As String,  _
                    ByVal Original_ISKEY As String,  _
                    ByVal Original_ORGNAME As String,  _
                    ByVal Original_DATEFORMAT As String,  _
                    ByVal Original_LABEL As String,  _
                    ByVal Original_INITVAL As String,  _
                    ByVal Original_RETYPE As String,  _
                    ByVal Original_INVALID As String,  _
                    ByVal Original_EXTTYPE As String,  _
                    ByVal Original_IDENTVAL As String,  _
                    ByVal Original_FOREIGNKEY As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIELDNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_FIELDNAME,String)
            End If
            If (Original_PARENTNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PARENTNAME,String)
            End If
            If (Original_SEQNO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_SEQNO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_DESCFIELDDESCRIPTION,String)
            End If
            If (Original_NCHILDREN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_NCHILDREN.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_NLEVEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_NLEVEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_NTIMES.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_NTIMES.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_NOCCNO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_NOCCNO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_DATATYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_DATATYPE,String)
            End If
            If (Original_NOFFSET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_NOFFSET.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_NLENGTH.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_NLENGTH.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_NSCALE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_NSCALE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_CANNULL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_CANNULL,String)
            End If
            If (Original_ISKEY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_ISKEY,String)
            End If
            If (Original_ORGNAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_ORGNAME,String)
            End If
            If (Original_DATEFORMAT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_DATEFORMAT,String)
            End If
            If (Original_LABEL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_LABEL,String)
            End If
            If (Original_INITVAL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_INITVAL,String)
            End If
            If (Original_RETYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_RETYPE,String)
            End If
            If (Original_INVALID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_INVALID,String)
            End If
            If (Original_EXTTYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_EXTTYPE,String)
            End If
            If (Original_IDENTVAL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_IDENTVAL,String)
            End If
            If (Original_FOREIGNKEY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_FOREIGNKEY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal DATASTORENAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal SELECTIONNAME As String,  _
                    ByVal FIELDNAME As String,  _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SELECTIONNAME,String)
            End If
            If (FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIELDNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(FIELDNAME,String)
            End If
            If (PARENTNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PARENTNAME,String)
            End If
            If (SEQNO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SEQNO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DESCFIELDDESCRIPTION,String)
            End If
            If (NCHILDREN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(NCHILDREN.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (NLEVEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(NLEVEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NTIMES.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(NTIMES.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (NOCCNO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(NOCCNO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DATATYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DATATYPE,String)
            End If
            If (NOFFSET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NOFFSET.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (NLENGTH.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(NLENGTH.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (NSCALE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(NSCALE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (CANNULL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CANNULL,String)
            End If
            If (ISKEY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(ISKEY,String)
            End If
            If (ORGNAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(ORGNAME,String)
            End If
            If (DATEFORMAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(DATEFORMAT,String)
            End If
            If (LABEL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(LABEL,String)
            End If
            If (INITVAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(INITVAL,String)
            End If
            If (RETYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(RETYPE,String)
            End If
            If (INVALID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(INVALID,String)
            End If
            If (EXTTYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(EXTTYPE,String)
            End If
            If (IDENTVAL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(IDENTVAL,String)
            End If
            If (FOREIGNKEY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(FOREIGNKEY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal DATASTORENAME As String,  _
                    ByVal DESCRIPTIONNAME As String,  _
                    ByVal SELECTIONNAME As String,  _
                    ByVal FIELDNAME As String,  _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_SELECTIONNAME As String,  _
                    ByVal Original_FIELDNAME As String,  _
                    ByVal Original_PARENTNAME As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCFIELDDESCRIPTION As String,  _
                    ByVal Original_NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATATYPE As String,  _
                    ByVal Original_NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CANNULL As String,  _
                    ByVal Original_ISKEY As String,  _
                    ByVal Original_ORGNAME As String,  _
                    ByVal Original_DATEFORMAT As String,  _
                    ByVal Original_LABEL As String,  _
                    ByVal Original_INITVAL As String,  _
                    ByVal Original_RETYPE As String,  _
                    ByVal Original_INVALID As String,  _
                    ByVal Original_EXTTYPE As String,  _
                    ByVal Original_IDENTVAL As String,  _
                    ByVal Original_FOREIGNKEY As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DATASTORENAME,String)
            End If
            If (DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DESCRIPTIONNAME,String)
            End If
            If (SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SELECTIONNAME,String)
            End If
            If (FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FIELDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(FIELDNAME,String)
            End If
            If (PARENTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PARENTNAME,String)
            End If
            If (SEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DESCFIELDDESCRIPTION,String)
            End If
            If (NCHILDREN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(NCHILDREN.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (NLEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NLEVEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (NTIMES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(NTIMES.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (NOCCNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(NOCCNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DATATYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(DATATYPE,String)
            End If
            If (NOFFSET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NOFFSET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (NLENGTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(NLENGTH.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (NSCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(NSCALE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (CANNULL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CANNULL,String)
            End If
            If (ISKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ISKEY,String)
            End If
            If (ORGNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(ORGNAME,String)
            End If
            If (DATEFORMAT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(DATEFORMAT,String)
            End If
            If (LABEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(LABEL,String)
            End If
            If (INITVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(INITVAL,String)
            End If
            If (RETYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(RETYPE,String)
            End If
            If (INVALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(INVALID,String)
            End If
            If (EXTTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(EXTTYPE,String)
            End If
            If (IDENTVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(IDENTVAL,String)
            End If
            If (FOREIGNKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(FOREIGNKEY,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_DESCRIPTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DESCRIPTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_DESCRIPTIONNAME,String)
            End If
            If (Original_SELECTIONNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SELECTIONNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_SELECTIONNAME,String)
            End If
            If (Original_FIELDNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FIELDNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_FIELDNAME,String)
            End If
            If (Original_PARENTNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_PARENTNAME,String)
            End If
            If (Original_SEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_SEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCFIELDDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_DESCFIELDDESCRIPTION,String)
            End If
            If (Original_NCHILDREN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_NCHILDREN.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_NLEVEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_NLEVEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_NTIMES.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_NTIMES.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_NOCCNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_NOCCNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_DATATYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_DATATYPE,String)
            End If
            If (Original_NOFFSET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_NOFFSET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_NLENGTH.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_NLENGTH.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_NSCALE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_NSCALE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_CANNULL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_CANNULL,String)
            End If
            If (Original_ISKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_ISKEY,String)
            End If
            If (Original_ORGNAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_ORGNAME,String)
            End If
            If (Original_DATEFORMAT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_DATEFORMAT,String)
            End If
            If (Original_LABEL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_LABEL,String)
            End If
            If (Original_INITVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_INITVAL,String)
            End If
            If (Original_RETYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_RETYPE,String)
            End If
            If (Original_INVALID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_INVALID,String)
            End If
            If (Original_EXTTYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_EXTTYPE,String)
            End If
            If (Original_IDENTVAL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_IDENTVAL,String)
            End If
            If (Original_FOREIGNKEY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_FOREIGNKEY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PARENTNAME As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal DESCFIELDDESCRIPTION As String,  _
                    ByVal NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal DATATYPE As String,  _
                    ByVal NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal CANNULL As String,  _
                    ByVal ISKEY As String,  _
                    ByVal ORGNAME As String,  _
                    ByVal DATEFORMAT As String,  _
                    ByVal LABEL As String,  _
                    ByVal INITVAL As String,  _
                    ByVal RETYPE As String,  _
                    ByVal INVALID As String,  _
                    ByVal EXTTYPE As String,  _
                    ByVal IDENTVAL As String,  _
                    ByVal FOREIGNKEY As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_DESCRIPTIONNAME As String,  _
                    ByVal Original_SELECTIONNAME As String,  _
                    ByVal Original_FIELDNAME As String,  _
                    ByVal Original_PARENTNAME As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DESCFIELDDESCRIPTION As String,  _
                    ByVal Original_NCHILDREN As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLEVEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NTIMES As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NOCCNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATATYPE As String,  _
                    ByVal Original_NOFFSET As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NLENGTH As Global.System.Nullable(Of Integer),  _
                    ByVal Original_NSCALE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CANNULL As String,  _
                    ByVal Original_ISKEY As String,  _
                    ByVal Original_ORGNAME As String,  _
                    ByVal Original_DATEFORMAT As String,  _
                    ByVal Original_LABEL As String,  _
                    ByVal Original_INITVAL As String,  _
                    ByVal Original_RETYPE As String,  _
                    ByVal Original_INVALID As String,  _
                    ByVal Original_EXTTYPE As String,  _
                    ByVal Original_IDENTVAL As String,  _
                    ByVal Original_FOREIGNKEY As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_DESCRIPTIONNAME, Original_SELECTIONNAME, Original_FIELDNAME, PARENTNAME, SEQNO, DESCFIELDDESCRIPTION, NCHILDREN, NLEVEL, NTIMES, NOCCNO, DATATYPE, NOFFSET, NLENGTH, NSCALE, CANNULL, ISKEY, ORGNAME, DATEFORMAT, LABEL, INITVAL, RETYPE, INVALID, EXTTYPE, IDENTVAL, FOREIGNKEY, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_DATASTORENAME, Original_DESCRIPTIONNAME, Original_SELECTIONNAME, Original_FIELDNAME, Original_PARENTNAME, Original_SEQNO, Original_DESCFIELDDESCRIPTION, Original_NCHILDREN, Original_NLEVEL, Original_NTIMES, Original_NOCCNO, Original_DATATYPE, Original_NOFFSET, Original_NLENGTH, Original_NSCALE, Original_CANNULL, Original_ISKEY, Original_ORGNAME, Original_DATEFORMAT, Original_LABEL, Original_INITVAL, Original_RETYPE, Original_INVALID, Original_EXTTYPE, Original_IDENTVAL, Original_FOREIGNKEY)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENGINESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENGINES"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("ENGINEDESCRIPTION", "ENGINEDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ENGINES] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND (["& _ 
                "ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYST"& _ 
                "EMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ((@IsNull_ENGINEDESCRIPTIO"& _ 
                "N = 1 AND [ENGINEDESCRIPTION] IS NULL) OR ([ENGINEDESCRIPTION] = @Original_ENGIN"& _ 
                "EDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NU"& _ 
                "LL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATE"& _ 
                "D_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Orig"& _ 
                "inal_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID]"& _ 
                " IS NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDA"& _ 
                "TED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original"& _ 
                "_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENGINEDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ENGINES] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], [ENG"& _ 
                "INENAME], [ENGINEDESCRIPTION], [CREATED_TIMESTAMP], [UPDATED_TIMESTAMP], [CREATE"& _ 
                "D_USER_ID], [UPDATED_USER_ID]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNA"& _ 
                "ME, @ENGINENAME, @ENGINEDESCRIPTION, @CREATED_TIMESTAMP, @UPDATED_TIMESTAMP, @CR"& _ 
                "EATED_USER_ID, @UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNA"& _ 
                "ME, ENGINENAME, ENGINEDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED"& _ 
                "_USER_ID, UPDATED_USER_ID FROM ENGINES WHERE (ENGINENAME = @ENGINENAME) AND (ENV"& _ 
                "IRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAM"& _ 
                "E = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ENGINES] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @ENV"& _ 
                "IRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [ENGINEDES"& _ 
                "CRIPTION] = @ENGINEDESCRIPTION, [CREATED_TIMESTAMP] = @CREATED_TIMESTAMP, [UPDAT"& _ 
                "ED_TIMESTAMP] = @UPDATED_TIMESTAMP, [CREATED_USER_ID] = @CREATED_USER_ID, [UPDAT"& _ 
                "ED_USER_ID] = @UPDATED_USER_ID WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AN"& _ 
                "D ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_"& _ 
                "SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ((@IsNull_ENGINEDESCRI"& _ 
                "PTION = 1 AND [ENGINEDESCRIPTION] IS NULL) OR ([ENGINEDESCRIPTION] = @Original_E"& _ 
                "NGINEDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] I"& _ 
                "S NULL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UP"& _ 
                "DATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @"& _ 
                "Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER"& _ 
                "_ID] IS NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_"& _ 
                "UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Orig"& _ 
                "inal_UPDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGIN"& _ 
                "ENAME, ENGINEDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID,"& _ 
                " UPDATED_USER_ID FROM ENGINES WHERE (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTN"& _ 
                "AME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYST"& _ 
                "EMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENGINEDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGINEDESCRIPTION, C"& _ 
                "REATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM dbo.E"& _ 
                "NGINES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.ENGINESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.ENGINESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.ENGINESDataTable = New SQDmetaDataSet.ENGINESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.ENGINESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ENGINES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_ENGINEDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_ENGINEDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ENGINEDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal ENGINEDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (ENGINEDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ENGINEDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal ENGINEDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_ENGINEDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (ENGINEDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ENGINEDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_ENGINEDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ENGINEDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINEDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_ENGINEDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, ENGINEDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_ENGINEDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENGINESATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENGINESATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("ENGINEATTRB", "ENGINEATTRB")
            tableMapping.ColumnMappings.Add("ENGINEATTRBVALUE", "ENGINEATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ENGINESATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AN"& _ 
                "D ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_"& _ 
                "SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([ENGINEATTRB] = @Orig"& _ 
                "inal_ENGINEATTRB) AND ((@IsNull_ENGINEATTRBVALUE = 1 AND [ENGINEATTRBVALUE] IS N"& _ 
                "ULL) OR ([ENGINEATTRBVALUE] = @Original_ENGINEATTRBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENGINEATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ENGINESATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], "& _ 
                "[ENGINENAME], [ENGINEATTRB], [ENGINEATTRBVALUE]) VALUES (@PROJECTNAME, @ENVIRONM"& _ 
                "ENTNAME, @SYSTEMNAME, @ENGINENAME, @ENGINEATTRB, @ENGINEATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRO"& _ 
                "JECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGINEATTRB, ENGINEATTRBVALUE"& _ 
                " FROM ENGINESATTR WHERE (ENGINEATTRB = @ENGINEATTRB) AND (ENGINENAME = @ENGINENA"& _ 
                "ME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AN"& _ 
                "D (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ENGINESATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = "& _ 
                "@ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [ENGIN"& _ 
                "EATTRB] = @ENGINEATTRB, [ENGINEATTRBVALUE] = @ENGINEATTRBVALUE WHERE (([PROJECTN"& _ 
                "AME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME"& _ 
                ") AND ([SYSTEMNAME] = @Original_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINE"& _ 
                "NAME) AND ([ENGINEATTRB] = @Original_ENGINEATTRB) AND ((@IsNull_ENGINEATTRBVALUE"& _ 
                " = 1 AND [ENGINEATTRBVALUE] IS NULL) OR ([ENGINEATTRBVALUE] = @Original_ENGINEAT"& _ 
                "TRBVALUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGIN"& _ 
                "EATTRB, ENGINEATTRBVALUE FROM ENGINESATTR WHERE (ENGINEATTRB = @ENGINEATTRB) AND"& _ 
                " (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJEC"& _ 
                "TNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENGINEATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINEATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, ENGINEATTRB, ENGINEA"& _ 
                "TTRBVALUE FROM dbo.ENGINESATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.ENGINESATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.ENGINESATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.ENGINESATTRDataTable = New SQDmetaDataSet.ENGINESATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.ENGINESATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ENGINESATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_ENGINEATTRB As String, ByVal Original_ENGINEATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_ENGINEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINEATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ENGINEATTRB,String)
            End If
            If (Original_ENGINEATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ENGINEATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal ENGINEATTRB As String, ByVal ENGINEATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (ENGINEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINEATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ENGINEATTRB,String)
            End If
            If (ENGINEATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ENGINEATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal ENGINEATTRB As String, ByVal ENGINEATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_ENGINEATTRB As String, ByVal Original_ENGINEATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (ENGINEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINEATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ENGINEATTRB,String)
            End If
            If (ENGINEATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ENGINEATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_ENGINEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINEATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENGINEATTRB,String)
            End If
            If (Original_ENGINEATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ENGINEATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENGINEATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_ENGINEATTRB As String, ByVal Original_ENGINEATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_ENGINEATTRB, ENGINEATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_ENGINEATTRB, Original_ENGINEATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENVIRONMENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENVIRONMENTS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTDESCRIPTION", "ENVIRONMENTDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ENVIRONMENTS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) A"& _ 
                "ND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ((@IsNull_ENVIRONMENTDESC"& _ 
                "RIPTION = 1 AND [ENVIRONMENTDESCRIPTION] IS NULL) OR ([ENVIRONMENTDESCRIPTION] ="& _ 
                " @Original_ENVIRONMENTDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CRE"& _ 
                "ATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP))"& _ 
                " AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDAT"& _ 
                "ED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 "& _ 
                "AND [CREATED_USER_ID] IS NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID"& _ 
                ")) AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED"& _ 
                "_USER_ID] = @Original_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENVIRONMENTDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ENVIRONMENTS] ([PROJECTNAME], [ENVIRONMENTNAME], [ENVIRONMENTD"& _ 
                "ESCRIPTION], [CREATED_TIMESTAMP], [UPDATED_TIMESTAMP], [CREATED_USER_ID], [UPDAT"& _ 
                "ED_USER_ID]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @ENVIRONMENTDESCRIPTION, @C"& _ 
                "REATED_TIMESTAMP, @UPDATED_TIMESTAMP, @CREATED_USER_ID, @UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTDESCRIPTION, CREATED_TIMESTAMP, UPDA"& _ 
                "TED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM ENVIRONMENTS WHERE (ENVIRON"& _ 
                "MENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ENVIRONMENTS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] ="& _ 
                " @ENVIRONMENTNAME, [ENVIRONMENTDESCRIPTION] = @ENVIRONMENTDESCRIPTION, [CREATED_"& _ 
                "TIMESTAMP] = @CREATED_TIMESTAMP, [UPDATED_TIMESTAMP] = @UPDATED_TIMESTAMP, [CREA"& _ 
                "TED_USER_ID] = @CREATED_USER_ID, [UPDATED_USER_ID] = @UPDATED_USER_ID WHERE (([P"& _ 
                "ROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONM"& _ 
                "ENTNAME) AND ((@IsNull_ENVIRONMENTDESCRIPTION = 1 AND [ENVIRONMENTDESCRIPTION] I"& _ 
                "S NULL) OR ([ENVIRONMENTDESCRIPTION] = @Original_ENVIRONMENTDESCRIPTION)) AND (("& _ 
                "@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIME"& _ 
                "STAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND ["& _ 
                "UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAM"& _ 
                "P)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATE"& _ 
                "D_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND ["& _ 
                "UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTDESCRIPTION, CREATED_TIMESTAMP,"& _ 
                " UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM ENVIRONMENTS WHERE (EN"& _ 
                "VIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENVIRONMENTDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTDESCRIPTION, CREATED_TIMESTAMP, U"& _ 
                "PDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM dbo.ENVIRONMENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.ENVIRONMENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.ENVIRONMENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.ENVIRONMENTSDataTable = New SQDmetaDataSet.ENVIRONMENTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.ENVIRONMENTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ENVIRONMENTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_ENVIRONMENTDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_ENVIRONMENTDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENVIRONMENTDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (ENVIRONMENTDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ENVIRONMENTDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_ENVIRONMENTDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (ENVIRONMENTDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ENVIRONMENTDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_ENVIRONMENTDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENVIRONMENTDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENVIRONMENTDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_ENVIRONMENTDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, ENVIRONMENTDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_ENVIRONMENTDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ENVIRONMENTSATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ENVIRONMENTSATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTATTRB", "ENVIRONMENTATTRB")
            tableMapping.ColumnMappings.Add("ENVIRONMENTATTRBVALUE", "ENVIRONMENTATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ENVIRONMENTSATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAM"& _ 
                "E) AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([ENVIRONMENTATTRB] ="& _ 
                " @Original_ENVIRONMENTATTRB) AND ((@IsNull_ENVIRONMENTATTRBVALUE = 1 AND [ENVIRO"& _ 
                "NMENTATTRBVALUE] IS NULL) OR ([ENVIRONMENTATTRBVALUE] = @Original_ENVIRONMENTATT"& _ 
                "RBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENVIRONMENTATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ENVIRONMENTSATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [ENVIRONM"& _ 
                "ENTATTRB], [ENVIRONMENTATTRBVALUE]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @ENV"& _ 
                "IRONMENTATTRB, @ENVIRONMENTATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, EN"& _ 
                "VIRONMENTATTRB, ENVIRONMENTATTRBVALUE FROM ENVIRONMENTSATTR WHERE (ENVIRONMENTAT"& _ 
                "TRB = @ENVIRONMENTATTRB) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNA"& _ 
                "ME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ENVIRONMENTSATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAM"& _ 
                "E] = @ENVIRONMENTNAME, [ENVIRONMENTATTRB] = @ENVIRONMENTATTRB, [ENVIRONMENTATTRB"& _ 
                "VALUE] = @ENVIRONMENTATTRBVALUE WHERE (([PROJECTNAME] = @Original_PROJECTNAME) A"& _ 
                "ND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([ENVIRONMENTATTRB] = @Or"& _ 
                "iginal_ENVIRONMENTATTRB) AND ((@IsNull_ENVIRONMENTATTRBVALUE = 1 AND [ENVIRONMEN"& _ 
                "TATTRBVALUE] IS NULL) OR ([ENVIRONMENTATTRBVALUE] = @Original_ENVIRONMENTATTRBVA"& _ 
                "LUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTATTRB, ENVIRONMENTATTRB"& _ 
                "VALUE FROM ENVIRONMENTSATTR WHERE (ENVIRONMENTATTRB = @ENVIRONMENTATTRB) AND (EN"& _ 
                "VIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ENVIRONMENTATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, ENVIRONMENTATTRB, ENVIRONMENTATTRBVALUE FROM"& _ 
                " dbo.ENVIRONMENTSATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.ENVIRONMENTSATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.ENVIRONMENTSATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.ENVIRONMENTSATTRDataTable = New SQDmetaDataSet.ENVIRONMENTSATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.ENVIRONMENTSATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ENVIRONMENTSATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_ENVIRONMENTATTRB As String, ByVal Original_ENVIRONMENTATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_ENVIRONMENTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ENVIRONMENTATTRB,String)
            End If
            If (Original_ENVIRONMENTATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ENVIRONMENTATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTATTRB As String, ByVal ENVIRONMENTATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (ENVIRONMENTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ENVIRONMENTATTRB,String)
            End If
            If (ENVIRONMENTATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENVIRONMENTATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal ENVIRONMENTATTRB As String, ByVal ENVIRONMENTATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_ENVIRONMENTATTRB As String, ByVal Original_ENVIRONMENTATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (ENVIRONMENTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ENVIRONMENTATTRB,String)
            End If
            If (ENVIRONMENTATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENVIRONMENTATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_ENVIRONMENTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ENVIRONMENTATTRB,String)
            End If
            If (Original_ENVIRONMENTATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ENVIRONMENTATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ENVIRONMENTATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_ENVIRONMENTATTRB As String, ByVal Original_ENVIRONMENTATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_ENVIRONMENTATTRB, ENVIRONMENTATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_ENVIRONMENTATTRB, Original_ENVIRONMENTATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROJECTATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROJECTATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("PROJECTATTRB", "PROJECTATTRB")
            tableMapping.ColumnMappings.Add("PROJECTATTRBVALUE", "PROJECTATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PROJECTATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AN"& _ 
                "D ([PROJECTATTRB] = @Original_PROJECTATTRB) AND ((@IsNull_PROJECTATTRBVALUE = 1 "& _ 
                "AND [PROJECTATTRBVALUE] IS NULL) OR ([PROJECTATTRBVALUE] = @Original_PROJECTATTR"& _ 
                "BVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROJECTATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROJECTATTR] ([PROJECTNAME], [PROJECTATTRB], [PROJECTATTRBVALU"& _ 
                "E]) VALUES (@PROJECTNAME, @PROJECTATTRB, @PROJECTATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAM"& _ 
                "E, PROJECTATTRB, PROJECTATTRBVALUE FROM PROJECTATTR WHERE (PROJECTATTRB = @PROJE"& _ 
                "CTATTRB) AND (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PROJECTATTR] SET [PROJECTNAME] = @PROJECTNAME, [PROJECTATTRB] = @PR"& _ 
                "OJECTATTRB, [PROJECTATTRBVALUE] = @PROJECTATTRBVALUE WHERE (([PROJECTNAME] = @Or"& _ 
                "iginal_PROJECTNAME) AND ([PROJECTATTRB] = @Original_PROJECTATTRB) AND ((@IsNull_"& _ 
                "PROJECTATTRBVALUE = 1 AND [PROJECTATTRBVALUE] IS NULL) OR ([PROJECTATTRBVALUE] ="& _ 
                " @Original_PROJECTATTRBVALUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, PROJECTATTRB, PROJECTATTRB"& _ 
                "VALUE FROM PROJECTATTR WHERE (PROJECTATTRB = @PROJECTATTRB) AND (PROJECTNAME = @"& _ 
                "PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROJECTATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, PROJECTATTRB, PROJECTATTRBVALUE FROM dbo.PROJECTATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.PROJECTATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.PROJECTATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.PROJECTATTRDataTable = New SQDmetaDataSet.PROJECTATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.PROJECTATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PROJECTATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_PROJECTATTRB As String, ByVal Original_PROJECTATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_PROJECTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PROJECTATTRB,String)
            End If
            If (Original_PROJECTATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PROJECTATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal PROJECTATTRB As String, ByVal PROJECTATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (PROJECTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROJECTATTRB,String)
            End If
            If (PROJECTATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PROJECTATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal PROJECTATTRB As String, ByVal PROJECTATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_PROJECTATTRB As String, ByVal Original_PROJECTATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (PROJECTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROJECTATTRB,String)
            End If
            If (PROJECTATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PROJECTATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_PROJECTATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PROJECTATTRB,String)
            End If
            If (Original_PROJECTATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROJECTATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_PROJECTATTRB As String, ByVal Original_PROJECTATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_PROJECTATTRB, PROJECTATTRBVALUE, Original_PROJECTNAME, Original_PROJECTATTRB, Original_PROJECTATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROJECTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROJECTS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("PROJECTDESCRIPTION", "PROJECTDESCRIPTION")
            tableMapping.ColumnMappings.Add("SECURITYATTR", "SECURITYATTR")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PROJECTS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ("& _ 
                "(@IsNull_PROJECTDESCRIPTION = 1 AND [PROJECTDESCRIPTION] IS NULL) OR ([PROJECTDE"& _ 
                "SCRIPTION] = @Original_PROJECTDESCRIPTION)) AND ((@IsNull_SECURITYATTR = 1 AND ["& _ 
                "SECURITYATTR] IS NULL) OR ([SECURITYATTR] = @Original_SECURITYATTR)) AND ((@IsNu"& _ 
                "ll_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP"& _ 
                "] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDAT"& _ 
                "ED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) A"& _ 
                "ND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATED_USE"& _ 
                "R_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDAT"& _ 
                "ED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROJECTDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SECURITYATTR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECURITYATTR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SECURITYATTR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECURITYATTR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PROJECTS] ([PROJECTNAME], [PROJECTDESCRIPTION], [SECURITYATTR]"& _ 
                ", [CREATED_TIMESTAMP], [UPDATED_TIMESTAMP], [CREATED_USER_ID], [UPDATED_USER_ID]"& _ 
                ") VALUES (@PROJECTNAME, @PROJECTDESCRIPTION, @SECURITYATTR, @CREATED_TIMESTAMP, "& _ 
                "@UPDATED_TIMESTAMP, @CREATED_USER_ID, @UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, PR"& _ 
                "OJECTDESCRIPTION, SECURITYATTR, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_US"& _ 
                "ER_ID, UPDATED_USER_ID FROM PROJECTS WHERE (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECURITYATTR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECURITYATTR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PROJECTS] SET [PROJECTNAME] = @PROJECTNAME, [PROJECTDESCRIPTION] = "& _ 
                "@PROJECTDESCRIPTION, [SECURITYATTR] = @SECURITYATTR, [CREATED_TIMESTAMP] = @CREA"& _ 
                "TED_TIMESTAMP, [UPDATED_TIMESTAMP] = @UPDATED_TIMESTAMP, [CREATED_USER_ID] = @CR"& _ 
                "EATED_USER_ID, [UPDATED_USER_ID] = @UPDATED_USER_ID WHERE (([PROJECTNAME] = @Ori"& _ 
                "ginal_PROJECTNAME) AND ((@IsNull_PROJECTDESCRIPTION = 1 AND [PROJECTDESCRIPTION]"& _ 
                " IS NULL) OR ([PROJECTDESCRIPTION] = @Original_PROJECTDESCRIPTION)) AND ((@IsNul"& _ 
                "l_SECURITYATTR = 1 AND [SECURITYATTR] IS NULL) OR ([SECURITYATTR] = @Original_SE"& _ 
                "CURITYATTR)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL"& _ 
                ") OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_"& _ 
                "TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Origin"& _ 
                "al_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] I"& _ 
                "S NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATE"& _ 
                "D_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_U"& _ 
                "PDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, PROJECTDESCRIPTION, SECURITYATTR, CREATE"& _ 
                "D_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM PROJECTS W"& _ 
                "HERE (PROJECTNAME = @PROJECTNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SECURITYATTR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECURITYATTR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROJECTDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SECURITYATTR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECURITYATTR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SECURITYATTR", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SECURITYATTR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, PROJECTDESCRIPTION, SECURITYATTR, CREATED_TIMESTAMP, UPDATED_"& _ 
                "TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM dbo.PROJECTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.PROJECTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.PROJECTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.PROJECTSDataTable = New SQDmetaDataSet.PROJECTSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.PROJECTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PROJECTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_PROJECTDESCRIPTION As String, ByVal Original_SECURITYATTR As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_PROJECTDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PROJECTDESCRIPTION,String)
            End If
            If (Original_SECURITYATTR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SECURITYATTR,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal PROJECTDESCRIPTION As String, ByVal SECURITYATTR As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (PROJECTDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROJECTDESCRIPTION,String)
            End If
            If (SECURITYATTR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SECURITYATTR,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal PROJECTDESCRIPTION As String, ByVal SECURITYATTR As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_PROJECTDESCRIPTION As String, ByVal Original_SECURITYATTR As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (PROJECTDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROJECTDESCRIPTION,String)
            End If
            If (SECURITYATTR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SECURITYATTR,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_PROJECTDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PROJECTDESCRIPTION,String)
            End If
            If (Original_SECURITYATTR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_SECURITYATTR,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTDESCRIPTION As String, ByVal SECURITYATTR As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_PROJECTDESCRIPTION As String, ByVal Original_SECURITYATTR As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, PROJECTDESCRIPTION, SECURITYATTR, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_PROJECTDESCRIPTION, Original_SECURITYATTR, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYSTEMSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYSTEMS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("SYSTEMDESCRIPTION", "SYSTEMDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SYSTEMS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND (["& _ 
                "ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYST"& _ 
                "EMNAME) AND ((@IsNull_SYSTEMDESCRIPTION = 1 AND [SYSTEMDESCRIPTION] IS NULL) OR "& _ 
                "([SYSTEMDESCRIPTION] = @Original_SYSTEMDESCRIPTION)) AND ((@IsNull_CREATED_TIMES"& _ 
                "TAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = @Original_CR"& _ 
                "EATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS"& _ 
                " NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CRE"& _ 
                "ATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATED_USER_ID] = @Origina"& _ 
                "l_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS N"& _ 
                "ULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYSTEMDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SYSTEMS] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], [SYS"& _ 
                "TEMDESCRIPTION], [CREATED_TIMESTAMP], [UPDATED_TIMESTAMP], [CREATED_USER_ID], [U"& _ 
                "PDATED_USER_ID]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @SYSTEMDES"& _ 
                "CRIPTION, @CREATED_TIMESTAMP, @UPDATED_TIMESTAMP, @CREATED_USER_ID, @UPDATED_USE"& _ 
                "R_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMDESCRIPTION, CREA"& _ 
                "TED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM SYSTEMS "& _ 
                "WHERE (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND "& _ 
                "(SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SYSTEMS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @ENV"& _ 
                "IRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [SYSTEMDESCRIPTION] = @SYSTEMDESCRIPTI"& _ 
                "ON, [CREATED_TIMESTAMP] = @CREATED_TIMESTAMP, [UPDATED_TIMESTAMP] = @UPDATED_TIM"& _ 
                "ESTAMP, [CREATED_USER_ID] = @CREATED_USER_ID, [UPDATED_USER_ID] = @UPDATED_USER_"& _ 
                "ID WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Orig"& _ 
                "inal_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEMNAME) AND ((@IsNull_SY"& _ 
                "STEMDESCRIPTION = 1 AND [SYSTEMDESCRIPTION] IS NULL) OR ([SYSTEMDESCRIPTION] = @"& _ 
                "Original_SYSTEMDESCRIPTION)) AND ((@IsNull_CREATED_TIMESTAMP = 1 AND [CREATED_TI"& _ 
                "MESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = @Original_CREATED_TIMESTAMP)) AND (("& _ 
                "@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTAMP] IS NULL) OR ([UPDATED_TIME"& _ 
                "STAMP] = @Original_UPDATED_TIMESTAMP)) AND ((@IsNull_CREATED_USER_ID = 1 AND [CR"& _ 
                "EATED_USER_ID] IS NULL) OR ([CREATED_USER_ID] = @Original_CREATED_USER_ID)) AND "& _ 
                "((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID] IS NULL) OR ([UPDATED_USER_I"& _ 
                "D] = @Original_UPDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMN"& _ 
                "AME, SYSTEMDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, U"& _ 
                "PDATED_USER_ID FROM SYSTEMS WHERE (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJ"& _ 
                "ECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYSTEMDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMDESCRIPTION, CREATED_TIMES"& _ 
                "TAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID FROM dbo.SYSTEMS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.SYSTEMSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.SYSTEMSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.SYSTEMSDataTable = New SQDmetaDataSet.SYSTEMSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.SYSTEMSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SYSTEMS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_SYSTEMDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_SYSTEMDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYSTEMDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal SYSTEMDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (SYSTEMDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SYSTEMDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal SYSTEMDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_SYSTEMDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (SYSTEMDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SYSTEMDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_SYSTEMDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SYSTEMDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SYSTEMDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_SYSTEMDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, SYSTEMDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_SYSTEMDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYSTEMSATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYSTEMSATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("SYSTEMATTRB", "SYSTEMATTRB")
            tableMapping.ColumnMappings.Add("SYSTEMATTRBVALUE", "SYSTEMATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SYSTEMSATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AN"& _ 
                "D ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_"& _ 
                "SYSTEMNAME) AND ([SYSTEMATTRB] = @Original_SYSTEMATTRB) AND ((@IsNull_SYSTEMATTR"& _ 
                "BVALUE = 1 AND [SYSTEMATTRBVALUE] IS NULL) OR ([SYSTEMATTRBVALUE] = @Original_SY"& _ 
                "STEMATTRBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYSTEMATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SYSTEMSATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], "& _ 
                "[SYSTEMATTRB], [SYSTEMATTRBVALUE]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYST"& _ 
                "EMNAME, @SYSTEMATTRB, @SYSTEMATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, "& _ 
                "SYSTEMNAME, SYSTEMATTRB, SYSTEMATTRBVALUE FROM SYSTEMSATTR WHERE (ENVIRONMENTNAM"& _ 
                "E = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMATTRB = @SYSTE"& _ 
                "MATTRB) AND (SYSTEMNAME = @SYSTEMNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[SYSTEMSATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = "& _ 
                "@ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [SYSTEMATTRB] = @SYSTEMATTRB, [SYS"& _ 
                "TEMATTRBVALUE] = @SYSTEMATTRBVALUE WHERE (([PROJECTNAME] = @Original_PROJECTNAME"& _ 
                ") AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Origi"& _ 
                "nal_SYSTEMNAME) AND ([SYSTEMATTRB] = @Original_SYSTEMATTRB) AND ((@IsNull_SYSTEM"& _ 
                "ATTRBVALUE = 1 AND [SYSTEMATTRBVALUE] IS NULL) OR ([SYSTEMATTRBVALUE] = @Origina"& _ 
                "l_SYSTEMATTRBVALUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMA"& _ 
                "TTRB, SYSTEMATTRBVALUE FROM SYSTEMSATTR WHERE (ENVIRONMENTNAME = @ENVIRONMENTNAM"& _ 
                "E) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMATTRB = @SYSTEMATTRB) AND (SYSTEM"& _ 
                "NAME = @SYSTEMNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SYSTEMATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, SYSTEMATTRB, SYSTEMATTRBVALUE FR"& _ 
                "OM dbo.SYSTEMSATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.SYSTEMSATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.SYSTEMSATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.SYSTEMSATTRDataTable = New SQDmetaDataSet.SYSTEMSATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.SYSTEMSATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SYSTEMSATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_SYSTEMATTRB As String, ByVal Original_SYSTEMATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_SYSTEMATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_SYSTEMATTRB,String)
            End If
            If (Original_SYSTEMATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_SYSTEMATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal SYSTEMATTRB As String, ByVal SYSTEMATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (SYSTEMATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SYSTEMATTRB,String)
            End If
            If (SYSTEMATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SYSTEMATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal SYSTEMATTRB As String, ByVal SYSTEMATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_SYSTEMATTRB As String, ByVal Original_SYSTEMATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (SYSTEMATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SYSTEMATTRB,String)
            End If
            If (SYSTEMATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SYSTEMATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_SYSTEMATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SYSTEMATTRB,String)
            End If
            If (Original_SYSTEMATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SYSTEMATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SYSTEMATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_SYSTEMATTRB As String, ByVal Original_SYSTEMATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_SYSTEMATTRB, SYSTEMATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_SYSTEMATTRB, Original_SYSTEMATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TASKDSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TASKDS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("TASKNAME", "TASKNAME")
            tableMapping.ColumnMappings.Add("DATASTORENAME", "DATASTORENAME")
            tableMapping.ColumnMappings.Add("TASKTYPE", "TASKTYPE")
            tableMapping.ColumnMappings.Add("DSDIRECTION", "DSDIRECTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TASKDS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([E"& _ 
                "NVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTE"& _ 
                "MNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([TASKNAME] = @Original_TAS"& _ 
                "KNAME) AND ([DATASTORENAME] = @Original_DATASTORENAME) AND ((@IsNull_TASKTYPE = "& _ 
                "1 AND [TASKTYPE] IS NULL) OR ([TASKTYPE] = @Original_TASKTYPE)) AND ((@IsNull_DS"& _ 
                "DIRECTION = 1 AND [DSDIRECTION] IS NULL) OR ([DSDIRECTION] = @Original_DSDIRECTI"& _ 
                "ON)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DSDIRECTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TASKDS] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], [ENGI"& _ 
                "NENAME], [TASKNAME], [DATASTORENAME], [TASKTYPE], [DSDIRECTION]) VALUES (@PROJEC"& _ 
                "TNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @TASKNAME, @DATASTORENAME, @T"& _ 
                "ASKTYPE, @DSDIRECTION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINE"& _ 
                "NAME, TASKNAME, DATASTORENAME, TASKTYPE, DSDIRECTION FROM TASKDS WHERE (DATASTOR"& _ 
                "ENAME = @DATASTORENAME) AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @E"& _ 
                "NVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) "& _ 
                "AND (TASKNAME = @TASKNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TASKDS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @ENVI"& _ 
                "RONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [TASKNAME] "& _ 
                "= @TASKNAME, [DATASTORENAME] = @DATASTORENAME, [TASKTYPE] = @TASKTYPE, [DSDIRECT"& _ 
                "ION] = @DSDIRECTION WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRON"& _ 
                "MENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEMNAME)"& _ 
                " AND ([ENGINENAME] = @Original_ENGINENAME) AND ([TASKNAME] = @Original_TASKNAME)"& _ 
                " AND ([DATASTORENAME] = @Original_DATASTORENAME) AND ((@IsNull_TASKTYPE = 1 AND "& _ 
                "[TASKTYPE] IS NULL) OR ([TASKTYPE] = @Original_TASKTYPE)) AND ((@IsNull_DSDIRECT"& _ 
                "ION = 1 AND [DSDIRECTION] IS NULL) OR ([DSDIRECTION] = @Original_DSDIRECTION)));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, DATASTO"& _ 
                "RENAME, TASKTYPE, DSDIRECTION FROM TASKDS WHERE (DATASTORENAME = @DATASTORENAME)"& _ 
                " AND (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PR"& _ 
                "OJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND (TASKNAME = @TASKNA"& _ 
                "ME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATASTORENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATASTORENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DSDIRECTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DSDIRECTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSDIRECTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, DATASTOREN"& _ 
                "AME, TASKTYPE, DSDIRECTION FROM dbo.TASKDS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.TASKDSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.TASKDSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.TASKDSDataTable = New SQDmetaDataSet.TASKDSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.TASKDSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TASKDS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_TASKNAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer), ByVal Original_DSDIRECTION As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TASKNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TASKNAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_TASKTYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TASKTYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_DSDIRECTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_DSDIRECTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String, ByVal DATASTORENAME As String, ByVal TASKTYPE As Global.System.Nullable(Of Integer), ByVal DSDIRECTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TASKNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TASKNAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DATASTORENAME,String)
            End If
            If (TASKTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TASKTYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DSDIRECTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DSDIRECTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal TASKNAME As String,  _
                    ByVal DATASTORENAME As String,  _
                    ByVal TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal DSDIRECTION As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_TASKNAME As String,  _
                    ByVal Original_DATASTORENAME As String,  _
                    ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DSDIRECTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TASKNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TASKNAME,String)
            End If
            If (DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DATASTORENAME,String)
            End If
            If (TASKTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TASKTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DSDIRECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DSDIRECTION,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TASKNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TASKNAME,String)
            End If
            If (Original_DATASTORENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DATASTORENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DATASTORENAME,String)
            End If
            If (Original_TASKTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_TASKTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_DSDIRECTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_DSDIRECTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TASKTYPE As Global.System.Nullable(Of Integer), ByVal DSDIRECTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_TASKNAME As String, ByVal Original_DATASTORENAME As String, ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer), ByVal Original_DSDIRECTION As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_TASKNAME, Original_DATASTORENAME, TASKTYPE, DSDIRECTION, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_TASKNAME, Original_DATASTORENAME, Original_TASKTYPE, Original_DSDIRECTION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TASKMAPTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TASKMAP"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("TASKNAME", "TASKNAME")
            tableMapping.ColumnMappings.Add("MAPPINGID", "MAPPINGID")
            tableMapping.ColumnMappings.Add("TASKTYPE", "TASKTYPE")
            tableMapping.ColumnMappings.Add("MAPPINGDESC", "MAPPINGDESC")
            tableMapping.ColumnMappings.Add("MAPPINGTARGET", "MAPPINGTARGET")
            tableMapping.ColumnMappings.Add("SOURCETYPE", "SOURCETYPE")
            tableMapping.ColumnMappings.Add("TARGETTYPE", "TARGETTYPE")
            tableMapping.ColumnMappings.Add("ISMAPPED", "ISMAPPED")
            tableMapping.ColumnMappings.Add("MAPPINGSOURCEID", "MAPPINGSOURCEID")
            tableMapping.ColumnMappings.Add("MAPPINGTARGETID", "MAPPINGTARGETID")
            tableMapping.ColumnMappings.Add("SOURCEPARENT", "SOURCEPARENT")
            tableMapping.ColumnMappings.Add("TARGETPARENT", "TARGETPARENT")
            tableMapping.ColumnMappings.Add("SEQNO", "SEQNO")
            tableMapping.ColumnMappings.Add("SOURCEDATASTORE", "SOURCEDATASTORE")
            tableMapping.ColumnMappings.Add("TARGETDATASTORE", "TARGETDATASTORE")
            tableMapping.ColumnMappings.Add("MAPPINGSOURCE", "MAPPINGSOURCE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TASKMAP] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND (["& _ 
                "ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYST"& _ 
                "EMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([TASKNAME] = @Original_TA"& _ 
                "SKNAME) AND ([MAPPINGID] = @Original_MAPPINGID) AND ((@IsNull_TASKTYPE = 1 AND ["& _ 
                "TASKTYPE] IS NULL) OR ([TASKTYPE] = @Original_TASKTYPE)) AND ((@IsNull_MAPPINGDE"& _ 
                "SC = 1 AND [MAPPINGDESC] IS NULL) OR ([MAPPINGDESC] = @Original_MAPPINGDESC)) AN"& _ 
                "D ((@IsNull_MAPPINGTARGET = 1 AND [MAPPINGTARGET] IS NULL) OR ([MAPPINGTARGET] ="& _ 
                " @Original_MAPPINGTARGET)) AND ((@IsNull_SOURCETYPE = 1 AND [SOURCETYPE] IS NULL"& _ 
                ") OR ([SOURCETYPE] = @Original_SOURCETYPE)) AND ((@IsNull_TARGETTYPE = 1 AND [TA"& _ 
                "RGETTYPE] IS NULL) OR ([TARGETTYPE] = @Original_TARGETTYPE)) AND ((@IsNull_ISMAP"& _ 
                "PED = 1 AND [ISMAPPED] IS NULL) OR ([ISMAPPED] = @Original_ISMAPPED)) AND ((@IsN"& _ 
                "ull_MAPPINGSOURCEID = 1 AND [MAPPINGSOURCEID] IS NULL) OR ([MAPPINGSOURCEID] = @"& _ 
                "Original_MAPPINGSOURCEID)) AND ((@IsNull_MAPPINGTARGETID = 1 AND [MAPPINGTARGETI"& _ 
                "D] IS NULL) OR ([MAPPINGTARGETID] = @Original_MAPPINGTARGETID)) AND ((@IsNull_SO"& _ 
                "URCEPARENT = 1 AND [SOURCEPARENT] IS NULL) OR ([SOURCEPARENT] = @Original_SOURCE"& _ 
                "PARENT)) AND ((@IsNull_TARGETPARENT = 1 AND [TARGETPARENT] IS NULL) OR ([TARGETP"& _ 
                "ARENT] = @Original_TARGETPARENT)) AND ((@IsNull_SEQNO = 1 AND [SEQNO] IS NULL) O"& _ 
                "R ([SEQNO] = @Original_SEQNO)) AND ((@IsNull_SOURCEDATASTORE = 1 AND [SOURCEDATA"& _ 
                "STORE] IS NULL) OR ([SOURCEDATASTORE] = @Original_SOURCEDATASTORE)) AND ((@IsNul"& _ 
                "l_TARGETDATASTORE = 1 AND [TARGETDATASTORE] IS NULL) OR ([TARGETDATASTORE] = @Or"& _ 
                "iginal_TARGETDATASTORE)) AND ((@IsNull_MAPPINGSOURCE = 1 AND [MAPPINGSOURCE] IS "& _ 
                "NULL) OR ([MAPPINGSOURCE] = @Original_MAPPINGSOURCE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGDESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGDESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGDESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGTARGET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGTARGET", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SOURCETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCETYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SOURCETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCETYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TARGETTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TARGETTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISMAPPED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISMAPPED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISMAPPED", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISMAPPED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGSOURCEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCEID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGSOURCEID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCEID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGTARGETID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGETID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGTARGETID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGETID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SOURCEPARENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEPARENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SOURCEPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEPARENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TARGETPARENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETPARENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TARGETPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETPARENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SOURCEDATASTORE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDATASTORE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SOURCEDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDATASTORE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TARGETDATASTORE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETDATASTORE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TARGETDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETDATASTORE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGSOURCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGSOURCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TASKMAP] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], [ENG"& _ 
                "INENAME], [TASKNAME], [MAPPINGID], [TASKTYPE], [MAPPINGDESC], [MAPPINGTARGET], ["& _ 
                "SOURCETYPE], [TARGETTYPE], [ISMAPPED], [MAPPINGSOURCEID], [MAPPINGTARGETID], [SO"& _ 
                "URCEPARENT], [TARGETPARENT], [SEQNO], [SOURCEDATASTORE], [TARGETDATASTORE], [MAP"& _ 
                "PINGSOURCE]) VALUES (@PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @"& _ 
                "TASKNAME, @MAPPINGID, @TASKTYPE, @MAPPINGDESC, @MAPPINGTARGET, @SOURCETYPE, @TAR"& _ 
                "GETTYPE, @ISMAPPED, @MAPPINGSOURCEID, @MAPPINGTARGETID, @SOURCEPARENT, @TARGETPA"& _ 
                "RENT, @SEQNO, @SOURCEDATASTORE, @TARGETDATASTORE, @MAPPINGSOURCE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJE"& _ 
                "CTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, MAPPINGID, TASKTYPE, "& _ 
                "MAPPINGDESC, MAPPINGTARGET, SOURCETYPE, TARGETTYPE, ISMAPPED, MAPPINGSOURCEID, M"& _ 
                "APPINGTARGETID, SOURCEPARENT, TARGETPARENT, SEQNO, SOURCEDATASTORE, TARGETDATAST"& _ 
                "ORE, MAPPINGSOURCE FROM TASKMAP WHERE (ENGINENAME = @ENGINENAME) AND (ENVIRONMEN"& _ 
                "TNAME = @ENVIRONMENTNAME) AND (MAPPINGID = @MAPPINGID) AND (PROJECTNAME = @PROJE"& _ 
                "CTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND (TASKNAME = @TASKNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGDESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGTARGET", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TARGETTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISMAPPED", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISMAPPED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGSOURCEID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGTARGETID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGETID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEPARENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TARGETPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETPARENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDATASTORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TARGETDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETDATASTORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGSOURCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TASKMAP] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @ENV"& _ 
                "IRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [TASKNAME]"& _ 
                " = @TASKNAME, [MAPPINGID] = @MAPPINGID, [TASKTYPE] = @TASKTYPE, [MAPPINGDESC] = "& _ 
                "@MAPPINGDESC, [MAPPINGTARGET] = @MAPPINGTARGET, [SOURCETYPE] = @SOURCETYPE, [TAR"& _ 
                "GETTYPE] = @TARGETTYPE, [ISMAPPED] = @ISMAPPED, [MAPPINGSOURCEID] = @MAPPINGSOUR"& _ 
                "CEID, [MAPPINGTARGETID] = @MAPPINGTARGETID, [SOURCEPARENT] = @SOURCEPARENT, [TAR"& _ 
                "GETPARENT] = @TARGETPARENT, [SEQNO] = @SEQNO, [SOURCEDATASTORE] = @SOURCEDATASTO"& _ 
                "RE, [TARGETDATASTORE] = @TARGETDATASTORE, [MAPPINGSOURCE] = @MAPPINGSOURCE WHERE"& _ 
                " (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENV"& _ 
                "IRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEMNAME) AND ([ENGINENAME] = @Ori"& _ 
                "ginal_ENGINENAME) AND ([TASKNAME] = @Original_TASKNAME) AND ([MAPPINGID] = @Orig"& _ 
                "inal_MAPPINGID) AND ((@IsNull_TASKTYPE = 1 AND [TASKTYPE] IS NULL) OR ([TASKTYPE"& _ 
                "] = @Original_TASKTYPE)) AND ((@IsNull_MAPPINGDESC = 1 AND [MAPPINGDESC] IS NULL"& _ 
                ") OR ([MAPPINGDESC] = @Original_MAPPINGDESC)) AND ((@IsNull_MAPPINGTARGET = 1 AN"& _ 
                "D [MAPPINGTARGET] IS NULL) OR ([MAPPINGTARGET] = @Original_MAPPINGTARGET)) AND ("& _ 
                "(@IsNull_SOURCETYPE = 1 AND [SOURCETYPE] IS NULL) OR ([SOURCETYPE] = @Original_S"& _ 
                "OURCETYPE)) AND ((@IsNull_TARGETTYPE = 1 AND [TARGETTYPE] IS NULL) OR ([TARGETTY"& _ 
                "PE] = @Original_TARGETTYPE)) AND ((@IsNull_ISMAPPED = 1 AND [ISMAPPED] IS NULL) "& _ 
                "OR ([ISMAPPED] = @Original_ISMAPPED)) AND ((@IsNull_MAPPINGSOURCEID = 1 AND [MAP"& _ 
                "PINGSOURCEID] IS NULL) OR ([MAPPINGSOURCEID] = @Original_MAPPINGSOURCEID)) AND ("& _ 
                "(@IsNull_MAPPINGTARGETID = 1 AND [MAPPINGTARGETID] IS NULL) OR ([MAPPINGTARGETID"& _ 
                "] = @Original_MAPPINGTARGETID)) AND ((@IsNull_SOURCEPARENT = 1 AND [SOURCEPARENT"& _ 
                "] IS NULL) OR ([SOURCEPARENT] = @Original_SOURCEPARENT)) AND ((@IsNull_TARGETPAR"& _ 
                "ENT = 1 AND [TARGETPARENT] IS NULL) OR ([TARGETPARENT] = @Original_TARGETPARENT)"& _ 
                ") AND ((@IsNull_SEQNO = 1 AND [SEQNO] IS NULL) OR ([SEQNO] = @Original_SEQNO)) A"& _ 
                "ND ((@IsNull_SOURCEDATASTORE = 1 AND [SOURCEDATASTORE] IS NULL) OR ([SOURCEDATAS"& _ 
                "TORE] = @Original_SOURCEDATASTORE)) AND ((@IsNull_TARGETDATASTORE = 1 AND [TARGE"& _ 
                "TDATASTORE] IS NULL) OR ([TARGETDATASTORE] = @Original_TARGETDATASTORE)) AND ((@"& _ 
                "IsNull_MAPPINGSOURCE = 1 AND [MAPPINGSOURCE] IS NULL) OR ([MAPPINGSOURCE] = @Ori"& _ 
                "ginal_MAPPINGSOURCE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINE"& _ 
                "NAME, TASKNAME, MAPPINGID, TASKTYPE, MAPPINGDESC, MAPPINGTARGET, SOURCETYPE, TAR"& _ 
                "GETTYPE, ISMAPPED, MAPPINGSOURCEID, MAPPINGTARGETID, SOURCEPARENT, TARGETPARENT,"& _ 
                " SEQNO, SOURCEDATASTORE, TARGETDATASTORE, MAPPINGSOURCE FROM TASKMAP WHERE (ENGI"& _ 
                "NENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (MAPPINGID = "& _ 
                "@MAPPINGID) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND "& _ 
                "(TASKNAME = @TASKNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGDESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGTARGET", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGET", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCETYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TARGETTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISMAPPED", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISMAPPED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGSOURCEID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCEID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGTARGETID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGETID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEPARENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TARGETPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETPARENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SOURCEDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDATASTORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TARGETDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETDATASTORE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MAPPINGSOURCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGDESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGDESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGDESC", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGDESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGTARGET", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGET", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGTARGET", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGET", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SOURCETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCETYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SOURCETYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCETYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TARGETTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TARGETTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ISMAPPED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISMAPPED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ISMAPPED", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ISMAPPED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGSOURCEID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCEID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGSOURCEID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCEID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGTARGETID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGETID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGTARGETID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGTARGETID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SOURCEPARENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEPARENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SOURCEPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEPARENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TARGETPARENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETPARENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TARGETPARENT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETPARENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SOURCEDATASTORE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDATASTORE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SOURCEDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SOURCEDATASTORE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TARGETDATASTORE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETDATASTORE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TARGETDATASTORE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TARGETDATASTORE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MAPPINGSOURCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MAPPINGSOURCE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MAPPINGSOURCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, MAPPINGID,"& _ 
                " TASKTYPE, MAPPINGDESC, MAPPINGTARGET, SOURCETYPE, TARGETTYPE, ISMAPPED, MAPPING"& _ 
                "SOURCEID, MAPPINGTARGETID, SOURCEPARENT, TARGETPARENT, SEQNO, SOURCEDATASTORE, T"& _ 
                "ARGETDATASTORE, MAPPINGSOURCE FROM dbo.TASKMAP"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.TASKMAPDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.TASKMAPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.TASKMAPDataTable = New SQDmetaDataSet.TASKMAPDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.TASKMAPDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TASKMAP")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_TASKNAME As String,  _
                    ByVal Original_MAPPINGID As Long,  _
                    ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAPPINGDESC As String,  _
                    ByVal Original_MAPPINGTARGET As String,  _
                    ByVal Original_SOURCETYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TARGETTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ISMAPPED As String,  _
                    ByVal Original_MAPPINGSOURCEID As String,  _
                    ByVal Original_MAPPINGTARGETID As String,  _
                    ByVal Original_SOURCEPARENT As String,  _
                    ByVal Original_TARGETPARENT As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SOURCEDATASTORE As String,  _
                    ByVal Original_TARGETDATASTORE As String,  _
                    ByVal Original_MAPPINGSOURCE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TASKNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TASKNAME,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MAPPINGID,Long)
            If (Original_TASKTYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_TASKTYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_MAPPINGDESC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MAPPINGDESC,String)
            End If
            If (Original_MAPPINGTARGET Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_MAPPINGTARGET,String)
            End If
            If (Original_SOURCETYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_SOURCETYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_TARGETTYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_TARGETTYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_ISMAPPED Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_ISMAPPED,String)
            End If
            If (Original_MAPPINGSOURCEID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_MAPPINGSOURCEID,String)
            End If
            If (Original_MAPPINGTARGETID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_MAPPINGTARGETID,String)
            End If
            If (Original_SOURCEPARENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_SOURCEPARENT,String)
            End If
            If (Original_TARGETPARENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_TARGETPARENT,String)
            End If
            If (Original_SEQNO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SEQNO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_SOURCEDATASTORE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_SOURCEDATASTORE,String)
            End If
            If (Original_TARGETDATASTORE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_TARGETDATASTORE,String)
            End If
            If (Original_MAPPINGSOURCE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_MAPPINGSOURCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal TASKNAME As String,  _
                    ByVal MAPPINGID As Long,  _
                    ByVal TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal MAPPINGDESC As String,  _
                    ByVal MAPPINGTARGET As String,  _
                    ByVal SOURCETYPE As Global.System.Nullable(Of Integer),  _
                    ByVal TARGETTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal ISMAPPED As String,  _
                    ByVal MAPPINGSOURCEID As String,  _
                    ByVal MAPPINGTARGETID As String,  _
                    ByVal SOURCEPARENT As String,  _
                    ByVal TARGETPARENT As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal SOURCEDATASTORE As String,  _
                    ByVal TARGETDATASTORE As String,  _
                    ByVal MAPPINGSOURCE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TASKNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TASKNAME,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(MAPPINGID,Long)
            If (TASKTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TASKTYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MAPPINGDESC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MAPPINGDESC,String)
            End If
            If (MAPPINGTARGET Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MAPPINGTARGET,String)
            End If
            If (SOURCETYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SOURCETYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TARGETTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(TARGETTYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ISMAPPED Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ISMAPPED,String)
            End If
            If (MAPPINGSOURCEID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MAPPINGSOURCEID,String)
            End If
            If (MAPPINGTARGETID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(MAPPINGTARGETID,String)
            End If
            If (SOURCEPARENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SOURCEPARENT,String)
            End If
            If (TARGETPARENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TARGETPARENT,String)
            End If
            If (SEQNO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(SEQNO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SOURCEDATASTORE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(SOURCEDATASTORE,String)
            End If
            If (TARGETDATASTORE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TARGETDATASTORE,String)
            End If
            If (MAPPINGSOURCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(MAPPINGSOURCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal TASKNAME As String,  _
                    ByVal MAPPINGID As Long,  _
                    ByVal TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal MAPPINGDESC As String,  _
                    ByVal MAPPINGTARGET As String,  _
                    ByVal SOURCETYPE As Global.System.Nullable(Of Integer),  _
                    ByVal TARGETTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal ISMAPPED As String,  _
                    ByVal MAPPINGSOURCEID As String,  _
                    ByVal MAPPINGTARGETID As String,  _
                    ByVal SOURCEPARENT As String,  _
                    ByVal TARGETPARENT As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal SOURCEDATASTORE As String,  _
                    ByVal TARGETDATASTORE As String,  _
                    ByVal MAPPINGSOURCE As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_TASKNAME As String,  _
                    ByVal Original_MAPPINGID As Long,  _
                    ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAPPINGDESC As String,  _
                    ByVal Original_MAPPINGTARGET As String,  _
                    ByVal Original_SOURCETYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TARGETTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ISMAPPED As String,  _
                    ByVal Original_MAPPINGSOURCEID As String,  _
                    ByVal Original_MAPPINGTARGETID As String,  _
                    ByVal Original_SOURCEPARENT As String,  _
                    ByVal Original_TARGETPARENT As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SOURCEDATASTORE As String,  _
                    ByVal Original_TARGETDATASTORE As String,  _
                    ByVal Original_MAPPINGSOURCE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TASKNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TASKNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MAPPINGID,Long)
            If (TASKTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TASKTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MAPPINGDESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MAPPINGDESC,String)
            End If
            If (MAPPINGTARGET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MAPPINGTARGET,String)
            End If
            If (SOURCETYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SOURCETYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (TARGETTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(TARGETTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ISMAPPED Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ISMAPPED,String)
            End If
            If (MAPPINGSOURCEID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MAPPINGSOURCEID,String)
            End If
            If (MAPPINGTARGETID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(MAPPINGTARGETID,String)
            End If
            If (SOURCEPARENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SOURCEPARENT,String)
            End If
            If (TARGETPARENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TARGETPARENT,String)
            End If
            If (SEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(SEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (SOURCEDATASTORE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(SOURCEDATASTORE,String)
            End If
            If (TARGETDATASTORE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(TARGETDATASTORE,String)
            End If
            If (MAPPINGSOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(MAPPINGSOURCE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TASKNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_TASKNAME,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_MAPPINGID,Long)
            If (Original_TASKTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_TASKTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_MAPPINGDESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_MAPPINGDESC,String)
            End If
            If (Original_MAPPINGTARGET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_MAPPINGTARGET,String)
            End If
            If (Original_SOURCETYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SOURCETYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_TARGETTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_TARGETTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_ISMAPPED Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ISMAPPED,String)
            End If
            If (Original_MAPPINGSOURCEID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_MAPPINGSOURCEID,String)
            End If
            If (Original_MAPPINGTARGETID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_MAPPINGTARGETID,String)
            End If
            If (Original_SOURCEPARENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_SOURCEPARENT,String)
            End If
            If (Original_TARGETPARENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_TARGETPARENT,String)
            End If
            If (Original_SEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_SEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_SOURCEDATASTORE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_SOURCEDATASTORE,String)
            End If
            If (Original_TARGETDATASTORE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_TARGETDATASTORE,String)
            End If
            If (Original_MAPPINGSOURCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_MAPPINGSOURCE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal MAPPINGDESC As String,  _
                    ByVal MAPPINGTARGET As String,  _
                    ByVal SOURCETYPE As Global.System.Nullable(Of Integer),  _
                    ByVal TARGETTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal ISMAPPED As String,  _
                    ByVal MAPPINGSOURCEID As String,  _
                    ByVal MAPPINGTARGETID As String,  _
                    ByVal SOURCEPARENT As String,  _
                    ByVal TARGETPARENT As String,  _
                    ByVal SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal SOURCEDATASTORE As String,  _
                    ByVal TARGETDATASTORE As String,  _
                    ByVal MAPPINGSOURCE As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_TASKNAME As String,  _
                    ByVal Original_MAPPINGID As Long,  _
                    ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_MAPPINGDESC As String,  _
                    ByVal Original_MAPPINGTARGET As String,  _
                    ByVal Original_SOURCETYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TARGETTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ISMAPPED As String,  _
                    ByVal Original_MAPPINGSOURCEID As String,  _
                    ByVal Original_MAPPINGTARGETID As String,  _
                    ByVal Original_SOURCEPARENT As String,  _
                    ByVal Original_TARGETPARENT As String,  _
                    ByVal Original_SEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SOURCEDATASTORE As String,  _
                    ByVal Original_TARGETDATASTORE As String,  _
                    ByVal Original_MAPPINGSOURCE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_TASKNAME, Original_MAPPINGID, TASKTYPE, MAPPINGDESC, MAPPINGTARGET, SOURCETYPE, TARGETTYPE, ISMAPPED, MAPPINGSOURCEID, MAPPINGTARGETID, SOURCEPARENT, TARGETPARENT, SEQNO, SOURCEDATASTORE, TARGETDATASTORE, MAPPINGSOURCE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_TASKNAME, Original_MAPPINGID, Original_TASKTYPE, Original_MAPPINGDESC, Original_MAPPINGTARGET, Original_SOURCETYPE, Original_TARGETTYPE, Original_ISMAPPED, Original_MAPPINGSOURCEID, Original_MAPPINGTARGETID, Original_SOURCEPARENT, Original_TARGETPARENT, Original_SEQNO, Original_SOURCEDATASTORE, Original_TARGETDATASTORE, Original_MAPPINGSOURCE)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TASKSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TASKS"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("TASKNAME", "TASKNAME")
            tableMapping.ColumnMappings.Add("TASKTYPE", "TASKTYPE")
            tableMapping.ColumnMappings.Add("TASKSEQNO", "TASKSEQNO")
            tableMapping.ColumnMappings.Add("TASKDESCRIPTION", "TASKDESCRIPTION")
            tableMapping.ColumnMappings.Add("CREATED_TIMESTAMP", "CREATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("UPDATED_TIMESTAMP", "UPDATED_TIMESTAMP")
            tableMapping.ColumnMappings.Add("CREATED_USER_ID", "CREATED_USER_ID")
            tableMapping.ColumnMappings.Add("UPDATED_USER_ID", "UPDATED_USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TASKS] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([EN"& _ 
                "VIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEM"& _ 
                "NAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([TASKNAME] = @Original_TASK"& _ 
                "NAME) AND ((@IsNull_TASKTYPE = 1 AND [TASKTYPE] IS NULL) OR ([TASKTYPE] = @Origi"& _ 
                "nal_TASKTYPE)) AND ((@IsNull_TASKSEQNO = 1 AND [TASKSEQNO] IS NULL) OR ([TASKSEQ"& _ 
                "NO] = @Original_TASKSEQNO)) AND ((@IsNull_TASKDESCRIPTION = 1 AND [TASKDESCRIPTI"& _ 
                "ON] IS NULL) OR ([TASKDESCRIPTION] = @Original_TASKDESCRIPTION)) AND ((@IsNull_C"& _ 
                "REATED_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = "& _ 
                "@Original_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_T"& _ 
                "IMESTAMP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) AND ("& _ 
                "(@IsNull_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATED_USER_ID"& _ 
                "] = @Original_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_U"& _ 
                "SER_ID] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKSEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKSEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKSEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKSEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TASKS] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], [ENGIN"& _ 
                "ENAME], [TASKNAME], [TASKTYPE], [TASKSEQNO], [TASKDESCRIPTION], [CREATED_TIMESTA"& _ 
                "MP], [UPDATED_TIMESTAMP], [CREATED_USER_ID], [UPDATED_USER_ID]) VALUES (@PROJECT"& _ 
                "NAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @TASKNAME, @TASKTYPE, @TASKSEQ"& _ 
                "NO, @TASKDESCRIPTION, @CREATED_TIMESTAMP, @UPDATED_TIMESTAMP, @CREATED_USER_ID, "& _ 
                "@UPDATED_USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME,"& _ 
                " TASKNAME, TASKTYPE, TASKSEQNO, TASKDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIME"& _ 
                "STAMP, CREATED_USER_ID, UPDATED_USER_ID FROM TASKS WHERE (ENGINENAME = @ENGINENA"& _ 
                "ME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AN"& _ 
                "D (SYSTEMNAME = @SYSTEMNAME) AND (TASKNAME = @TASKNAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKSEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKSEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TASKS] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @ENVIR"& _ 
                "ONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [TASKNAME] ="& _ 
                " @TASKNAME, [TASKTYPE] = @TASKTYPE, [TASKSEQNO] = @TASKSEQNO, [TASKDESCRIPTION] "& _ 
                "= @TASKDESCRIPTION, [CREATED_TIMESTAMP] = @CREATED_TIMESTAMP, [UPDATED_TIMESTAMP"& _ 
                "] = @UPDATED_TIMESTAMP, [CREATED_USER_ID] = @CREATED_USER_ID, [UPDATED_USER_ID] "& _ 
                "= @UPDATED_USER_ID WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONM"& _ 
                "ENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEMNAME) "& _ 
                "AND ([ENGINENAME] = @Original_ENGINENAME) AND ([TASKNAME] = @Original_TASKNAME) "& _ 
                "AND ((@IsNull_TASKTYPE = 1 AND [TASKTYPE] IS NULL) OR ([TASKTYPE] = @Original_TA"& _ 
                "SKTYPE)) AND ((@IsNull_TASKSEQNO = 1 AND [TASKSEQNO] IS NULL) OR ([TASKSEQNO] = "& _ 
                "@Original_TASKSEQNO)) AND ((@IsNull_TASKDESCRIPTION = 1 AND [TASKDESCRIPTION] IS"& _ 
                " NULL) OR ([TASKDESCRIPTION] = @Original_TASKDESCRIPTION)) AND ((@IsNull_CREATED"& _ 
                "_TIMESTAMP = 1 AND [CREATED_TIMESTAMP] IS NULL) OR ([CREATED_TIMESTAMP] = @Origi"& _ 
                "nal_CREATED_TIMESTAMP)) AND ((@IsNull_UPDATED_TIMESTAMP = 1 AND [UPDATED_TIMESTA"& _ 
                "MP] IS NULL) OR ([UPDATED_TIMESTAMP] = @Original_UPDATED_TIMESTAMP)) AND ((@IsNu"& _ 
                "ll_CREATED_USER_ID = 1 AND [CREATED_USER_ID] IS NULL) OR ([CREATED_USER_ID] = @O"& _ 
                "riginal_CREATED_USER_ID)) AND ((@IsNull_UPDATED_USER_ID = 1 AND [UPDATED_USER_ID"& _ 
                "] IS NULL) OR ([UPDATED_USER_ID] = @Original_UPDATED_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECT"& _ 
                "NAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, TASKTYPE, TASKSEQNO, TA"& _ 
                "SKDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_US"& _ 
                "ER_ID FROM TASKS WHERE (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRO"& _ 
                "NMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND ("& _ 
                "TASKNAME = @TASKNAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKSEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKSEQNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TASKDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKTYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKTYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKSEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKSEQNO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKSEQNO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKSEQNO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TASKDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TASKDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TASKDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_TIMESTAMP", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_TIMESTAMP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UPDATED_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UPDATED_USER_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UPDATED_USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, TASKNAME, TASKTYPE, "& _ 
                "TASKSEQNO, TASKDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_I"& _ 
                "D, UPDATED_USER_ID FROM dbo.TASKS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.TASKSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.TASKSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.TASKSDataTable = New SQDmetaDataSet.TASKSDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.TASKSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TASKS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_TASKNAME As String, ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer), ByVal Original_TASKSEQNO As Global.System.Nullable(Of Integer), ByVal Original_TASKDESCRIPTION As String, ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal Original_CREATED_USER_ID As String, ByVal Original_UPDATED_USER_ID As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TASKNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TASKNAME,String)
            End If
            If (Original_TASKTYPE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_TASKTYPE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_TASKSEQNO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TASKSEQNO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_TASKDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TASKDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal TASKNAME As String, ByVal TASKTYPE As Global.System.Nullable(Of Integer), ByVal TASKSEQNO As Global.System.Nullable(Of Integer), ByVal TASKDESCRIPTION As String, ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date), ByVal CREATED_USER_ID As String, ByVal UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TASKNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TASKNAME,String)
            End If
            If (TASKTYPE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TASKTYPE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TASKSEQNO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TASKSEQNO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TASKDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TASKDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PROJECTNAME As String,  _
                    ByVal ENVIRONMENTNAME As String,  _
                    ByVal SYSTEMNAME As String,  _
                    ByVal ENGINENAME As String,  _
                    ByVal TASKNAME As String,  _
                    ByVal TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal TASKSEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal TASKDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_TASKNAME As String,  _
                    ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TASKSEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TASKDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TASKNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TASKNAME,String)
            End If
            If (TASKTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TASKTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TASKSEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TASKSEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TASKDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TASKDESCRIPTION,String)
            End If
            If (CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CREATED_USER_ID,String)
            End If
            If (UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UPDATED_USER_ID,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_TASKNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TASKNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_TASKNAME,String)
            End If
            If (Original_TASKTYPE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_TASKTYPE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_TASKSEQNO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_TASKSEQNO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_TASKDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TASKDESCRIPTION,String)
            End If
            If (Original_CREATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_CREATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_UPDATED_TIMESTAMP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_UPDATED_TIMESTAMP.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_CREATED_USER_ID,String)
            End If
            If (Original_UPDATED_USER_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_UPDATED_USER_ID,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal TASKSEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal TASKDESCRIPTION As String,  _
                    ByVal CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal CREATED_USER_ID As String,  _
                    ByVal UPDATED_USER_ID As String,  _
                    ByVal Original_PROJECTNAME As String,  _
                    ByVal Original_ENVIRONMENTNAME As String,  _
                    ByVal Original_SYSTEMNAME As String,  _
                    ByVal Original_ENGINENAME As String,  _
                    ByVal Original_TASKNAME As String,  _
                    ByVal Original_TASKTYPE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TASKSEQNO As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TASKDESCRIPTION As String,  _
                    ByVal Original_CREATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_UPDATED_TIMESTAMP As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATED_USER_ID As String,  _
                    ByVal Original_UPDATED_USER_ID As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_TASKNAME, TASKTYPE, TASKSEQNO, TASKDESCRIPTION, CREATED_TIMESTAMP, UPDATED_TIMESTAMP, CREATED_USER_ID, UPDATED_USER_ID, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_TASKNAME, Original_TASKTYPE, Original_TASKSEQNO, Original_TASKDESCRIPTION, Original_CREATED_TIMESTAMP, Original_UPDATED_TIMESTAMP, Original_CREATED_USER_ID, Original_UPDATED_USER_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Test1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Test1"
            tableMapping.ColumnMappings.Add("EmplNumber", "EmplNumber")
            tableMapping.ColumnMappings.Add("SerNo", "SerNo")
            tableMapping.ColumnMappings.Add("TimeStamp1", "TimeStamp1")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("Salary", "Salary")
            tableMapping.ColumnMappings.Add("BonusSmall", "BonusSmall")
            tableMapping.ColumnMappings.Add("BigDate", "BigDate")
            tableMapping.ColumnMappings.Add("SmallDate", "SmallDate")
            tableMapping.ColumnMappings.Add("Bit1", "Bit1")
            tableMapping.ColumnMappings.Add("Tinyint1", "Tinyint1")
            tableMapping.ColumnMappings.Add("SmallInt1", "SmallInt1")
            tableMapping.ColumnMappings.Add("Int1", "Int1")
            tableMapping.ColumnMappings.Add("BigInt1", "BigInt1")
            tableMapping.ColumnMappings.Add("Float1", "Float1")
            tableMapping.ColumnMappings.Add("Real1", "Real1")
            tableMapping.ColumnMappings.Add("Char1", "Char1")
            tableMapping.ColumnMappings.Add("Text1", "Text1")
            tableMapping.ColumnMappings.Add("Nchar1", "Nchar1")
            tableMapping.ColumnMappings.Add("Nvarchar1", "Nvarchar1")
            tableMapping.ColumnMappings.Add("Bin1", "Bin1")
            tableMapping.ColumnMappings.Add("Varbin1", "Varbin1")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Test1] WHERE (([EmplNumber] = @Original_EmplNumber) AND ([Time"& _ 
                "Stamp1] = @Original_TimeStamp1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmplNumber", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmplNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TimeStamp1", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeStamp1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Test1] ([EmplNumber], [SerNo], [LastName], [FirstName], [Salar"& _ 
                "y], [BonusSmall], [BigDate], [SmallDate], [Bit1], [Tinyint1], [SmallInt1], [Int1"& _ 
                "], [BigInt1], [Float1], [Real1], [Char1], [Text1], [Nchar1], [Nvarchar1], [Bin1]"& _ 
                ", [Varbin1]) VALUES (@EmplNumber, @SerNo, @LastName, @FirstName, @Salary, @Bonus"& _ 
                "Small, @BigDate, @SmallDate, @Bit1, @Tinyint1, @SmallInt1, @Int1, @BigInt1, @Flo"& _ 
                "at1, @Real1, @Char1, @Text1, @Nchar1, @Nvarchar1, @Bin1, @Varbin1);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Empl"& _ 
                "Number, SerNo, TimeStamp1, LastName, FirstName, Salary, BonusSmall, BigDate, Sma"& _ 
                "llDate, Bit1, Tinyint1, SmallInt1, Int1, BigInt1, Float1, Real1, Char1, Text1, N"& _ 
                "char1, Nvarchar1, Bin1, Varbin1 FROM Test1 WHERE (EmplNumber = @EmplNumber)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmplNumber", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmplNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SerNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SerNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Salary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BonusSmall", Global.System.Data.SqlDbType.SmallMoney, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BonusSmall", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BigDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BigDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bit1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bit1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tinyint1", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tinyint1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallInt1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallInt1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Int1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Int1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BigInt1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BigInt1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Float1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Float1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Real1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Real1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Char1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Char1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Text1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Text1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nchar1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nchar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nvarchar1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nvarchar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bin1", Global.System.Data.SqlDbType.Binary, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bin1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Varbin1", Global.System.Data.SqlDbType.VarBinary, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Varbin1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Test1] SET [EmplNumber] = @EmplNumber, [SerNo] = @SerNo, [LastName]"& _ 
                " = @LastName, [FirstName] = @FirstName, [Salary] = @Salary, [BonusSmall] = @Bonu"& _ 
                "sSmall, [BigDate] = @BigDate, [SmallDate] = @SmallDate, [Bit1] = @Bit1, [Tinyint"& _ 
                "1] = @Tinyint1, [SmallInt1] = @SmallInt1, [Int1] = @Int1, [BigInt1] = @BigInt1, "& _ 
                "[Float1] = @Float1, [Real1] = @Real1, [Char1] = @Char1, [Text1] = @Text1, [Nchar"& _ 
                "1] = @Nchar1, [Nvarchar1] = @Nvarchar1, [Bin1] = @Bin1, [Varbin1] = @Varbin1 WHE"& _ 
                "RE (([EmplNumber] = @Original_EmplNumber) AND ([TimeStamp1] = @Original_TimeStam"& _ 
                "p1));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT EmplNumber, SerNo, TimeStamp1, LastName, FirstName, Salary, BonusS"& _ 
                "mall, BigDate, SmallDate, Bit1, Tinyint1, SmallInt1, Int1, BigInt1, Float1, Real"& _ 
                "1, Char1, Text1, Nchar1, Nvarchar1, Bin1, Varbin1 FROM Test1 WHERE (EmplNumber ="& _ 
                " @EmplNumber)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmplNumber", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmplNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SerNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SerNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.Money, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Salary", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BonusSmall", Global.System.Data.SqlDbType.SmallMoney, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BonusSmall", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BigDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BigDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallDate", Global.System.Data.SqlDbType.SmallDateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bit1", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bit1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tinyint1", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tinyint1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallInt1", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallInt1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Int1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Int1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BigInt1", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BigInt1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Float1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Float1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Real1", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Real1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Char1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Char1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Text1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Text1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nchar1", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nchar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Nvarchar1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Nvarchar1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bin1", Global.System.Data.SqlDbType.Binary, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bin1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Varbin1", Global.System.Data.SqlDbType.VarBinary, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Varbin1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmplNumber", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmplNumber", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TimeStamp1", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TimeStamp1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT EmplNumber, SerNo, TimeStamp1, LastName, FirstName, Salary, BonusSmall, Bi"& _ 
                "gDate, SmallDate, Bit1, Tinyint1, SmallInt1, Int1, BigInt1, Float1, Real1, Char1"& _ 
                ", Text1, Nchar1, Nvarchar1, Bin1, Varbin1 FROM dbo.Test1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.Test1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.Test1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.Test1DataTable = New SQDmetaDataSet.Test1DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.Test1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Test1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_EmplNumber As System.Guid, ByVal Original_TimeStamp1() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_EmplNumber,System.Guid)
            If (Original_TimeStamp1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TimeStamp1")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TimeStamp1,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal EmplNumber As System.Guid,  _
                    ByVal SerNo As Integer,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal Salary As Global.System.Nullable(Of Decimal),  _
                    ByVal BonusSmall As Global.System.Nullable(Of Decimal),  _
                    ByVal BigDate As Global.System.Nullable(Of Date),  _
                    ByVal SmallDate As Global.System.Nullable(Of Date),  _
                    ByVal Bit1 As Global.System.Nullable(Of Boolean),  _
                    ByVal Tinyint1 As Global.System.Nullable(Of Byte),  _
                    ByVal SmallInt1 As Global.System.Nullable(Of Short),  _
                    ByVal Int1 As Global.System.Nullable(Of Integer),  _
                    ByVal BigInt1 As Global.System.Nullable(Of Long),  _
                    ByVal Float1 As Global.System.Nullable(Of Double),  _
                    ByVal Real1 As Global.System.Nullable(Of Single),  _
                    ByVal Char1 As String,  _
                    ByVal Text1 As String,  _
                    ByVal Nchar1 As String,  _
                    ByVal Nvarchar1 As String,  _
                    ByVal Bin1() As Byte,  _
                    ByVal Varbin1() As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(EmplNumber,System.Guid)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(SerNo,Integer)
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LastName,String)
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FirstName,String)
            End If
            If (Salary.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Salary.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BonusSmall.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BonusSmall.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BigDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(BigDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SmallDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SmallDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Bit1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Bit1.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Tinyint1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Tinyint1.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SmallInt1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SmallInt1.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Int1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Int1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (BigInt1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(BigInt1.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Float1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Float1.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Real1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Real1.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Char1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Char1,String)
            End If
            If (Text1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Text1,String)
            End If
            If (Nchar1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Nchar1,String)
            End If
            If (Nvarchar1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Nvarchar1,String)
            End If
            If (Bin1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Bin1,Byte())
            End If
            If (Varbin1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Varbin1,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal EmplNumber As System.Guid,  _
                    ByVal SerNo As Integer,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal Salary As Global.System.Nullable(Of Decimal),  _
                    ByVal BonusSmall As Global.System.Nullable(Of Decimal),  _
                    ByVal BigDate As Global.System.Nullable(Of Date),  _
                    ByVal SmallDate As Global.System.Nullable(Of Date),  _
                    ByVal Bit1 As Global.System.Nullable(Of Boolean),  _
                    ByVal Tinyint1 As Global.System.Nullable(Of Byte),  _
                    ByVal SmallInt1 As Global.System.Nullable(Of Short),  _
                    ByVal Int1 As Global.System.Nullable(Of Integer),  _
                    ByVal BigInt1 As Global.System.Nullable(Of Long),  _
                    ByVal Float1 As Global.System.Nullable(Of Double),  _
                    ByVal Real1 As Global.System.Nullable(Of Single),  _
                    ByVal Char1 As String,  _
                    ByVal Text1 As String,  _
                    ByVal Nchar1 As String,  _
                    ByVal Nvarchar1 As String,  _
                    ByVal Bin1() As Byte,  _
                    ByVal Varbin1() As Byte,  _
                    ByVal Original_EmplNumber As System.Guid,  _
                    ByVal Original_TimeStamp1() As Byte) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(EmplNumber,System.Guid)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SerNo,Integer)
            If (LastName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LastName")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LastName,String)
            End If
            If (FirstName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FirstName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FirstName,String)
            End If
            If (Salary.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Salary.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BonusSmall.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BonusSmall.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (BigDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(BigDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (SmallDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SmallDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Bit1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Bit1.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Tinyint1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Tinyint1.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (SmallInt1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SmallInt1.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Int1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Int1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (BigInt1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(BigInt1.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Float1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Float1.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Real1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Real1.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Char1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Char1,String)
            End If
            If (Text1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Text1,String)
            End If
            If (Nchar1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Nchar1,String)
            End If
            If (Nvarchar1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Nvarchar1,String)
            End If
            If (Bin1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Bin1,Byte())
            End If
            If (Varbin1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Varbin1,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_EmplNumber,System.Guid)
            If (Original_TimeStamp1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TimeStamp1")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TimeStamp1,Byte())
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SerNo As Integer,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal Salary As Global.System.Nullable(Of Decimal),  _
                    ByVal BonusSmall As Global.System.Nullable(Of Decimal),  _
                    ByVal BigDate As Global.System.Nullable(Of Date),  _
                    ByVal SmallDate As Global.System.Nullable(Of Date),  _
                    ByVal Bit1 As Global.System.Nullable(Of Boolean),  _
                    ByVal Tinyint1 As Global.System.Nullable(Of Byte),  _
                    ByVal SmallInt1 As Global.System.Nullable(Of Short),  _
                    ByVal Int1 As Global.System.Nullable(Of Integer),  _
                    ByVal BigInt1 As Global.System.Nullable(Of Long),  _
                    ByVal Float1 As Global.System.Nullable(Of Double),  _
                    ByVal Real1 As Global.System.Nullable(Of Single),  _
                    ByVal Char1 As String,  _
                    ByVal Text1 As String,  _
                    ByVal Nchar1 As String,  _
                    ByVal Nvarchar1 As String,  _
                    ByVal Bin1() As Byte,  _
                    ByVal Varbin1() As Byte,  _
                    ByVal Original_EmplNumber As System.Guid,  _
                    ByVal Original_TimeStamp1() As Byte) As Integer
            Return Me.Update(Original_EmplNumber, SerNo, LastName, FirstName, Salary, BonusSmall, BigDate, SmallDate, Bit1, Tinyint1, SmallInt1, Int1, BigInt1, Float1, Real1, Char1, Text1, Nchar1, Nvarchar1, Bin1, Varbin1, Original_EmplNumber, Original_TimeStamp1)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VARIABLESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VARIABLES"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("VARIABLENAME", "VARIABLENAME")
            tableMapping.ColumnMappings.Add("VARIABLEDESCRIPTION", "VARIABLEDESCRIPTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VARIABLES] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND "& _ 
                "([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SY"& _ 
                "STEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([VARIABLENAME] = @Origi"& _ 
                "nal_VARIABLENAME) AND ((@IsNull_VARIABLEDESCRIPTION = 1 AND [VARIABLEDESCRIPTION"& _ 
                "] IS NULL) OR ([VARIABLEDESCRIPTION] = @Original_VARIABLEDESCRIPTION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VARIABLEDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VARIABLES] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME], [E"& _ 
                "NGINENAME], [VARIABLENAME], [VARIABLEDESCRIPTION]) VALUES (@PROJECTNAME, @ENVIRO"& _ 
                "NMENTNAME, @SYSTEMNAME, @ENGINENAME, @VARIABLENAME, @VARIABLEDESCRIPTION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME, VARIABLED"& _ 
                "ESCRIPTION FROM VARIABLES WHERE (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME "& _ 
                "= @ENVIRONMENTNAME) AND (PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNA"& _ 
                "ME) AND (VARIABLENAME = @VARIABLENAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VARIABLES] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] = @E"& _ 
                "NVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [VARIABL"& _ 
                "ENAME] = @VARIABLENAME, [VARIABLEDESCRIPTION] = @VARIABLEDESCRIPTION WHERE (([PR"& _ 
                "OJECTNAME] = @Original_PROJECTNAME) AND ([ENVIRONMENTNAME] = @Original_ENVIRONME"& _ 
                "NTNAME) AND ([SYSTEMNAME] = @Original_SYSTEMNAME) AND ([ENGINENAME] = @Original_"& _ 
                "ENGINENAME) AND ([VARIABLENAME] = @Original_VARIABLENAME) AND ((@IsNull_VARIABLE"& _ 
                "DESCRIPTION = 1 AND [VARIABLEDESCRIPTION] IS NULL) OR ([VARIABLEDESCRIPTION] = @"& _ 
                "Original_VARIABLEDESCRIPTION)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAM"& _ 
                "E, ENGINENAME, VARIABLENAME, VARIABLEDESCRIPTION FROM VARIABLES WHERE (ENGINENAM"& _ 
                "E = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PROJECTNAME = @PR"& _ 
                "OJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND (VARIABLENAME = @VARIABLENAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEDESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VARIABLEDESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEDESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLEDESCRIPTION", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEDESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME, VARIAB"& _ 
                "LEDESCRIPTION FROM dbo.VARIABLES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.VARIABLESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.VARIABLESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.VARIABLESDataTable = New SQDmetaDataSet.VARIABLESDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.VARIABLESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "VARIABLES")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_VARIABLENAME As String, ByVal Original_VARIABLEDESCRIPTION As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VARIABLENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_VARIABLENAME,String)
            End If
            If (Original_VARIABLEDESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_VARIABLEDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEDESCRIPTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VARIABLENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(VARIABLENAME,String)
            End If
            If (VARIABLEDESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VARIABLEDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEDESCRIPTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_VARIABLENAME As String, ByVal Original_VARIABLEDESCRIPTION As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VARIABLENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(VARIABLENAME,String)
            End If
            If (VARIABLEDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(VARIABLEDESCRIPTION,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VARIABLENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_VARIABLENAME,String)
            End If
            If (Original_VARIABLEDESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_VARIABLEDESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VARIABLEDESCRIPTION As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_VARIABLENAME As String, ByVal Original_VARIABLEDESCRIPTION As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_VARIABLENAME, VARIABLEDESCRIPTION, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_VARIABLENAME, Original_VARIABLEDESCRIPTION)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VARIABLESATTRTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VARIABLESATTR"
            tableMapping.ColumnMappings.Add("PROJECTNAME", "PROJECTNAME")
            tableMapping.ColumnMappings.Add("ENVIRONMENTNAME", "ENVIRONMENTNAME")
            tableMapping.ColumnMappings.Add("SYSTEMNAME", "SYSTEMNAME")
            tableMapping.ColumnMappings.Add("ENGINENAME", "ENGINENAME")
            tableMapping.ColumnMappings.Add("VARIABLENAME", "VARIABLENAME")
            tableMapping.ColumnMappings.Add("VARIABLEATTRB", "VARIABLEATTRB")
            tableMapping.ColumnMappings.Add("VARIABLEATTRBVALUE", "VARIABLEATTRBVALUE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[VARIABLESATTR] WHERE (([PROJECTNAME] = @Original_PROJECTNAME) "& _ 
                "AND ([ENVIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Origina"& _ 
                "l_SYSTEMNAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([VARIABLENAME] = @O"& _ 
                "riginal_VARIABLENAME) AND ([VARIABLEATTRB] = @Original_VARIABLEATTRB) AND ((@IsN"& _ 
                "ull_VARIABLEATTRBVALUE = 1 AND [VARIABLEATTRBVALUE] IS NULL) OR ([VARIABLEATTRBV"& _ 
                "ALUE] = @Original_VARIABLEATTRBVALUE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VARIABLEATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[VARIABLESATTR] ([PROJECTNAME], [ENVIRONMENTNAME], [SYSTEMNAME]"& _ 
                ", [ENGINENAME], [VARIABLENAME], [VARIABLEATTRB], [VARIABLEATTRBVALUE]) VALUES (@"& _ 
                "PROJECTNAME, @ENVIRONMENTNAME, @SYSTEMNAME, @ENGINENAME, @VARIABLENAME, @VARIABL"& _ 
                "EATTRB, @VARIABLEATTRBVALUE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, "& _ 
                "ENGINENAME, VARIABLENAME, VARIABLEATTRB, VARIABLEATTRBVALUE FROM VARIABLESATTR W"& _ 
                "HERE (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND (PR"& _ 
                "OJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND (VARIABLEATTRB = @V"& _ 
                "ARIABLEATTRB) AND (VARIABLENAME = @VARIABLENAME)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[VARIABLESATTR] SET [PROJECTNAME] = @PROJECTNAME, [ENVIRONMENTNAME] "& _ 
                "= @ENVIRONMENTNAME, [SYSTEMNAME] = @SYSTEMNAME, [ENGINENAME] = @ENGINENAME, [VAR"& _ 
                "IABLENAME] = @VARIABLENAME, [VARIABLEATTRB] = @VARIABLEATTRB, [VARIABLEATTRBVALU"& _ 
                "E] = @VARIABLEATTRBVALUE WHERE (([PROJECTNAME] = @Original_PROJECTNAME) AND ([EN"& _ 
                "VIRONMENTNAME] = @Original_ENVIRONMENTNAME) AND ([SYSTEMNAME] = @Original_SYSTEM"& _ 
                "NAME) AND ([ENGINENAME] = @Original_ENGINENAME) AND ([VARIABLENAME] = @Original_"& _ 
                "VARIABLENAME) AND ([VARIABLEATTRB] = @Original_VARIABLEATTRB) AND ((@IsNull_VARI"& _ 
                "ABLEATTRBVALUE = 1 AND [VARIABLEATTRBVALUE] IS NULL) OR ([VARIABLEATTRBVALUE] = "& _ 
                "@Original_VARIABLEATTRBVALUE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAM"& _ 
                "E, ENGINENAME, VARIABLENAME, VARIABLEATTRB, VARIABLEATTRBVALUE FROM VARIABLESATT"& _ 
                "R WHERE (ENGINENAME = @ENGINENAME) AND (ENVIRONMENTNAME = @ENVIRONMENTNAME) AND "& _ 
                "(PROJECTNAME = @PROJECTNAME) AND (SYSTEMNAME = @SYSTEMNAME) AND (VARIABLEATTRB ="& _ 
                " @VARIABLEATTRB) AND (VARIABLENAME = @VARIABLENAME)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VARIABLEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRBVALUE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROJECTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROJECTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENVIRONMENTNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENVIRONMENTNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SYSTEMNAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SYSTEMNAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ENGINENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ENGINENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLENAME", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLENAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLEATTRB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VARIABLEATTRBVALUE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRBVALUE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VARIABLEATTRBVALUE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VARIABLEATTRBVALUE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.SQLCDC.My.MySettings.Default.SQDmetaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROJECTNAME, ENVIRONMENTNAME, SYSTEMNAME, ENGINENAME, VARIABLENAME, VARIAB"& _ 
                "LEATTRB, VARIABLEATTRBVALUE FROM dbo.VARIABLESATTR"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As SQDmetaDataSet.VARIABLESATTRDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As SQDmetaDataSet.VARIABLESATTRDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SQDmetaDataSet.VARIABLESATTRDataTable = New SQDmetaDataSet.VARIABLESATTRDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As SQDmetaDataSet.VARIABLESATTRDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As SQDmetaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "VARIABLESATTR")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_VARIABLENAME As String, ByVal Original_VARIABLEATTRB As String, ByVal Original_VARIABLEATTRBVALUE As String) As Integer
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VARIABLENAME")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_VARIABLENAME,String)
            End If
            If (Original_VARIABLEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VARIABLEATTRB")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_VARIABLEATTRB,String)
            End If
            If (Original_VARIABLEATTRBVALUE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_VARIABLEATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEATTRB As String, ByVal VARIABLEATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VARIABLENAME")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(VARIABLENAME,String)
            End If
            If (VARIABLEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VARIABLEATTRB")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(VARIABLEATTRB,String)
            End If
            If (VARIABLEATTRBVALUE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(VARIABLEATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROJECTNAME As String, ByVal ENVIRONMENTNAME As String, ByVal SYSTEMNAME As String, ByVal ENGINENAME As String, ByVal VARIABLENAME As String, ByVal VARIABLEATTRB As String, ByVal VARIABLEATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_VARIABLENAME As String, ByVal Original_VARIABLEATTRB As String, ByVal Original_VARIABLEATTRBVALUE As String) As Integer
            If (PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROJECTNAME,String)
            End If
            If (ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ENVIRONMENTNAME,String)
            End If
            If (SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYSTEMNAME,String)
            End If
            If (ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ENGINENAME,String)
            End If
            If (VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VARIABLENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(VARIABLENAME,String)
            End If
            If (VARIABLEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VARIABLEATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(VARIABLEATTRB,String)
            End If
            If (VARIABLEATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(VARIABLEATTRBVALUE,String)
            End If
            If (Original_PROJECTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PROJECTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PROJECTNAME,String)
            End If
            If (Original_ENVIRONMENTNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENVIRONMENTNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ENVIRONMENTNAME,String)
            End If
            If (Original_SYSTEMNAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SYSTEMNAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_SYSTEMNAME,String)
            End If
            If (Original_ENGINENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ENGINENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ENGINENAME,String)
            End If
            If (Original_VARIABLENAME Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VARIABLENAME")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_VARIABLENAME,String)
            End If
            If (Original_VARIABLEATTRB Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VARIABLEATTRB")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_VARIABLEATTRB,String)
            End If
            If (Original_VARIABLEATTRBVALUE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_VARIABLEATTRBVALUE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal VARIABLEATTRBVALUE As String, ByVal Original_PROJECTNAME As String, ByVal Original_ENVIRONMENTNAME As String, ByVal Original_SYSTEMNAME As String, ByVal Original_ENGINENAME As String, ByVal Original_VARIABLENAME As String, ByVal Original_VARIABLEATTRB As String, ByVal Original_VARIABLEATTRBVALUE As String) As Integer
            Return Me.Update(Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_VARIABLENAME, Original_VARIABLEATTRB, VARIABLEATTRBVALUE, Original_PROJECTNAME, Original_ENVIRONMENTNAME, Original_SYSTEMNAME, Original_ENGINENAME, Original_VARIABLENAME, Original_VARIABLEATTRB, Original_VARIABLEATTRBVALUE)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _cONNECTIONSTableAdapter As CONNECTIONSTableAdapter
        
        Private _cONNECTIONSATTRTableAdapter As CONNECTIONSATTRTableAdapter
        
        Private _dATASTORESTableAdapter As DATASTORESTableAdapter
        
        Private _dATASTORESATTRTableAdapter As DATASTORESATTRTableAdapter
        
        Private _dESCRIPTIONFIELDSTableAdapter As DESCRIPTIONFIELDSTableAdapter
        
        Private _dESCRIPTIONSTableAdapter As DESCRIPTIONSTableAdapter
        
        Private _dESCRIPTIONSATTRTableAdapter As DESCRIPTIONSATTRTableAdapter
        
        Private _dESCRIPTIONSELECTTableAdapter As DESCRIPTIONSELECTTableAdapter
        
        Private _dESCRIPTSELFIELDSTableAdapter As DESCRIPTSELFIELDSTableAdapter
        
        Private _dSSELECTIONSTableAdapter As DSSELECTIONSTableAdapter
        
        Private _dSSELFIELDSTableAdapter As DSSELFIELDSTableAdapter
        
        Private _eNGINESTableAdapter As ENGINESTableAdapter
        
        Private _eNGINESATTRTableAdapter As ENGINESATTRTableAdapter
        
        Private _eNVIRONMENTSTableAdapter As ENVIRONMENTSTableAdapter
        
        Private _eNVIRONMENTSATTRTableAdapter As ENVIRONMENTSATTRTableAdapter
        
        Private _pROJECTATTRTableAdapter As PROJECTATTRTableAdapter
        
        Private _pROJECTSTableAdapter As PROJECTSTableAdapter
        
        Private _sYSTEMSTableAdapter As SYSTEMSTableAdapter
        
        Private _sYSTEMSATTRTableAdapter As SYSTEMSATTRTableAdapter
        
        Private _tASKDSTableAdapter As TASKDSTableAdapter
        
        Private _tASKMAPTableAdapter As TASKMAPTableAdapter
        
        Private _tASKSTableAdapter As TASKSTableAdapter
        
        Private _test1TableAdapter As Test1TableAdapter
        
        Private _vARIABLESTableAdapter As VARIABLESTableAdapter
        
        Private _vARIABLESATTRTableAdapter As VARIABLESATTRTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CONNECTIONSTableAdapter() As CONNECTIONSTableAdapter
            Get
                Return Me._cONNECTIONSTableAdapter
            End Get
            Set
                Me._cONNECTIONSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CONNECTIONSATTRTableAdapter() As CONNECTIONSATTRTableAdapter
            Get
                Return Me._cONNECTIONSATTRTableAdapter
            End Get
            Set
                Me._cONNECTIONSATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DATASTORESTableAdapter() As DATASTORESTableAdapter
            Get
                Return Me._dATASTORESTableAdapter
            End Get
            Set
                Me._dATASTORESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DATASTORESATTRTableAdapter() As DATASTORESATTRTableAdapter
            Get
                Return Me._dATASTORESATTRTableAdapter
            End Get
            Set
                Me._dATASTORESATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DESCRIPTIONFIELDSTableAdapter() As DESCRIPTIONFIELDSTableAdapter
            Get
                Return Me._dESCRIPTIONFIELDSTableAdapter
            End Get
            Set
                Me._dESCRIPTIONFIELDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DESCRIPTIONSTableAdapter() As DESCRIPTIONSTableAdapter
            Get
                Return Me._dESCRIPTIONSTableAdapter
            End Get
            Set
                Me._dESCRIPTIONSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DESCRIPTIONSATTRTableAdapter() As DESCRIPTIONSATTRTableAdapter
            Get
                Return Me._dESCRIPTIONSATTRTableAdapter
            End Get
            Set
                Me._dESCRIPTIONSATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DESCRIPTIONSELECTTableAdapter() As DESCRIPTIONSELECTTableAdapter
            Get
                Return Me._dESCRIPTIONSELECTTableAdapter
            End Get
            Set
                Me._dESCRIPTIONSELECTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DESCRIPTSELFIELDSTableAdapter() As DESCRIPTSELFIELDSTableAdapter
            Get
                Return Me._dESCRIPTSELFIELDSTableAdapter
            End Get
            Set
                Me._dESCRIPTSELFIELDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DSSELECTIONSTableAdapter() As DSSELECTIONSTableAdapter
            Get
                Return Me._dSSELECTIONSTableAdapter
            End Get
            Set
                Me._dSSELECTIONSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DSSELFIELDSTableAdapter() As DSSELFIELDSTableAdapter
            Get
                Return Me._dSSELFIELDSTableAdapter
            End Get
            Set
                Me._dSSELFIELDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ENGINESTableAdapter() As ENGINESTableAdapter
            Get
                Return Me._eNGINESTableAdapter
            End Get
            Set
                Me._eNGINESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ENGINESATTRTableAdapter() As ENGINESATTRTableAdapter
            Get
                Return Me._eNGINESATTRTableAdapter
            End Get
            Set
                Me._eNGINESATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ENVIRONMENTSTableAdapter() As ENVIRONMENTSTableAdapter
            Get
                Return Me._eNVIRONMENTSTableAdapter
            End Get
            Set
                Me._eNVIRONMENTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ENVIRONMENTSATTRTableAdapter() As ENVIRONMENTSATTRTableAdapter
            Get
                Return Me._eNVIRONMENTSATTRTableAdapter
            End Get
            Set
                Me._eNVIRONMENTSATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PROJECTATTRTableAdapter() As PROJECTATTRTableAdapter
            Get
                Return Me._pROJECTATTRTableAdapter
            End Get
            Set
                Me._pROJECTATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PROJECTSTableAdapter() As PROJECTSTableAdapter
            Get
                Return Me._pROJECTSTableAdapter
            End Get
            Set
                Me._pROJECTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYSTEMSTableAdapter() As SYSTEMSTableAdapter
            Get
                Return Me._sYSTEMSTableAdapter
            End Get
            Set
                Me._sYSTEMSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SYSTEMSATTRTableAdapter() As SYSTEMSATTRTableAdapter
            Get
                Return Me._sYSTEMSATTRTableAdapter
            End Get
            Set
                Me._sYSTEMSATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TASKDSTableAdapter() As TASKDSTableAdapter
            Get
                Return Me._tASKDSTableAdapter
            End Get
            Set
                Me._tASKDSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TASKMAPTableAdapter() As TASKMAPTableAdapter
            Get
                Return Me._tASKMAPTableAdapter
            End Get
            Set
                Me._tASKMAPTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TASKSTableAdapter() As TASKSTableAdapter
            Get
                Return Me._tASKSTableAdapter
            End Get
            Set
                Me._tASKSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Test1TableAdapter() As Test1TableAdapter
            Get
                Return Me._test1TableAdapter
            End Get
            Set
                Me._test1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VARIABLESTableAdapter() As VARIABLESTableAdapter
            Get
                Return Me._vARIABLESTableAdapter
            End Get
            Set
                Me._vARIABLESTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property VARIABLESATTRTableAdapter() As VARIABLESATTRTableAdapter
            Get
                Return Me._vARIABLESATTRTableAdapter
            End Get
            Set
                Me._vARIABLESATTRTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._cONNECTIONSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cONNECTIONSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cONNECTIONSTableAdapter.Connection
                End If
                If ((Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cONNECTIONSATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cONNECTIONSATTRTableAdapter.Connection
                End If
                If ((Not (Me._dATASTORESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dATASTORESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dATASTORESTableAdapter.Connection
                End If
                If ((Not (Me._dATASTORESATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dATASTORESATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dATASTORESATTRTableAdapter.Connection
                End If
                If ((Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dESCRIPTIONFIELDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dESCRIPTIONFIELDSTableAdapter.Connection
                End If
                If ((Not (Me._dESCRIPTIONSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dESCRIPTIONSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dESCRIPTIONSTableAdapter.Connection
                End If
                If ((Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dESCRIPTIONSATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dESCRIPTIONSATTRTableAdapter.Connection
                End If
                If ((Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dESCRIPTIONSELECTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dESCRIPTIONSELECTTableAdapter.Connection
                End If
                If ((Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dESCRIPTSELFIELDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dESCRIPTSELFIELDSTableAdapter.Connection
                End If
                If ((Not (Me._dSSELECTIONSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dSSELECTIONSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dSSELECTIONSTableAdapter.Connection
                End If
                If ((Not (Me._dSSELFIELDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dSSELFIELDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dSSELFIELDSTableAdapter.Connection
                End If
                If ((Not (Me._eNGINESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eNGINESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eNGINESTableAdapter.Connection
                End If
                If ((Not (Me._eNGINESATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eNGINESATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eNGINESATTRTableAdapter.Connection
                End If
                If ((Not (Me._eNVIRONMENTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eNVIRONMENTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eNVIRONMENTSTableAdapter.Connection
                End If
                If ((Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eNVIRONMENTSATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eNVIRONMENTSATTRTableAdapter.Connection
                End If
                If ((Not (Me._pROJECTATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pROJECTATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pROJECTATTRTableAdapter.Connection
                End If
                If ((Not (Me._pROJECTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pROJECTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pROJECTSTableAdapter.Connection
                End If
                If ((Not (Me._sYSTEMSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYSTEMSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYSTEMSTableAdapter.Connection
                End If
                If ((Not (Me._sYSTEMSATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sYSTEMSATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sYSTEMSATTRTableAdapter.Connection
                End If
                If ((Not (Me._tASKDSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tASKDSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tASKDSTableAdapter.Connection
                End If
                If ((Not (Me._tASKMAPTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tASKMAPTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tASKMAPTableAdapter.Connection
                End If
                If ((Not (Me._tASKSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tASKSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tASKSTableAdapter.Connection
                End If
                If ((Not (Me._test1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._test1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._test1TableAdapter.Connection
                End If
                If ((Not (Me._vARIABLESTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vARIABLESTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vARIABLESTableAdapter.Connection
                End If
                If ((Not (Me._vARIABLESATTRTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._vARIABLESATTRTableAdapter.Connection) Is Nothing)) Then
                    Return Me._vARIABLESATTRTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._cONNECTIONSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dATASTORESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dATASTORESATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dESCRIPTIONSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dSSELECTIONSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dSSELFIELDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eNGINESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eNGINESATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eNVIRONMENTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pROJECTATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pROJECTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYSTEMSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sYSTEMSATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tASKDSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tASKMAPTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tASKSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._test1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vARIABLESTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._vARIABLESATTRTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As SQDmetaDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pROJECTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PROJECTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pROJECTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYSTEMSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYSTEMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYSTEMSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sYSTEMSATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SYSTEMSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sYSTEMSATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eNVIRONMENTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ENVIRONMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eNVIRONMENTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ENVIRONMENTSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eNVIRONMENTSATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pROJECTATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PROJECTATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pROJECTATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._test1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Test1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._test1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vARIABLESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VARIABLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vARIABLESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._vARIABLESATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.VARIABLESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._vARIABLESATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tASKDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TASKDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tASKDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tASKMAPTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TASKMAP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tASKMAPTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tASKSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TASKS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tASKSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eNGINESATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ENGINESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eNGINESATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dATASTORESATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DATASTORESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dATASTORESATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONFIELDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cONNECTIONSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CONNECTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cONNECTIONSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CONNECTIONSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cONNECTIONSATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dATASTORESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DATASTORES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dATASTORESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dSSELECTIONSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DSSELECTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dSSELECTIONSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dSSELFIELDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DSSELFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dSSELFIELDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eNGINESTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ENGINES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eNGINESTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSATTRTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONSELECT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSELECTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTSELFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dESCRIPTSELFIELDSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As SQDmetaDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._pROJECTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PROJECTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pROJECTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYSTEMSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYSTEMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYSTEMSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sYSTEMSATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SYSTEMSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sYSTEMSATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eNVIRONMENTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ENVIRONMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eNVIRONMENTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ENVIRONMENTSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eNVIRONMENTSATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pROJECTATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PROJECTATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pROJECTATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._test1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Test1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._test1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vARIABLESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VARIABLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vARIABLESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._vARIABLESATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.VARIABLESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._vARIABLESATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tASKDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TASKDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tASKDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tASKMAPTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TASKMAP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tASKMAPTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tASKSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TASKS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tASKSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eNGINESATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ENGINESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eNGINESATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dATASTORESATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DATASTORESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dATASTORESATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONFIELDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cONNECTIONSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CONNECTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cONNECTIONSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CONNECTIONSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cONNECTIONSATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dATASTORESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DATASTORES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dATASTORESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dSSELECTIONSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DSSELECTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dSSELECTIONSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dSSELFIELDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DSSELFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dSSELFIELDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eNGINESTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ENGINES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eNGINESTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSATTRTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONSELECT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSELECTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTSELFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dESCRIPTSELFIELDSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As SQDmetaDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTSELFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dESCRIPTSELFIELDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONSELECT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSELECTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eNGINESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ENGINES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eNGINESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dSSELFIELDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DSSELFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dSSELFIELDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dSSELECTIONSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DSSELECTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dSSELECTIONSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dATASTORESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DATASTORES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dATASTORESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CONNECTIONSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cONNECTIONSATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cONNECTIONSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CONNECTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cONNECTIONSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DESCRIPTIONFIELDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dESCRIPTIONFIELDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dATASTORESATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.DATASTORESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dATASTORESATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eNGINESATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ENGINESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eNGINESATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tASKSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TASKS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tASKSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tASKMAPTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TASKMAP.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tASKMAPTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tASKDSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TASKDS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tASKDSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vARIABLESATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VARIABLESATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vARIABLESATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._vARIABLESTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.VARIABLES.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._vARIABLESTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._test1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Test1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._test1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pROJECTATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PROJECTATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pROJECTATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ENVIRONMENTSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eNVIRONMENTSATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eNVIRONMENTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ENVIRONMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eNVIRONMENTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYSTEMSATTRTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYSTEMSATTR.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYSTEMSATTRTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sYSTEMSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SYSTEMS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sYSTEMSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pROJECTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PROJECTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pROJECTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As SQDmetaDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._cONNECTIONSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cONNECTIONSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cONNECTIONSATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dATASTORESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dATASTORESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dATASTORESATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dATASTORESATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dESCRIPTIONFIELDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dESCRIPTIONSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dESCRIPTIONSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dESCRIPTIONSATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dESCRIPTIONSELECTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dESCRIPTSELFIELDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dSSELECTIONSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dSSELECTIONSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dSSELFIELDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dSSELFIELDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eNGINESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eNGINESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eNGINESATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eNGINESATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eNVIRONMENTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eNVIRONMENTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eNVIRONMENTSATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pROJECTATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pROJECTATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pROJECTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pROJECTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYSTEMSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYSTEMSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sYSTEMSATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sYSTEMSATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tASKDSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tASKDSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tASKMAPTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tASKMAPTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tASKSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tASKSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._test1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._test1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._vARIABLESTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vARIABLESTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._vARIABLESATTRTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._vARIABLESATTRTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._cONNECTIONSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cONNECTIONSTableAdapter, Me._cONNECTIONSTableAdapter.Connection)
                    Me._cONNECTIONSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cONNECTIONSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cONNECTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cONNECTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cONNECTIONSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cONNECTIONSATTRTableAdapter, Me._cONNECTIONSATTRTableAdapter.Connection)
                    Me._cONNECTIONSATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cONNECTIONSATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cONNECTIONSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cONNECTIONSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cONNECTIONSATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dATASTORESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dATASTORESTableAdapter, Me._dATASTORESTableAdapter.Connection)
                    Me._dATASTORESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dATASTORESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dATASTORESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dATASTORESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dATASTORESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dATASTORESATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dATASTORESATTRTableAdapter, Me._dATASTORESATTRTableAdapter.Connection)
                    Me._dATASTORESATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dATASTORESATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dATASTORESATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dATASTORESATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dATASTORESATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dESCRIPTIONFIELDSTableAdapter, Me._dESCRIPTIONFIELDSTableAdapter.Connection)
                    Me._dESCRIPTIONFIELDSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONFIELDSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dESCRIPTIONFIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dESCRIPTIONFIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dESCRIPTIONFIELDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dESCRIPTIONSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dESCRIPTIONSTableAdapter, Me._dESCRIPTIONSTableAdapter.Connection)
                    Me._dESCRIPTIONSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dESCRIPTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dESCRIPTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dESCRIPTIONSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dESCRIPTIONSATTRTableAdapter, Me._dESCRIPTIONSATTRTableAdapter.Connection)
                    Me._dESCRIPTIONSATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONSATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dESCRIPTIONSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dESCRIPTIONSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dESCRIPTIONSATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dESCRIPTIONSELECTTableAdapter, Me._dESCRIPTIONSELECTTableAdapter.Connection)
                    Me._dESCRIPTIONSELECTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONSELECTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dESCRIPTIONSELECTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dESCRIPTIONSELECTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dESCRIPTIONSELECTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dESCRIPTSELFIELDSTableAdapter, Me._dESCRIPTSELFIELDSTableAdapter.Connection)
                    Me._dESCRIPTSELFIELDSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTSELFIELDSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dESCRIPTSELFIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dESCRIPTSELFIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dESCRIPTSELFIELDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dSSELECTIONSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dSSELECTIONSTableAdapter, Me._dSSELECTIONSTableAdapter.Connection)
                    Me._dSSELECTIONSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dSSELECTIONSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dSSELECTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dSSELECTIONSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dSSELECTIONSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dSSELFIELDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dSSELFIELDSTableAdapter, Me._dSSELFIELDSTableAdapter.Connection)
                    Me._dSSELFIELDSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dSSELFIELDSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dSSELFIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dSSELFIELDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dSSELFIELDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eNGINESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eNGINESTableAdapter, Me._eNGINESTableAdapter.Connection)
                    Me._eNGINESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eNGINESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eNGINESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eNGINESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eNGINESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eNGINESATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eNGINESATTRTableAdapter, Me._eNGINESATTRTableAdapter.Connection)
                    Me._eNGINESATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eNGINESATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eNGINESATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eNGINESATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eNGINESATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eNVIRONMENTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eNVIRONMENTSTableAdapter, Me._eNVIRONMENTSTableAdapter.Connection)
                    Me._eNVIRONMENTSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eNVIRONMENTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eNVIRONMENTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eNVIRONMENTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eNVIRONMENTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eNVIRONMENTSATTRTableAdapter, Me._eNVIRONMENTSATTRTableAdapter.Connection)
                    Me._eNVIRONMENTSATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eNVIRONMENTSATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eNVIRONMENTSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eNVIRONMENTSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eNVIRONMENTSATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pROJECTATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pROJECTATTRTableAdapter, Me._pROJECTATTRTableAdapter.Connection)
                    Me._pROJECTATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pROJECTATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pROJECTATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pROJECTATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pROJECTATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pROJECTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pROJECTSTableAdapter, Me._pROJECTSTableAdapter.Connection)
                    Me._pROJECTSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._pROJECTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._pROJECTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pROJECTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pROJECTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYSTEMSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYSTEMSTableAdapter, Me._sYSTEMSTableAdapter.Connection)
                    Me._sYSTEMSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYSTEMSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYSTEMSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYSTEMSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYSTEMSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sYSTEMSATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sYSTEMSATTRTableAdapter, Me._sYSTEMSATTRTableAdapter.Connection)
                    Me._sYSTEMSATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._sYSTEMSATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._sYSTEMSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sYSTEMSATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sYSTEMSATTRTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tASKDSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tASKDSTableAdapter, Me._tASKDSTableAdapter.Connection)
                    Me._tASKDSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tASKDSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tASKDSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tASKDSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tASKDSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tASKMAPTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tASKMAPTableAdapter, Me._tASKMAPTableAdapter.Connection)
                    Me._tASKMAPTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tASKMAPTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tASKMAPTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tASKMAPTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tASKMAPTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tASKSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tASKSTableAdapter, Me._tASKSTableAdapter.Connection)
                    Me._tASKSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tASKSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tASKSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tASKSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tASKSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._test1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._test1TableAdapter, Me._test1TableAdapter.Connection)
                    Me._test1TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._test1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._test1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._test1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._test1TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vARIABLESTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vARIABLESTableAdapter, Me._vARIABLESTableAdapter.Connection)
                    Me._vARIABLESTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vARIABLESTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vARIABLESTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vARIABLESTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vARIABLESTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._vARIABLESATTRTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._vARIABLESATTRTableAdapter, Me._vARIABLESATTRTableAdapter.Connection)
                    Me._vARIABLESATTRTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._vARIABLESATTRTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._vARIABLESATTRTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._vARIABLESATTRTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._vARIABLESATTRTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._cONNECTIONSTableAdapter) Is Nothing) Then
                    Me._cONNECTIONSTableAdapter.Connection = CType(revertConnections(Me._cONNECTIONSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cONNECTIONSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cONNECTIONSATTRTableAdapter) Is Nothing) Then
                    Me._cONNECTIONSATTRTableAdapter.Connection = CType(revertConnections(Me._cONNECTIONSATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cONNECTIONSATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dATASTORESTableAdapter) Is Nothing) Then
                    Me._dATASTORESTableAdapter.Connection = CType(revertConnections(Me._dATASTORESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dATASTORESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dATASTORESATTRTableAdapter) Is Nothing) Then
                    Me._dATASTORESATTRTableAdapter.Connection = CType(revertConnections(Me._dATASTORESATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dATASTORESATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dESCRIPTIONFIELDSTableAdapter) Is Nothing) Then
                    Me._dESCRIPTIONFIELDSTableAdapter.Connection = CType(revertConnections(Me._dESCRIPTIONFIELDSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONFIELDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dESCRIPTIONSTableAdapter) Is Nothing) Then
                    Me._dESCRIPTIONSTableAdapter.Connection = CType(revertConnections(Me._dESCRIPTIONSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dESCRIPTIONSATTRTableAdapter) Is Nothing) Then
                    Me._dESCRIPTIONSATTRTableAdapter.Connection = CType(revertConnections(Me._dESCRIPTIONSATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONSATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dESCRIPTIONSELECTTableAdapter) Is Nothing) Then
                    Me._dESCRIPTIONSELECTTableAdapter.Connection = CType(revertConnections(Me._dESCRIPTIONSELECTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTIONSELECTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dESCRIPTSELFIELDSTableAdapter) Is Nothing) Then
                    Me._dESCRIPTSELFIELDSTableAdapter.Connection = CType(revertConnections(Me._dESCRIPTSELFIELDSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dESCRIPTSELFIELDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dSSELECTIONSTableAdapter) Is Nothing) Then
                    Me._dSSELECTIONSTableAdapter.Connection = CType(revertConnections(Me._dSSELECTIONSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dSSELECTIONSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dSSELFIELDSTableAdapter) Is Nothing) Then
                    Me._dSSELFIELDSTableAdapter.Connection = CType(revertConnections(Me._dSSELFIELDSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dSSELFIELDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eNGINESTableAdapter) Is Nothing) Then
                    Me._eNGINESTableAdapter.Connection = CType(revertConnections(Me._eNGINESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eNGINESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eNGINESATTRTableAdapter) Is Nothing) Then
                    Me._eNGINESATTRTableAdapter.Connection = CType(revertConnections(Me._eNGINESATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eNGINESATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eNVIRONMENTSTableAdapter) Is Nothing) Then
                    Me._eNVIRONMENTSTableAdapter.Connection = CType(revertConnections(Me._eNVIRONMENTSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eNVIRONMENTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eNVIRONMENTSATTRTableAdapter) Is Nothing) Then
                    Me._eNVIRONMENTSATTRTableAdapter.Connection = CType(revertConnections(Me._eNVIRONMENTSATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eNVIRONMENTSATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pROJECTATTRTableAdapter) Is Nothing) Then
                    Me._pROJECTATTRTableAdapter.Connection = CType(revertConnections(Me._pROJECTATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pROJECTATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pROJECTSTableAdapter) Is Nothing) Then
                    Me._pROJECTSTableAdapter.Connection = CType(revertConnections(Me._pROJECTSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._pROJECTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYSTEMSTableAdapter) Is Nothing) Then
                    Me._sYSTEMSTableAdapter.Connection = CType(revertConnections(Me._sYSTEMSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYSTEMSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sYSTEMSATTRTableAdapter) Is Nothing) Then
                    Me._sYSTEMSATTRTableAdapter.Connection = CType(revertConnections(Me._sYSTEMSATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._sYSTEMSATTRTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tASKDSTableAdapter) Is Nothing) Then
                    Me._tASKDSTableAdapter.Connection = CType(revertConnections(Me._tASKDSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tASKDSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tASKMAPTableAdapter) Is Nothing) Then
                    Me._tASKMAPTableAdapter.Connection = CType(revertConnections(Me._tASKMAPTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tASKMAPTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tASKSTableAdapter) Is Nothing) Then
                    Me._tASKSTableAdapter.Connection = CType(revertConnections(Me._tASKSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tASKSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._test1TableAdapter) Is Nothing) Then
                    Me._test1TableAdapter.Connection = CType(revertConnections(Me._test1TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._test1TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vARIABLESTableAdapter) Is Nothing) Then
                    Me._vARIABLESTableAdapter.Connection = CType(revertConnections(Me._vARIABLESTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vARIABLESTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._vARIABLESATTRTableAdapter) Is Nothing) Then
                    Me._vARIABLESATTRTableAdapter.Connection = CType(revertConnections(Me._vARIABLESATTRTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._vARIABLESATTRTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
